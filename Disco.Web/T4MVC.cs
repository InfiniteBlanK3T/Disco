// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static class MVC
{
    static readonly APIClass s_API = new APIClass();
    public static APIClass API { get { return s_API; } }
    static readonly ConfigClass s_Config = new ConfigClass();
    public static ConfigClass Config { get { return s_Config; } }
    static readonly PublicClass s_Public = new PublicClass();
    public static PublicClass Public { get { return s_Public; } }
    static readonly ServicesClass s_Services = new ServicesClass();
    public static ServicesClass Services { get { return s_Services; } }
    public static Disco.Web.Controllers.DeviceController Device = new Disco.Web.Controllers.T4MVC_DeviceController();
    public static Disco.Web.Controllers.InitialConfigController InitialConfig = new Disco.Web.Controllers.T4MVC_InitialConfigController();
    public static Disco.Web.Controllers.JobController Job = new Disco.Web.Controllers.T4MVC_JobController();
    public static Disco.Web.Controllers.PluginWebHandlerController PluginWebHandler = new Disco.Web.Controllers.T4MVC_PluginWebHandlerController();
    public static Disco.Web.Controllers.SearchController Search = new Disco.Web.Controllers.T4MVC_SearchController();
    public static Disco.Web.Controllers.UpdateController Update = new Disco.Web.Controllers.T4MVC_UpdateController();
    public static Disco.Web.Controllers.UserController User = new Disco.Web.Controllers.T4MVC_UserController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class APIClass
    {
        public readonly string Name = "API";
        public Disco.Web.Areas.API.Controllers.AuthorizationRoleController AuthorizationRole = new Disco.Web.Areas.API.Controllers.T4MVC_AuthorizationRoleController();
        public Disco.Web.Areas.API.Controllers.BootstrapperController Bootstrapper = new Disco.Web.Areas.API.Controllers.T4MVC_BootstrapperController();
        public Disco.Web.Areas.API.Controllers.DeviceBatchController DeviceBatch = new Disco.Web.Areas.API.Controllers.T4MVC_DeviceBatchController();
        public Disco.Web.Areas.API.Controllers.DeviceCertificateController DeviceCertificate = new Disco.Web.Areas.API.Controllers.T4MVC_DeviceCertificateController();
        public Disco.Web.Areas.API.Controllers.DeviceController Device = new Disco.Web.Areas.API.Controllers.T4MVC_DeviceController();
        public Disco.Web.Areas.API.Controllers.DeviceModelController DeviceModel = new Disco.Web.Areas.API.Controllers.T4MVC_DeviceModelController();
        public Disco.Web.Areas.API.Controllers.DeviceProfileController DeviceProfile = new Disco.Web.Areas.API.Controllers.T4MVC_DeviceProfileController();
        public Disco.Web.Areas.API.Controllers.DocumentTemplateController DocumentTemplate = new Disco.Web.Areas.API.Controllers.T4MVC_DocumentTemplateController();
        public Disco.Web.Areas.API.Controllers.ExpressionsController Expressions = new Disco.Web.Areas.API.Controllers.T4MVC_ExpressionsController();
        public Disco.Web.Areas.API.Controllers.JobController Job = new Disco.Web.Areas.API.Controllers.T4MVC_JobController();
        public Disco.Web.Areas.API.Controllers.JobPreferencesController JobPreferences = new Disco.Web.Areas.API.Controllers.T4MVC_JobPreferencesController();
        public Disco.Web.Areas.API.Controllers.LoggingController Logging = new Disco.Web.Areas.API.Controllers.T4MVC_LoggingController();
        public Disco.Web.Areas.API.Controllers.PluginController Plugin = new Disco.Web.Areas.API.Controllers.T4MVC_PluginController();
        public Disco.Web.Areas.API.Controllers.SystemController System = new Disco.Web.Areas.API.Controllers.T4MVC_SystemController();
        public Disco.Web.Areas.API.Controllers.UserController User = new Disco.Web.Areas.API.Controllers.T4MVC_UserController();
    }
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class ConfigClass
    {
        public readonly string Name = "Config";
        public Disco.Web.Areas.Config.Controllers.AuthorizationRoleController AuthorizationRole = new Disco.Web.Areas.Config.Controllers.T4MVC_AuthorizationRoleController();
        public Disco.Web.Areas.Config.Controllers.ConfigController Config = new Disco.Web.Areas.Config.Controllers.T4MVC_ConfigController();
        public Disco.Web.Areas.Config.Controllers.DeviceBatchController DeviceBatch = new Disco.Web.Areas.Config.Controllers.T4MVC_DeviceBatchController();
        public Disco.Web.Areas.Config.Controllers.DeviceModelController DeviceModel = new Disco.Web.Areas.Config.Controllers.T4MVC_DeviceModelController();
        public Disco.Web.Areas.Config.Controllers.DeviceProfileController DeviceProfile = new Disco.Web.Areas.Config.Controllers.T4MVC_DeviceProfileController();
        public Disco.Web.Areas.Config.Controllers.DocumentTemplateController DocumentTemplate = new Disco.Web.Areas.Config.Controllers.T4MVC_DocumentTemplateController();
        public Disco.Web.Areas.Config.Controllers.EnrolmentController Enrolment = new Disco.Web.Areas.Config.Controllers.T4MVC_EnrolmentController();
        public Disco.Web.Areas.Config.Controllers.ExpressionsController Expressions = new Disco.Web.Areas.Config.Controllers.T4MVC_ExpressionsController();
        public Disco.Web.Areas.Config.Controllers.JobPreferencesController JobPreferences = new Disco.Web.Areas.Config.Controllers.T4MVC_JobPreferencesController();
        public Disco.Web.Areas.Config.Controllers.LoggingController Logging = new Disco.Web.Areas.Config.Controllers.T4MVC_LoggingController();
        public Disco.Web.Areas.Config.Controllers.OrganisationController Organisation = new Disco.Web.Areas.Config.Controllers.T4MVC_OrganisationController();
        public Disco.Web.Areas.Config.Controllers.PluginsController Plugins = new Disco.Web.Areas.Config.Controllers.T4MVC_PluginsController();
        public Disco.Web.Areas.Config.Controllers.SystemConfigController SystemConfig = new Disco.Web.Areas.Config.Controllers.T4MVC_SystemConfigController();
        public T4MVC.Config.SharedController Shared = new T4MVC.Config.SharedController();
    }
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class PublicClass
    {
        public readonly string Name = "Public";
        public Disco.Web.Areas.Public.Controllers.HeldDevicesController HeldDevices = new Disco.Web.Areas.Public.Controllers.T4MVC_HeldDevicesController();
        public Disco.Web.Areas.Public.Controllers.PublicController Public = new Disco.Web.Areas.Public.Controllers.T4MVC_PublicController();
        public Disco.Web.Areas.Public.Controllers.UserHeldDevicesController UserHeldDevices = new Disco.Web.Areas.Public.Controllers.T4MVC_UserHeldDevicesController();
        public T4MVC.Public.SharedController Shared = new T4MVC.Public.SharedController();
    }
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class ServicesClass
    {
        public readonly string Name = "Services";
        public Disco.Web.Areas.Services.Controllers.ClientController Client = new Disco.Web.Areas.Services.Controllers.T4MVC_ClientController();
    }
}

namespace T4MVC
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy
    {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_ActionResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class ClientSource {
        private const string URLPATH = "~/ClientSource";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Scripts {
            private const string URLPATH = "~/ClientSource/Scripts";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class Core {
                private const string URLPATH = "~/ClientSource/Scripts/Core";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string disco_dataTables_extensions_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/disco.dataTables.extensions.min.js") ? Url("disco.dataTables.extensions.min.js") : Url("disco.dataTables.extensions.js");
                              
                public static readonly string disco_uicore_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/disco.uicore.min.js") ? Url("disco.uicore.min.js") : Url("disco.uicore.js");
                              
                public static readonly string disco_unobtrusiveValidation_extensions_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/disco.unobtrusiveValidation.extensions.min.js") ? Url("disco.unobtrusiveValidation.extensions.min.js") : Url("disco.unobtrusiveValidation.extensions.js");
                              
                public static readonly string jquery_2_0_2_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-2.0.2.min.js") ? Url("jquery-2.0.2.min.js") : Url("jquery-2.0.2.js");
                              
                public static readonly string jquery_ui_1_10_3_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-ui-1.10.3.min.js") ? Url("jquery-ui-1.10.3.min.js") : Url("jquery-ui-1.10.3.js");
                              
                public static readonly string jquery_dataTables_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.dataTables.min.js") ? Url("jquery.dataTables.min.js") : Url("jquery.dataTables.js");
                              
                public static readonly string jquery_validate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.min.js") ? Url("jquery.validate.min.js") : Url("jquery.validate.js");
                              
                public static readonly string jquery_validate_unobtrusive_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.unobtrusive.min.js") ? Url("jquery.validate.unobtrusive.min.js") : Url("jquery.validate.unobtrusive.js");
                              
                public static readonly string jquery_watermark_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.watermark.min.js") ? Url("jquery.watermark.min.js") : Url("jquery.watermark.js");
                              
                public static readonly string modernizr_2_6_2_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/modernizr-2.6.2.min.js") ? Url("modernizr-2.6.2.min.js") : Url("modernizr-2.6.2.js");
                              
            }
        
            public static readonly string Core_js_bundle = Url("Core.js.bundle");
            public static readonly string Core_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Core.min.js") ? Url("Core.min.js") : Url("Core.js");
                          
            public static readonly string Core_min_js = Url("Core.min.js");
            public static readonly string Core_min_js_map = Url("Core.min.js.map");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class Modules {
                private const string URLPATH = "~/ClientSource/Scripts/Modules";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class Disco_AjaxHelperIcons {
                    private const string URLPATH = "~/ClientSource/Scripts/Modules/Disco-AjaxHelperIcons";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string disco_ajaxhelpericons_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/disco.ajaxhelpericons.min.js") ? Url("disco.ajaxhelpericons.min.js") : Url("disco.ajaxhelpericons.js");
                                  
                }
            
                public static readonly string Disco_AjaxHelperIcons_js_bundle = Url("Disco-AjaxHelperIcons.js.bundle");
                public static readonly string Disco_AjaxHelperIcons_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Disco-AjaxHelperIcons.min.js") ? Url("Disco-AjaxHelperIcons.min.js") : Url("Disco-AjaxHelperIcons.js");
                              
                public static readonly string Disco_AjaxHelperIcons_min_js = Url("Disco-AjaxHelperIcons.min.js");
                public static readonly string Disco_AjaxHelperIcons_min_js_map = Url("Disco-AjaxHelperIcons.min.js.map");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class Disco_CreateJob {
                    private const string URLPATH = "~/ClientSource/Scripts/Modules/Disco-CreateJob";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string disco_createjob_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/disco.createjob.min.js") ? Url("disco.createjob.min.js") : Url("disco.createjob.js");
                                  
                }
            
                public static readonly string Disco_CreateJob_js_bundle = Url("Disco-CreateJob.js.bundle");
                public static readonly string Disco_CreateJob_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Disco-CreateJob.min.js") ? Url("Disco-CreateJob.min.js") : Url("Disco-CreateJob.js");
                              
                public static readonly string Disco_CreateJob_min_js = Url("Disco-CreateJob.min.js");
                public static readonly string Disco_CreateJob_min_js_map = Url("Disco-CreateJob.min.js.map");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class Disco_DataTableHelpers {
                    private const string URLPATH = "~/ClientSource/Scripts/Modules/Disco-DataTableHelpers";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string disco_datatablehelpers_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/disco.datatablehelpers.min.js") ? Url("disco.datatablehelpers.min.js") : Url("disco.datatablehelpers.js");
                                  
                }
            
                public static readonly string Disco_DataTableHelpers_js_bundle = Url("Disco-DataTableHelpers.js.bundle");
                public static readonly string Disco_DataTableHelpers_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Disco-DataTableHelpers.min.js") ? Url("Disco-DataTableHelpers.min.js") : Url("Disco-DataTableHelpers.js");
                              
                public static readonly string Disco_DataTableHelpers_min_js = Url("Disco-DataTableHelpers.min.js");
                public static readonly string Disco_DataTableHelpers_min_js_map = Url("Disco-DataTableHelpers.min.js.map");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class Disco_ExpressionEditor {
                    private const string URLPATH = "~/ClientSource/Scripts/Modules/Disco-ExpressionEditor";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string disco_expressioneditor_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/disco.expressioneditor.min.js") ? Url("disco.expressioneditor.min.js") : Url("disco.expressioneditor.js");
                                  
                }
            
                public static readonly string Disco_ExpressionEditor_js_bundle = Url("Disco-ExpressionEditor.js.bundle");
                public static readonly string Disco_ExpressionEditor_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Disco-ExpressionEditor.min.js") ? Url("Disco-ExpressionEditor.min.js") : Url("Disco-ExpressionEditor.js");
                              
                public static readonly string Disco_ExpressionEditor_min_js = Url("Disco-ExpressionEditor.min.js");
                public static readonly string Disco_ExpressionEditor_min_js_map = Url("Disco-ExpressionEditor.min.js.map");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class Disco_jQueryExtensions {
                    private const string URLPATH = "~/ClientSource/Scripts/Modules/Disco-jQueryExtensions";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string disco_jQueryExtensions_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/disco.jQueryExtensions.min.js") ? Url("disco.jQueryExtensions.min.js") : Url("disco.jQueryExtensions.js");
                                  
                }
            
                public static readonly string Disco_jQueryExtensions_js_bundle = Url("Disco-jQueryExtensions.js.bundle");
                public static readonly string Disco_jQueryExtensions_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Disco-jQueryExtensions.min.js") ? Url("Disco-jQueryExtensions.min.js") : Url("Disco-jQueryExtensions.js");
                              
                public static readonly string Disco_jQueryExtensions_min_js = Url("Disco-jQueryExtensions.min.js");
                public static readonly string Disco_jQueryExtensions_min_js_map = Url("Disco-jQueryExtensions.min.js.map");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class Disco_PropertyChangeHelpers {
                    private const string URLPATH = "~/ClientSource/Scripts/Modules/Disco-PropertyChangeHelpers";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string disco_propertychangehelpers_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/disco.propertychangehelpers.min.js") ? Url("disco.propertychangehelpers.min.js") : Url("disco.propertychangehelpers.js");
                                  
                }
            
                public static readonly string Disco_PropertyChangeHelpers_js_bundle = Url("Disco-PropertyChangeHelpers.js.bundle");
                public static readonly string Disco_PropertyChangeHelpers_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Disco-PropertyChangeHelpers.min.js") ? Url("Disco-PropertyChangeHelpers.min.js") : Url("Disco-PropertyChangeHelpers.js");
                              
                public static readonly string Disco_PropertyChangeHelpers_min_js = Url("Disco-PropertyChangeHelpers.min.js");
                public static readonly string Disco_PropertyChangeHelpers_min_js_map = Url("Disco-PropertyChangeHelpers.min.js.map");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class Highcharts {
                    private const string URLPATH = "~/ClientSource/Scripts/Modules/Highcharts";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string highcharts_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/highcharts.src.min.js") ? Url("highcharts.src.min.js") : Url("highcharts.src.js");
                                  
                }
            
                public static readonly string Highcharts_js_bundle = Url("Highcharts.js.bundle");
                public static readonly string Highcharts_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Highcharts.min.js") ? Url("Highcharts.min.js") : Url("Highcharts.js");
                              
                public static readonly string Highcharts_min_js = Url("Highcharts.min.js");
                public static readonly string Highcharts_min_js_map = Url("Highcharts.min.js.map");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class jQuery_Fancytree {
                    private const string URLPATH = "~/ClientSource/Scripts/Modules/jQuery-Fancytree";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string jquery_fancytree_all_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.fancytree-all.min.js") ? Url("jquery.fancytree-all.min.js") : Url("jquery.fancytree-all.js");
                                  
                }
            
                public static readonly string jQuery_Fancytree_js_bundle = Url("jQuery-Fancytree.js.bundle");
                public static readonly string jQuery_Fancytree_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jQuery-Fancytree.min.js") ? Url("jQuery-Fancytree.min.js") : Url("jQuery-Fancytree.js");
                              
                public static readonly string jQuery_Fancytree_min_js = Url("jQuery-Fancytree.min.js");
                public static readonly string jQuery_Fancytree_min_js_map = Url("jQuery-Fancytree.min.js.map");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class jQuery_Isotope {
                    private const string URLPATH = "~/ClientSource/Scripts/Modules/jQuery-Isotope";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string jquery_isotope_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.isotope.min.js") ? Url("jquery.isotope.min.js") : Url("jquery.isotope.js");
                                  
                }
            
                public static readonly string jQuery_Isotope_js_bundle = Url("jQuery-Isotope.js.bundle");
                public static readonly string jQuery_Isotope_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jQuery-Isotope.min.js") ? Url("jQuery-Isotope.min.js") : Url("jQuery-Isotope.js");
                              
                public static readonly string jQuery_Isotope_min_js = Url("jQuery-Isotope.min.js");
                public static readonly string jQuery_Isotope_min_js_map = Url("jQuery-Isotope.min.js.map");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class jQuery_NumberFormatter {
                    private const string URLPATH = "~/ClientSource/Scripts/Modules/jQuery-NumberFormatter";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string jquery_numberformatter_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.numberformatter.min.js") ? Url("jquery.numberformatter.min.js") : Url("jquery.numberformatter.js");
                                  
                    public static readonly string jshashtable_2_1_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jshashtable-2.1.min.js") ? Url("jshashtable-2.1.min.js") : Url("jshashtable-2.1.js");
                                  
                }
            
                public static readonly string jQuery_NumberFormatter_js_bundle = Url("jQuery-NumberFormatter.js.bundle");
                public static readonly string jQuery_NumberFormatter_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jQuery-NumberFormatter.min.js") ? Url("jQuery-NumberFormatter.min.js") : Url("jQuery-NumberFormatter.js");
                              
                public static readonly string jQuery_NumberFormatter_min_js = Url("jQuery-NumberFormatter.min.js");
                public static readonly string jQuery_NumberFormatter_min_js_map = Url("jQuery-NumberFormatter.min.js.map");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class jQuery_SignalR {
                    private const string URLPATH = "~/ClientSource/Scripts/Modules/jQuery-SignalR";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string jquery_signalR_1_1_2_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.signalR-1.1.2.min.js") ? Url("jquery.signalR-1.1.2.min.js") : Url("jquery.signalR-1.1.2.js");
                                  
                }
            
                public static readonly string jQuery_SignalR_js_bundle = Url("jQuery-SignalR.js.bundle");
                public static readonly string jQuery_SignalR_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jQuery-SignalR.min.js") ? Url("jQuery-SignalR.min.js") : Url("jQuery-SignalR.js");
                              
                public static readonly string jQuery_SignalR_min_js = Url("jQuery-SignalR.min.js");
                public static readonly string jQuery_SignalR_min_js_map = Url("jQuery-SignalR.min.js.map");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class jQueryUI_DynaTree {
                    private const string URLPATH = "~/ClientSource/Scripts/Modules/jQueryUI-DynaTree";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string jquery_dynatree_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.dynatree.min.js") ? Url("jquery.dynatree.min.js") : Url("jquery.dynatree.js");
                                  
                }
            
                public static readonly string jQueryUI_DynaTree_js_bundle = Url("jQueryUI-DynaTree.js.bundle");
                public static readonly string jQueryUI_DynaTree_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jQueryUI-DynaTree.min.js") ? Url("jQueryUI-DynaTree.min.js") : Url("jQueryUI-DynaTree.js");
                              
                public static readonly string jQueryUI_DynaTree_min_js = Url("jQueryUI-DynaTree.min.js");
                public static readonly string jQueryUI_DynaTree_min_js_map = Url("jQueryUI-DynaTree.min.js.map");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class jQueryUI_TimePicker {
                    private const string URLPATH = "~/ClientSource/Scripts/Modules/jQueryUI-TimePicker";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string jquery_ui_timepicker_addon_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-ui-timepicker-addon.min.js") ? Url("jquery-ui-timepicker-addon.min.js") : Url("jquery-ui-timepicker-addon.js");
                                  
                }
            
                public static readonly string jQueryUI_TimePicker_js_bundle = Url("jQueryUI-TimePicker.js.bundle");
                public static readonly string jQueryUI_TimePicker_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jQueryUI-TimePicker.min.js") ? Url("jQueryUI-TimePicker.min.js") : Url("jQueryUI-TimePicker.js");
                              
                public static readonly string jQueryUI_TimePicker_min_js = Url("jQueryUI-TimePicker.min.js");
                public static readonly string jQueryUI_TimePicker_min_js_map = Url("jQueryUI-TimePicker.min.js.map");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class Knockout {
                    private const string URLPATH = "~/ClientSource/Scripts/Modules/Knockout";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string knockout_2_2_1_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/knockout-2.2.1.min.js") ? Url("knockout-2.2.1.min.js") : Url("knockout-2.2.1.js");
                                  
                }
            
                public static readonly string Knockout_js_bundle = Url("Knockout.js.bundle");
                public static readonly string Knockout_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Knockout.min.js") ? Url("Knockout.min.js") : Url("Knockout.js");
                              
                public static readonly string Knockout_min_js = Url("Knockout.min.js");
                public static readonly string Knockout_min_js_map = Url("Knockout.min.js.map");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class Shadowbox {
                    private const string URLPATH = "~/ClientSource/Scripts/Modules/Shadowbox";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string shadowbox_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shadowbox.min.js") ? Url("shadowbox.min.js") : Url("shadowbox.js");
                                  
                }
            
                public static readonly string Shadowbox_js_bundle = Url("Shadowbox.js.bundle");
                public static readonly string Shadowbox_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Shadowbox.min.js") ? Url("Shadowbox.min.js") : Url("Shadowbox.js");
                              
                public static readonly string Shadowbox_min_js = Url("Shadowbox.min.js");
                public static readonly string Shadowbox_min_js_map = Url("Shadowbox.min.js.map");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class Silverlight {
                    private const string URLPATH = "~/ClientSource/Scripts/Modules/Silverlight";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string Silverlight_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Silverlight.min.js") ? Url("Silverlight.min.js") : Url("Silverlight.js");
                                  
                }
            
                public static readonly string Silverlight_js_bundle = Url("Silverlight.js.bundle");
                public static readonly string Silverlight_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Silverlight.min.js") ? Url("Silverlight.min.js") : Url("Silverlight.js");
                              
                public static readonly string Silverlight_min_js = Url("Silverlight.min.js");
                public static readonly string Silverlight_min_js_map = Url("Silverlight.min.js.map");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class Timeline {
                    private const string URLPATH = "~/ClientSource/Scripts/Modules/Timeline";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string disco_simileajaxextensions_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/disco.simileajaxextensions.min.js") ? Url("disco.simileajaxextensions.min.js") : Url("disco.simileajaxextensions.js");
                                  
                    public static readonly string disco_timelineextensions_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/disco.timelineextensions.min.js") ? Url("disco.timelineextensions.min.js") : Url("disco.timelineextensions.js");
                                  
                    public static readonly string labellers_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/labellers.min.js") ? Url("labellers.min.js") : Url("labellers.js");
                                  
                    public static readonly string simile_ajax_bundle_DiscoMod_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/simile-ajax-bundle-DiscoMod.min.js") ? Url("simile-ajax-bundle-DiscoMod.min.js") : Url("simile-ajax-bundle-DiscoMod.js");
                                  
                    public static readonly string timeline_bundle_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/timeline-bundle.min.js") ? Url("timeline-bundle.min.js") : Url("timeline-bundle.js");
                                  
                    public static readonly string timeline_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/timeline.min.js") ? Url("timeline.min.js") : Url("timeline.js");
                                  
                }
            
                public static readonly string Timeline_js_bundle = Url("Timeline.js.bundle");
                public static readonly string timeline_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/timeline.min.js") ? Url("timeline.min.js") : Url("timeline.js");
                              
                public static readonly string Timeline_min_js = Url("Timeline.min.js");
                public static readonly string Timeline_min_js_map = Url("Timeline.min.js.map");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class tinymce {
                    private const string URLPATH = "~/ClientSource/Scripts/Modules/tinymce";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string disco_tinymceextensions_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/disco.tinymceextensions.min.js") ? Url("disco.tinymceextensions.min.js") : Url("disco.tinymceextensions.js");
                                  
                    public static readonly string jquery_tinymce_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.tinymce.min.js") ? Url("jquery.tinymce.min.js") : Url("jquery.tinymce.js");
                                  
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class langs {
                        private const string URLPATH = "~/ClientSource/Scripts/Modules/tinymce/langs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string en_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en.min.js") ? Url("en.min.js") : Url("en.js");
                                      
                    }
                
                    public static readonly string license_txt = Url("license.txt");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class themes {
                        private const string URLPATH = "~/ClientSource/Scripts/Modules/tinymce/themes";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class advanced {
                            private const string URLPATH = "~/ClientSource/Scripts/Modules/tinymce/themes/advanced";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string about_htm = Url("about.htm");
                            public static readonly string anchor_htm = Url("anchor.htm");
                            public static readonly string charmap_htm = Url("charmap.htm");
                            public static readonly string color_picker_htm = Url("color_picker.htm");
                            public static readonly string editor_template_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_template.min.js") ? Url("editor_template.min.js") : Url("editor_template.js");
                                          
                            public static readonly string editor_template_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_template_src.min.js") ? Url("editor_template_src.min.js") : Url("editor_template_src.js");
                                          
                            public static readonly string image_htm = Url("image.htm");
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class img {
                                private const string URLPATH = "~/ClientSource/Scripts/Modules/tinymce/themes/advanced/img";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string colorpicker_jpg = Url("colorpicker.jpg");
                                public static readonly string flash_gif = Url("flash.gif");
                                public static readonly string icons_gif = Url("icons.gif");
                                public static readonly string iframe_gif = Url("iframe.gif");
                                public static readonly string pagebreak_gif = Url("pagebreak.gif");
                                public static readonly string quicktime_gif = Url("quicktime.gif");
                                public static readonly string realmedia_gif = Url("realmedia.gif");
                                public static readonly string shockwave_gif = Url("shockwave.gif");
                                public static readonly string trans_gif = Url("trans.gif");
                                public static readonly string video_gif = Url("video.gif");
                                public static readonly string windowsmedia_gif = Url("windowsmedia.gif");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class js {
                                private const string URLPATH = "~/ClientSource/Scripts/Modules/tinymce/themes/advanced/js";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string about_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/about.min.js") ? Url("about.min.js") : Url("about.js");
                                              
                                public static readonly string anchor_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/anchor.min.js") ? Url("anchor.min.js") : Url("anchor.js");
                                              
                                public static readonly string charmap_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/charmap.min.js") ? Url("charmap.min.js") : Url("charmap.js");
                                              
                                public static readonly string color_picker_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/color_picker.min.js") ? Url("color_picker.min.js") : Url("color_picker.js");
                                              
                                public static readonly string image_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/image.min.js") ? Url("image.min.js") : Url("image.js");
                                              
                                public static readonly string link_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/link.min.js") ? Url("link.min.js") : Url("link.js");
                                              
                                public static readonly string source_editor_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/source_editor.min.js") ? Url("source_editor.min.js") : Url("source_editor.js");
                                              
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class langs {
                                private const string URLPATH = "~/ClientSource/Scripts/Modules/tinymce/themes/advanced/langs";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string en_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en.min.js") ? Url("en.min.js") : Url("en.js");
                                              
                                public static readonly string en_dlg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en_dlg.min.js") ? Url("en_dlg.min.js") : Url("en_dlg.js");
                                              
                            }
                        
                            public static readonly string link_htm = Url("link.htm");
                            public static readonly string shortcuts_htm = Url("shortcuts.htm");
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class skins {
                                private const string URLPATH = "~/ClientSource/Scripts/Modules/tinymce/themes/advanced/skins";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                                public static class @default {
                                    private const string URLPATH = "~/ClientSource/Scripts/Modules/tinymce/themes/advanced/skins/default";
                                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                    public static readonly string content_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/content.min.css") ? Url("content.min.css") : Url("content.css");
                                         
                                    public static readonly string dialog_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog.min.css") ? Url("dialog.min.css") : Url("dialog.css");
                                         
                                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                                    public static class img {
                                        private const string URLPATH = "~/ClientSource/Scripts/Modules/tinymce/themes/advanced/skins/default/img";
                                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                        public static readonly string buttons_png = Url("buttons.png");
                                        public static readonly string items_gif = Url("items.gif");
                                        public static readonly string menu_arrow_gif = Url("menu_arrow.gif");
                                        public static readonly string menu_check_gif = Url("menu_check.gif");
                                        public static readonly string progress_gif = Url("progress.gif");
                                        public static readonly string tabs_gif = Url("tabs.gif");
                                    }
                                
                                    public static readonly string ui_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ui.min.css") ? Url("ui.min.css") : Url("ui.css");
                                         
                                }
                            
                                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                                public static class highcontrast {
                                    private const string URLPATH = "~/ClientSource/Scripts/Modules/tinymce/themes/advanced/skins/highcontrast";
                                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                    public static readonly string content_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/content.min.css") ? Url("content.min.css") : Url("content.css");
                                         
                                    public static readonly string dialog_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog.min.css") ? Url("dialog.min.css") : Url("dialog.css");
                                         
                                    public static readonly string ui_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ui.min.css") ? Url("ui.min.css") : Url("ui.css");
                                         
                                }
                            
                                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                                public static class o2k7 {
                                    private const string URLPATH = "~/ClientSource/Scripts/Modules/tinymce/themes/advanced/skins/o2k7";
                                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                    public static readonly string content_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/content.min.css") ? Url("content.min.css") : Url("content.css");
                                         
                                    public static readonly string dialog_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog.min.css") ? Url("dialog.min.css") : Url("dialog.css");
                                         
                                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                                    public static class img {
                                        private const string URLPATH = "~/ClientSource/Scripts/Modules/tinymce/themes/advanced/skins/o2k7/img";
                                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                        public static readonly string button_bg_png = Url("button_bg.png");
                                        public static readonly string button_bg_black_png = Url("button_bg_black.png");
                                        public static readonly string button_bg_silver_png = Url("button_bg_silver.png");
                                    }
                                
                                    public static readonly string ui_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ui.min.css") ? Url("ui.min.css") : Url("ui.css");
                                         
                                    public static readonly string ui_black_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ui_black.min.css") ? Url("ui_black.min.css") : Url("ui_black.css");
                                         
                                    public static readonly string ui_silver_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ui_silver.min.css") ? Url("ui_silver.min.css") : Url("ui_silver.css");
                                         
                                }
                            
                            }
                        
                            public static readonly string source_editor_htm = Url("source_editor.htm");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class simple {
                            private const string URLPATH = "~/ClientSource/Scripts/Modules/tinymce/themes/simple";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string editor_template_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_template.min.js") ? Url("editor_template.min.js") : Url("editor_template.js");
                                          
                            public static readonly string editor_template_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_template_src.min.js") ? Url("editor_template_src.min.js") : Url("editor_template_src.js");
                                          
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class img {
                                private const string URLPATH = "~/ClientSource/Scripts/Modules/tinymce/themes/simple/img";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string icons_gif = Url("icons.gif");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class langs {
                                private const string URLPATH = "~/ClientSource/Scripts/Modules/tinymce/themes/simple/langs";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string en_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en.min.js") ? Url("en.min.js") : Url("en.js");
                                              
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class skins {
                                private const string URLPATH = "~/ClientSource/Scripts/Modules/tinymce/themes/simple/skins";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                                public static class @default {
                                    private const string URLPATH = "~/ClientSource/Scripts/Modules/tinymce/themes/simple/skins/default";
                                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                    public static readonly string content_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/content.min.css") ? Url("content.min.css") : Url("content.css");
                                         
                                    public static readonly string ui_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ui.min.css") ? Url("ui.min.css") : Url("ui.css");
                                         
                                }
                            
                                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                                public static class o2k7 {
                                    private const string URLPATH = "~/ClientSource/Scripts/Modules/tinymce/themes/simple/skins/o2k7";
                                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                    public static readonly string content_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/content.min.css") ? Url("content.min.css") : Url("content.css");
                                         
                                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                                    public static class img {
                                        private const string URLPATH = "~/ClientSource/Scripts/Modules/tinymce/themes/simple/skins/o2k7/img";
                                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                        public static readonly string button_bg_png = Url("button_bg.png");
                                    }
                                
                                    public static readonly string ui_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ui.min.css") ? Url("ui.min.css") : Url("ui.css");
                                         
                                }
                            
                            }
                        
                        }
                    
                    }
                
                    public static readonly string tiny_mce_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tiny_mce.min.js") ? Url("tiny_mce.min.js") : Url("tiny_mce.js");
                                  
                    public static readonly string tiny_mce_jquery_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tiny_mce_jquery.min.js") ? Url("tiny_mce_jquery.min.js") : Url("tiny_mce_jquery.js");
                                  
                    public static readonly string tiny_mce_popup_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tiny_mce_popup.min.js") ? Url("tiny_mce_popup.min.js") : Url("tiny_mce_popup.js");
                                  
                    public static readonly string tiny_mce_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tiny_mce_src.min.js") ? Url("tiny_mce_src.min.js") : Url("tiny_mce_src.js");
                                  
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class utils {
                        private const string URLPATH = "~/ClientSource/Scripts/Modules/tinymce/utils";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string editable_selects_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editable_selects.min.js") ? Url("editable_selects.min.js") : Url("editable_selects.js");
                                      
                        public static readonly string form_utils_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/form_utils.min.js") ? Url("form_utils.min.js") : Url("form_utils.js");
                                      
                        public static readonly string mctabs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mctabs.min.js") ? Url("mctabs.min.js") : Url("mctabs.js");
                                      
                        public static readonly string validate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/validate.min.js") ? Url("validate.min.js") : Url("validate.js");
                                      
                    }
                
                }
            
                public static readonly string tinymce_js_bundle = Url("tinymce.js.bundle");
                public static readonly string tinymce_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tinymce.min.js") ? Url("tinymce.min.js") : Url("tinymce.js");
                              
                public static readonly string tinymce_min_js = Url("tinymce.min.js");
                public static readonly string tinymce_min_js_map = Url("tinymce.min.js.map");
            }
        
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Style {
            private const string URLPATH = "~/ClientSource/Style";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string BundleSite_css_bundle = Url("BundleSite.css.bundle");
            public static readonly string BundleSite_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/BundleSite.min.css") ? Url("BundleSite.min.css") : Url("BundleSite.css");
                 
            public static readonly string BundleSite_min_css = Url("BundleSite.min.css");
            public static readonly string Config_less = Url("Config.less");
            public static readonly string Config_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Config.min.css") ? Url("Config.min.css") : Url("Config.css");
                 
            public static readonly string Config_min_css = Url("Config.min.css");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class Credits {
                private const string URLPATH = "~/ClientSource/Style/Credits";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string CrystalIcons_png = Url("CrystalIcons.png");
                public static readonly string dotless_png = Url("dotless.png");
                public static readonly string HighchartsJS_png = Url("HighchartsJS.png");
                public static readonly string iTextSharp_png = Url("iTextSharp.png");
                public static readonly string jQuery_png = Url("jQuery.png");
                public static readonly string jQueryUI_png = Url("jQueryUI.png");
                public static readonly string JsonNET_png = Url("JsonNET.png");
                public static readonly string knockoutjs_png = Url("knockoutjs.png");
                public static readonly string LibTiff_png = Url("LibTiff.png");
                public static readonly string MicrosoftASPNET_png = Url("MicrosoftASPNET.png");
                public static readonly string MicrosoftNET_png = Url("MicrosoftNET.png");
                public static readonly string MicrosoftSilverlight_png = Url("MicrosoftSilverlight.png");
                public static readonly string MicrosoftSQLServer_png = Url("MicrosoftSQLServer.png");
                public static readonly string Modernizr_png = Url("Modernizr.png");
                public static readonly string nuget_png = Url("nuget.png");
                public static readonly string Quartz_png = Url("Quartz.png");
                public static readonly string Shadowboxjs_png = Url("Shadowboxjs.png");
                public static readonly string SignalR_png = Url("SignalR.png");
                public static readonly string SpringNET_png = Url("SpringNET.png");
                public static readonly string TinyMCE_png = Url("TinyMCE.png");
                public static readonly string ZXing_png = Url("ZXing.png");
            }
        
            public static readonly string Credits_less = Url("Credits.less");
            public static readonly string Credits_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Credits.min.css") ? Url("Credits.min.css") : Url("Credits.css");
                 
            public static readonly string Credits_min_css = Url("Credits.min.css");
            public static readonly string Declarations_less = Url("Declarations.less");
            public static readonly string Declarations_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Declarations.min.css") ? Url("Declarations.min.css") : Url("Declarations.css");
                 
            public static readonly string Declarations_min_css = Url("Declarations.min.css");
            public static readonly string Device_less = Url("Device.less");
            public static readonly string Device_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Device.min.css") ? Url("Device.min.css") : Url("Device.css");
                 
            public static readonly string Device_min_css = Url("Device.min.css");
            public static readonly string Dialog_less = Url("Dialog.less");
            public static readonly string Dialog_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Dialog.min.css") ? Url("Dialog.min.css") : Url("Dialog.css");
                 
            public static readonly string Dialog_min_css = Url("Dialog.min.css");
            public static readonly string ExpressionEditor_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ExpressionEditor.min.css") ? Url("ExpressionEditor.min.css") : Url("ExpressionEditor.css");
                 
            public static readonly string ExpressionEditor_min_css = Url("ExpressionEditor.min.css");
            public static readonly string ExpressionEditor_htm = Url("ExpressionEditor.htm");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class Fancytree {
                private const string URLPATH = "~/ClientSource/Style/Fancytree";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string icons_DiscoMod_png = Url("icons-DiscoMod.png");
                public static readonly string icons_gif = Url("icons.gif");
                public static readonly string loading_gif = Url("loading.gif");
                public static readonly string ui_fancytree_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ui.fancytree.min.css") ? Url("ui.fancytree.min.css") : Url("ui.fancytree.css");
                     
                public static readonly string ui_fancytree_min_css = Url("ui.fancytree.min.css");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class Images {
                private const string URLPATH = "~/ClientSource/Style/Images";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class Actions {
                    private const string URLPATH = "~/ClientSource/Style/Images/Actions";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string attach_png = Url("attach.png");
                    public static readonly string dataTableFirst_png = Url("dataTableFirst.png");
                    public static readonly string dataTableFirstDisabled_png = Url("dataTableFirstDisabled.png");
                    public static readonly string dataTableLast_png = Url("dataTableLast.png");
                    public static readonly string dataTableLastDisabled_png = Url("dataTableLastDisabled.png");
                    public static readonly string dataTableNext_png = Url("dataTableNext.png");
                    public static readonly string dataTableNextDisabled_png = Url("dataTableNextDisabled.png");
                    public static readonly string dataTablePrev_png = Url("dataTablePrev.png");
                    public static readonly string dataTablePrevDisabled_png = Url("dataTablePrevDisabled.png");
                    public static readonly string dataTableSort_png = Url("dataTableSort.png");
                    public static readonly string editForm_png = Url("editForm.png");
                    public static readonly string expressionBrowser_png = Url("expressionBrowser.png");
                    public static readonly string expressionBrowser256_png = Url("expressionBrowser256.png");
                    public static readonly string list_png = Url("list.png");
                    public static readonly string listAlert_png = Url("listAlert.png");
                    public static readonly string locked_png = Url("locked.png");
                    public static readonly string pageMenuConfigIcon_png = Url("pageMenuConfigIcon.png");
                    public static readonly string pageMenuConfigIconHover_png = Url("pageMenuConfigIconHover.png");
                    public static readonly string pageMenuIcon_png = Url("pageMenuIcon.png");
                    public static readonly string pageMenuIconHover_png = Url("pageMenuIconHover.png");
                    public static readonly string pageMenuNoticeboardIcon_png = Url("pageMenuNoticeboardIcon.png");
                    public static readonly string pageMenuNoticeboardIconHover_png = Url("pageMenuNoticeboardIconHover.png");
                    public static readonly string pageMenuReportIcon_png = Url("pageMenuReportIcon.png");
                    public static readonly string pageMenuReportIconHover_png = Url("pageMenuReportIconHover.png");
                    public static readonly string photo_png = Url("photo.png");
                    public static readonly string pluginDownloadIcon16_png = Url("pluginDownloadIcon16.png");
                    public static readonly string pluginDownloadIconHover16_png = Url("pluginDownloadIconHover16.png");
                    public static readonly string post_png = Url("post.png");
                    public static readonly string remove_png = Url("remove.png");
                    public static readonly string removeSubtle_png = Url("removeSubtle.png");
                    public static readonly string unlocked_png = Url("unlocked.png");
                    public static readonly string user16_png = Url("user16.png");
                    public static readonly string userGroup16_png = Url("userGroup16.png");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class AttachmentTypes {
                    private const string URLPATH = "~/ClientSource/Style/Images/AttachmentTypes";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string document_png = Url("document.png");
                    public static readonly string expressionBrowserIcons_png = Url("expressionBrowserIcons.png");
                    public static readonly string image_png = Url("image.png");
                    public static readonly string pdf_png = Url("pdf.png");
                    public static readonly string unknown_png = Url("unknown.png");
                }
            
                public static readonly string BackgroundDocument_png = Url("BackgroundDocument.png");
                public static readonly string BackgroundInitialConfig_jpg = Url("BackgroundInitialConfig.jpg");
                public static readonly string BackgroundPage_png = Url("BackgroundPage.png");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class DeviceTypes {
                    private const string URLPATH = "~/ClientSource/Style/Images/DeviceTypes";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string AppliancePC_png = Url("AppliancePC.png");
                    public static readonly string Desktop_png = Url("Desktop.png");
                    public static readonly string EnterpriseServer_png = Url("EnterpriseServer.png");
                    public static readonly string Maximum_png = Url("Maximum.png");
                    public static readonly string Mobile_png = Url("Mobile.png");
                    public static readonly string PerformanceServer_png = Url("PerformanceServer.png");
                    public static readonly string SmallOfficeAndHomeOfficeServer_png = Url("SmallOfficeAndHomeOfficeServer.png");
                    public static readonly string Unknown_png = Url("Unknown.png");
                    public static readonly string Workstation_png = Url("Workstation.png");
                }
            
                public static readonly string Heading_png = Url("Heading.png");
                public static readonly string Icon32_png = Url("Icon32.png");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class Status {
                    private const string URLPATH = "~/ClientSource/Style/Images/Status";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string error_png = Url("error.png");
                    public static readonly string fail32_png = Url("fail32.png");
                    public static readonly string fileBroken256_png = Url("fileBroken256.png");
                    public static readonly string information_png = Url("information.png");
                    public static readonly string jobStatus_Closed_png = Url("jobStatus-Closed.png");
                    public static readonly string jobStatus_Insurance_png = Url("jobStatus-Insurance.png");
                    public static readonly string jobStatus_Open_png = Url("jobStatus-Open.png");
                    public static readonly string jobStatus_Repairs_png = Url("jobStatus-Repairs.png");
                    public static readonly string jobStatus_User_png = Url("jobStatus-User.png");
                    public static readonly string loading_gif = Url("loading.gif");
                    public static readonly string ok_png = Url("ok.png");
                    public static readonly string pbar_ani_gif = Url("pbar-ani.gif");
                    public static readonly string save_png = Url("save.png");
                    public static readonly string success_png = Url("success.png");
                    public static readonly string updateAvailable_png = Url("updateAvailable.png");
                    public static readonly string warning_png = Url("warning.png");
                    public static readonly string warning32_png = Url("warning32.png");
                }
            
                public static readonly string SubMenuBackground_png = Url("SubMenuBackground.png");
                public static readonly string SubSubMenuIcon_png = Url("SubSubMenuIcon.png");
            }
        
            public static readonly string InitialConfig_less = Url("InitialConfig.less");
            public static readonly string InitialConfig_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/InitialConfig.min.css") ? Url("InitialConfig.min.css") : Url("InitialConfig.css");
                 
            public static readonly string InitialConfig_min_css = Url("InitialConfig.min.css");
            public static readonly string IsotopeStyles_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/IsotopeStyles.min.css") ? Url("IsotopeStyles.min.css") : Url("IsotopeStyles.css");
                 
            public static readonly string IsotopeStyles_min_css = Url("IsotopeStyles.min.css");
            public static readonly string Job_less = Url("Job.less");
            public static readonly string Job_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Job.min.css") ? Url("Job.min.css") : Url("Job.css");
                 
            public static readonly string Job_min_css = Url("Job.min.css");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class jQueryUI {
                private const string URLPATH = "~/ClientSource/Style/jQueryUI";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class dynatree {
                    private const string URLPATH = "~/ClientSource/Style/jQueryUI/dynatree";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string icons_gif = Url("icons.gif");
                    public static readonly string loading_gif = Url("loading.gif");
                    public static readonly string ui_dynatree_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ui.dynatree.min.css") ? Url("ui.dynatree.min.css") : Url("ui.dynatree.css");
                         
                    public static readonly string ui_dynatree_min_css = Url("ui.dynatree.min.css");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class images {
                    private const string URLPATH = "~/ClientSource/Style/jQueryUI/images";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string animated_overlay_gif = Url("animated-overlay.gif");
                    public static readonly string ui_bg_diagonals_thick_18_b81900_40x40_png = Url("ui-bg_diagonals-thick_18_b81900_40x40.png");
                    public static readonly string ui_bg_diagonals_thick_20_666666_40x40_png = Url("ui-bg_diagonals-thick_20_666666_40x40.png");
                    public static readonly string ui_bg_flat_10_000000_40x100_png = Url("ui-bg_flat_10_000000_40x100.png");
                    public static readonly string ui_bg_glass_100_f6f6f6_1x400_png = Url("ui-bg_glass_100_f6f6f6_1x400.png");
                    public static readonly string ui_bg_glass_100_fdf5ce_1x400_png = Url("ui-bg_glass_100_fdf5ce_1x400.png");
                    public static readonly string ui_bg_glass_65_ffffff_1x400_png = Url("ui-bg_glass_65_ffffff_1x400.png");
                    public static readonly string ui_bg_gloss_wave_35_f6a828_500x100_png = Url("ui-bg_gloss-wave_35_f6a828_500x100.png");
                    public static readonly string ui_bg_highlight_soft_100_eeeeee_1x100_png = Url("ui-bg_highlight-soft_100_eeeeee_1x100.png");
                    public static readonly string ui_bg_highlight_soft_75_ffe45c_1x100_png = Url("ui-bg_highlight-soft_75_ffe45c_1x100.png");
                    public static readonly string ui_icons_222222_256x240_png = Url("ui-icons_222222_256x240.png");
                    public static readonly string ui_icons_228ef1_256x240_png = Url("ui-icons_228ef1_256x240.png");
                    public static readonly string ui_icons_ef8c08_256x240_png = Url("ui-icons_ef8c08_256x240.png");
                    public static readonly string ui_icons_ffd27a_256x240_png = Url("ui-icons_ffd27a_256x240.png");
                    public static readonly string ui_icons_ffffff_256x240_png = Url("ui-icons_ffffff_256x240.png");
                }
            
                public static readonly string jquery_ui_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-ui.min.css") ? Url("jquery-ui.min.css") : Url("jquery-ui.css");
                     
            }
        
            public static readonly string jQueryUIExtensions_less = Url("jQueryUIExtensions.less");
            public static readonly string jQueryUIExtensions_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jQueryUIExtensions.min.css") ? Url("jQueryUIExtensions.min.css") : Url("jQueryUIExtensions.css");
                 
            public static readonly string jQueryUIExtensions_min_css = Url("jQueryUIExtensions.min.css");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class Public {
                private const string URLPATH = "~/ClientSource/Style/Public";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string HeldDevices_less = Url("HeldDevices.less");
                public static readonly string HeldDevices_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/HeldDevices.min.css") ? Url("HeldDevices.min.css") : Url("HeldDevices.css");
                     
                public static readonly string HeldDevices_min_css = Url("HeldDevices.min.css");
                public static readonly string HeldDevicesNoticeboard_less = Url("HeldDevicesNoticeboard.less");
                public static readonly string HeldDevicesNoticeboard_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/HeldDevicesNoticeboard.min.css") ? Url("HeldDevicesNoticeboard.min.css") : Url("HeldDevicesNoticeboard.css");
                     
                public static readonly string HeldDevicesNoticeboard_min_css = Url("HeldDevicesNoticeboard.min.css");
                public static readonly string UserHeldDevicesXml_Sharepoint_xslt = Url("UserHeldDevicesXml_Sharepoint.xslt");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class Shadowbox {
                private const string URLPATH = "~/ClientSource/Style/Shadowbox";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string close_png = Url("close.png");
                public static readonly string loading_gif = Url("loading.gif");
                public static readonly string next_png = Url("next.png");
                public static readonly string pause_png = Url("pause.png");
                public static readonly string play_png = Url("play.png");
                public static readonly string previous_png = Url("previous.png");
                public static readonly string shadowbox_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shadowbox.min.css") ? Url("shadowbox.min.css") : Url("shadowbox.css");
                     
                public static readonly string shadowbox_min_css = Url("shadowbox.min.css");
            }
        
            public static readonly string Shadowbox_css_bundle = Url("Shadowbox.css.bundle");
            public static readonly string Shadowbox_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Shadowbox.min.css") ? Url("Shadowbox.min.css") : Url("Shadowbox.css");
                 
            public static readonly string Shadowbox_min_css = Url("Shadowbox.min.css");
            public static readonly string Shared_less = Url("Shared.less");
            public static readonly string Shared_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Shared.min.css") ? Url("Shared.min.css") : Url("Shared.css");
                 
            public static readonly string Shared_min_css = Url("Shared.min.css");
            public static readonly string Site_less = Url("Site.less");
            public static readonly string Site_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Site.min.css") ? Url("Site.min.css") : Url("Site.css");
                 
            public static readonly string Site_min_css = Url("Site.min.css");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class Timeline {
                private const string URLPATH = "~/ClientSource/Style/Timeline";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string disco_timelineextensions_less = Url("disco.timelineextensions.less");
                public static readonly string disco_timelineextensions_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/disco.timelineextensions.min.css") ? Url("disco.timelineextensions.min.css") : Url("disco.timelineextensions.css");
                     
                public static readonly string disco_timelineextensions_min_css = Url("disco.timelineextensions.min.css");
                public static readonly string graphics_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/graphics.min.css") ? Url("graphics.min.css") : Url("graphics.css");
                     
                public static readonly string graphics_min_css = Url("graphics.min.css");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class images {
                    private const string URLPATH = "~/ClientSource/Style/Timeline/images";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string blue_circle_png = Url("blue-circle.png");
                    public static readonly string bubble_arrow_point_down_png = Url("bubble-arrow-point-down.png");
                    public static readonly string bubble_arrow_point_left_png = Url("bubble-arrow-point-left.png");
                    public static readonly string bubble_arrow_point_right_png = Url("bubble-arrow-point-right.png");
                    public static readonly string bubble_arrow_point_up_png = Url("bubble-arrow-point-up.png");
                    public static readonly string bubble_bottom_arrow_png = Url("bubble-bottom-arrow.png");
                    public static readonly string bubble_bottom_left_png = Url("bubble-bottom-left.png");
                    public static readonly string bubble_bottom_right_png = Url("bubble-bottom-right.png");
                    public static readonly string bubble_bottom_png = Url("bubble-bottom.png");
                    public static readonly string bubble_left_arrow_png = Url("bubble-left-arrow.png");
                    public static readonly string bubble_left_png = Url("bubble-left.png");
                    public static readonly string bubble_right_arrow_png = Url("bubble-right-arrow.png");
                    public static readonly string bubble_right_png = Url("bubble-right.png");
                    public static readonly string bubble_top_arrow_png = Url("bubble-top-arrow.png");
                    public static readonly string bubble_top_left_png = Url("bubble-top-left.png");
                    public static readonly string bubble_top_right_png = Url("bubble-top-right.png");
                    public static readonly string bubble_top_png = Url("bubble-top.png");
                    public static readonly string close_button_png = Url("close-button.png");
                    public static readonly string copy_png = Url("copy.png");
                    public static readonly string copyright_vertical_png = Url("copyright-vertical.png");
                    public static readonly string copyright_png = Url("copyright.png");
                    public static readonly string dark_blue_circle_png = Url("dark-blue-circle.png");
                    public static readonly string dark_green_circle_png = Url("dark-green-circle.png");
                    public static readonly string dark_red_circle_png = Url("dark-red-circle.png");
                    public static readonly string dull_blue_circle_png = Url("dull-blue-circle.png");
                    public static readonly string dull_green_circle_png = Url("dull-green-circle.png");
                    public static readonly string dull_red_circle_png = Url("dull-red-circle.png");
                    public static readonly string gray_circle_png = Url("gray-circle.png");
                    public static readonly string green_circle_png = Url("green-circle.png");
                    public static readonly string message_bottom_left_png = Url("message-bottom-left.png");
                    public static readonly string message_bottom_right_png = Url("message-bottom-right.png");
                    public static readonly string message_left_png = Url("message-left.png");
                    public static readonly string message_right_png = Url("message-right.png");
                    public static readonly string message_top_left_png = Url("message-top-left.png");
                    public static readonly string message_top_right_png = Url("message-top-right.png");
                    public static readonly string progress_running_gif = Url("progress-running.gif");
                    public static readonly string red_circle_png = Url("red-circle.png");
                    public static readonly string top_bubble_png = Url("top-bubble.png");
                }
            
                public static readonly string timeline_bundle_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/timeline-bundle.min.css") ? Url("timeline-bundle.min.css") : Url("timeline-bundle.css");
                     
                public static readonly string timeline_bundle_min_css = Url("timeline-bundle.min.css");
            }
        
            public static readonly string Timeline_css_bundle = Url("Timeline.css.bundle");
            public static readonly string Timeline_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Timeline.min.css") ? Url("Timeline.min.css") : Url("Timeline.css");
                 
            public static readonly string Timeline_min_css = Url("Timeline.min.css");
            public static readonly string User_less = Url("User.less");
            public static readonly string User_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/User.min.css") ? Url("User.min.css") : Url("User.css");
                 
            public static readonly string User_min_css = Url("User.min.css");
        }
    
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class ClientBin {
        private const string URLPATH = "~/ClientBin";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string Disco_ClientBootstrapper_exe = Url("Disco.ClientBootstrapper.exe");
        public static readonly string Disco_Silverlight_AttachmentUpload_xap = Url("Disco.Silverlight.AttachmentUpload.xap");
        public static readonly string PreparationClient_zip = Url("PreparationClient.zip");
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static partial class Bundles
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Scripts {}
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Styles {}
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;

    // Calling T4Extension.TimestampString through delegate to allow it to be replaced for unit testing and other purposes
    public static Func<string, string> TimestampString = System.Web.Mvc.T4Extensions.TimestampString;

    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}


namespace Disco.Web.Controllers
{
    public partial class DeviceController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DeviceController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected DeviceController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ImportReview()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ImportReview);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Show()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Show);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DeviceController Actions { get { return MVC.Device; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Device";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Device";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string AddOffline = "AddOffline";
            public readonly string ImportExport = "ImportExport";
            public readonly string ImportReview = "ImportReview";
            public readonly string Show = "Show";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string AddOffline = "AddOffline";
            public const string ImportExport = "ImportExport";
            public const string ImportReview = "ImportReview";
            public const string Show = "Show";
        }


        static readonly ActionParamsClass_AddOffline s_params_AddOffline = new ActionParamsClass_AddOffline();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddOffline AddOfflineParams { get { return s_params_AddOffline; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddOffline
        {
            public readonly string m = "m";
        }
        static readonly ActionParamsClass_ImportReview s_params_ImportReview = new ActionParamsClass_ImportReview();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ImportReview ImportReviewParams { get { return s_params_ImportReview; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ImportReview
        {
            public readonly string ImportParseTaskId = "ImportParseTaskId";
        }
        static readonly ActionParamsClass_Show s_params_Show = new ActionParamsClass_Show();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Show ShowParams { get { return s_params_Show; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Show
        {
            public readonly string id = "id";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _DeviceTable = "_DeviceTable";
                public readonly string _ViewStart = "_ViewStart";
                public readonly string AddOffline = "AddOffline";
                public readonly string ImportExport = "ImportExport";
                public readonly string ImportReview = "ImportReview";
                public readonly string Index = "Index";
                public readonly string Show = "Show";
            }
            public readonly string _DeviceTable = "~/Views/Device/_DeviceTable.cshtml";
            public readonly string _ViewStart = "~/Views/Device/_ViewStart.cshtml";
            public readonly string AddOffline = "~/Views/Device/AddOffline.cshtml";
            public readonly string ImportExport = "~/Views/Device/ImportExport.cshtml";
            public readonly string ImportReview = "~/Views/Device/ImportReview.cshtml";
            public readonly string Index = "~/Views/Device/Index.cshtml";
            public readonly string Show = "~/Views/Device/Show.cshtml";
            static readonly _DevicePartsClass s_DeviceParts = new _DevicePartsClass();
            public _DevicePartsClass DeviceParts { get { return s_DeviceParts; } }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public partial class _DevicePartsClass
            {
                static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
                public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
                public class _ViewNamesClass
                {
                    public readonly string _AssignmentHistory = "_AssignmentHistory";
                    public readonly string _Certificates = "_Certificates";
                    public readonly string _Details = "_Details";
                    public readonly string _Jobs = "_Jobs";
                    public readonly string _Resources = "_Resources";
                    public readonly string _Subject = "_Subject";
                }
                public readonly string _AssignmentHistory = "~/Views/Device/DeviceParts/_AssignmentHistory.cshtml";
                public readonly string _Certificates = "~/Views/Device/DeviceParts/_Certificates.cshtml";
                public readonly string _Details = "~/Views/Device/DeviceParts/_Details.cshtml";
                public readonly string _Jobs = "~/Views/Device/DeviceParts/_Jobs.cshtml";
                public readonly string _Resources = "~/Views/Device/DeviceParts/_Resources.cshtml";
                public readonly string _Subject = "~/Views/Device/DeviceParts/_Subject.cshtml";
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_DeviceController : Disco.Web.Controllers.DeviceController
    {
        public T4MVC_DeviceController() : base(Dummy.Instance) { }

        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        partial void AddOfflineOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult AddOffline()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddOffline);
            AddOfflineOverride(callInfo);
            return callInfo;
        }

        partial void AddOfflineOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Disco.Web.Models.Device.AddOfflineModel m);

        public override System.Web.Mvc.ActionResult AddOffline(Disco.Web.Models.Device.AddOfflineModel m)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddOffline);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "m", m);
            AddOfflineOverride(callInfo, m);
            return callInfo;
        }

        partial void ImportExportOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult ImportExport()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ImportExport);
            ImportExportOverride(callInfo);
            return callInfo;
        }

        partial void ImportReviewOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ImportParseTaskId);

        public override System.Web.Mvc.ActionResult ImportReview(string ImportParseTaskId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ImportReview);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ImportParseTaskId", ImportParseTaskId);
            ImportReviewOverride(callInfo, ImportParseTaskId);
            return callInfo;
        }

        partial void ShowOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id);

        public override System.Web.Mvc.ActionResult Show(string id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Show);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ShowOverride(callInfo, id);
            return callInfo;
        }

    }
}

namespace Disco.Web.Controllers
{
    public partial class InitialConfigController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public InitialConfigController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected InitialConfigController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult FileStoreBranch()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.FileStoreBranch);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public InitialConfigController Actions { get { return MVC.InitialConfig; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "InitialConfig";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "InitialConfig";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string Welcome = "Welcome";
            public readonly string Database = "Database";
            public readonly string FileStore = "FileStore";
            public readonly string FileStoreBranch = "FileStoreBranch";
            public readonly string Complete = "Complete";
            public readonly string RestartWebApp = "RestartWebApp";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string Welcome = "Welcome";
            public const string Database = "Database";
            public const string FileStore = "FileStore";
            public const string FileStoreBranch = "FileStoreBranch";
            public const string Complete = "Complete";
            public const string RestartWebApp = "RestartWebApp";
        }


        static readonly ActionParamsClass_Welcome s_params_Welcome = new ActionParamsClass_Welcome();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Welcome WelcomeParams { get { return s_params_Welcome; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Welcome
        {
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_Database s_params_Database = new ActionParamsClass_Database();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Database DatabaseParams { get { return s_params_Database; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Database
        {
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_FileStore s_params_FileStore = new ActionParamsClass_FileStore();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_FileStore FileStoreParams { get { return s_params_FileStore; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_FileStore
        {
            public readonly string m = "m";
        }
        static readonly ActionParamsClass_FileStoreBranch s_params_FileStoreBranch = new ActionParamsClass_FileStoreBranch();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_FileStoreBranch FileStoreBranchParams { get { return s_params_FileStoreBranch; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_FileStoreBranch
        {
            public readonly string Path = "Path";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _Layout = "_Layout";
                public readonly string _ViewStart = "_ViewStart";
                public readonly string Complete = "Complete";
                public readonly string Database = "Database";
                public readonly string FileStore = "FileStore";
                public readonly string RestartWebApp = "RestartWebApp";
                public readonly string Welcome = "Welcome";
            }
            public readonly string _Layout = "~/Views/InitialConfig/_Layout.cshtml";
            public readonly string _ViewStart = "~/Views/InitialConfig/_ViewStart.cshtml";
            public readonly string Complete = "~/Views/InitialConfig/Complete.cshtml";
            public readonly string Database = "~/Views/InitialConfig/Database.cshtml";
            public readonly string FileStore = "~/Views/InitialConfig/FileStore.cshtml";
            public readonly string RestartWebApp = "~/Views/InitialConfig/RestartWebApp.cshtml";
            public readonly string Welcome = "~/Views/InitialConfig/Welcome.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_InitialConfigController : Disco.Web.Controllers.InitialConfigController
    {
        public T4MVC_InitialConfigController() : base(Dummy.Instance) { }

        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        partial void WelcomeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Welcome()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Welcome);
            WelcomeOverride(callInfo);
            return callInfo;
        }

        partial void WelcomeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Disco.Web.Models.InitialConfig.WelcomeModel model);

        public override System.Web.Mvc.ActionResult Welcome(Disco.Web.Models.InitialConfig.WelcomeModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Welcome);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            WelcomeOverride(callInfo, model);
            return callInfo;
        }

        partial void DatabaseOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Database()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Database);
            DatabaseOverride(callInfo);
            return callInfo;
        }

        partial void DatabaseOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Disco.Web.Models.InitialConfig.DatabaseModel model);

        public override System.Web.Mvc.ActionResult Database(Disco.Web.Models.InitialConfig.DatabaseModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Database);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            DatabaseOverride(callInfo, model);
            return callInfo;
        }

        partial void FileStoreOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult FileStore()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.FileStore);
            FileStoreOverride(callInfo);
            return callInfo;
        }

        partial void FileStoreOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Disco.Web.Models.InitialConfig.FileStoreModel m);

        public override System.Web.Mvc.ActionResult FileStore(Disco.Web.Models.InitialConfig.FileStoreModel m)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.FileStore);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "m", m);
            FileStoreOverride(callInfo, m);
            return callInfo;
        }

        partial void FileStoreBranchOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string Path);

        public override System.Web.Mvc.ActionResult FileStoreBranch(string Path)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.FileStoreBranch);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Path", Path);
            FileStoreBranchOverride(callInfo, Path);
            return callInfo;
        }

        partial void CompleteOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Complete()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Complete);
            CompleteOverride(callInfo);
            return callInfo;
        }

        partial void RestartWebAppOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult RestartWebApp()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RestartWebApp);
            RestartWebAppOverride(callInfo);
            return callInfo;
        }

    }
}

namespace Disco.Web.Controllers
{
    public partial class JobController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public JobController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected JobController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Show()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Show);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Create()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Create);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult LogWarranty()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LogWarranty);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult WarrantyProviderJobDetails()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.WarrantyProviderJobDetails);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public JobController Actions { get { return MVC.Job; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Job";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Job";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string AllOpen = "AllOpen";
            public readonly string DevicesReadyForReturn = "DevicesReadyForReturn";
            public readonly string DevicesAwaitingRepair = "DevicesAwaitingRepair";
            public readonly string AwaitingFinance = "AwaitingFinance";
            public readonly string AwaitingFinanceCharge = "AwaitingFinanceCharge";
            public readonly string AwaitingFinancePayment = "AwaitingFinancePayment";
            public readonly string AwaitingFinanceInsuranceProcessing = "AwaitingFinanceInsuranceProcessing";
            public readonly string AwaitingFinanceAgreementBreach = "AwaitingFinanceAgreementBreach";
            public readonly string AwaitingUserAction = "AwaitingUserAction";
            public readonly string RecentlyClosed = "RecentlyClosed";
            public readonly string Locations = "Locations";
            public readonly string Show = "Show";
            public readonly string Create = "Create";
            public readonly string LogWarranty = "LogWarranty";
            public readonly string WarrantyProviderJobDetails = "WarrantyProviderJobDetails";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string AllOpen = "AllOpen";
            public const string DevicesReadyForReturn = "DevicesReadyForReturn";
            public const string DevicesAwaitingRepair = "DevicesAwaitingRepair";
            public const string AwaitingFinance = "AwaitingFinance";
            public const string AwaitingFinanceCharge = "AwaitingFinanceCharge";
            public const string AwaitingFinancePayment = "AwaitingFinancePayment";
            public const string AwaitingFinanceInsuranceProcessing = "AwaitingFinanceInsuranceProcessing";
            public const string AwaitingFinanceAgreementBreach = "AwaitingFinanceAgreementBreach";
            public const string AwaitingUserAction = "AwaitingUserAction";
            public const string RecentlyClosed = "RecentlyClosed";
            public const string Locations = "Locations";
            public const string Show = "Show";
            public const string Create = "Create";
            public const string LogWarranty = "LogWarranty";
            public const string WarrantyProviderJobDetails = "WarrantyProviderJobDetails";
        }


        static readonly ActionParamsClass_Show s_params_Show = new ActionParamsClass_Show();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Show ShowParams { get { return s_params_Show; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Show
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_Create s_params_Create = new ActionParamsClass_Create();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Create CreateParams { get { return s_params_Create; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Create
        {
            public readonly string DeviceSerialNumber = "DeviceSerialNumber";
            public readonly string UserId = "UserId";
            public readonly string m = "m";
        }
        static readonly ActionParamsClass_LogWarranty s_params_LogWarranty = new ActionParamsClass_LogWarranty();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_LogWarranty LogWarrantyParams { get { return s_params_LogWarranty; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_LogWarranty
        {
            public readonly string id = "id";
            public readonly string WarrantyProviderId = "WarrantyProviderId";
            public readonly string OrganisationAddressId = "OrganisationAddressId";
            public readonly string m = "m";
            public readonly string form = "form";
        }
        static readonly ActionParamsClass_WarrantyProviderJobDetails s_params_WarrantyProviderJobDetails = new ActionParamsClass_WarrantyProviderJobDetails();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_WarrantyProviderJobDetails WarrantyProviderJobDetailsParams { get { return s_params_WarrantyProviderJobDetails; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_WarrantyProviderJobDetails
        {
            public readonly string id = "id";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _CreateSubject = "_CreateSubject";
                public readonly string _ViewStart = "_ViewStart";
                public readonly string Create = "Create";
                public readonly string Create_Redirect = "Create_Redirect";
                public readonly string Index = "Index";
                public readonly string List = "List";
                public readonly string LogWarranty = "LogWarranty";
                public readonly string LogWarrantyDisclose = "LogWarrantyDisclose";
                public readonly string LogWarrantyError = "LogWarrantyError";
                public readonly string Show = "Show";
                public readonly string WarrantyProviderJobDetails = "WarrantyProviderJobDetails";
            }
            public readonly string _CreateSubject = "~/Views/Job/_CreateSubject.cshtml";
            public readonly string _ViewStart = "~/Views/Job/_ViewStart.cshtml";
            public readonly string Create = "~/Views/Job/Create.cshtml";
            public readonly string Create_Redirect = "~/Views/Job/Create_Redirect.cshtml";
            public readonly string Index = "~/Views/Job/Index.cshtml";
            public readonly string List = "~/Views/Job/List.cshtml";
            public readonly string LogWarranty = "~/Views/Job/LogWarranty.cshtml";
            public readonly string LogWarrantyDisclose = "~/Views/Job/LogWarrantyDisclose.cshtml";
            public readonly string LogWarrantyError = "~/Views/Job/LogWarrantyError.cshtml";
            public readonly string Show = "~/Views/Job/Show.cshtml";
            public readonly string WarrantyProviderJobDetails = "~/Views/Job/WarrantyProviderJobDetails.cshtml";
            static readonly _JobPartsClass s_JobParts = new _JobPartsClass();
            public _JobPartsClass JobParts { get { return s_JobParts; } }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public partial class _JobPartsClass
            {
                static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
                public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
                public class _ViewNamesClass
                {
                    public readonly string _Subject = "_Subject";
                    public readonly string Components = "Components";
                    public readonly string Flags = "Flags";
                    public readonly string Insurance = "Insurance";
                    public readonly string JobMetaAdditions = "JobMetaAdditions";
                    public readonly string NonWarranty = "NonWarranty";
                    public readonly string NonWarrantyFinance = "NonWarrantyFinance";
                    public readonly string Repairs = "Repairs";
                    public readonly string Resources = "Resources";
                    public readonly string Warranty = "Warranty";
                }
                public readonly string _Subject = "~/Views/Job/JobParts/_Subject.cshtml";
                public readonly string Components = "~/Views/Job/JobParts/Components.cshtml";
                public readonly string Flags = "~/Views/Job/JobParts/Flags.cshtml";
                public readonly string Insurance = "~/Views/Job/JobParts/Insurance.cshtml";
                public readonly string JobMetaAdditions = "~/Views/Job/JobParts/JobMetaAdditions.cshtml";
                public readonly string NonWarranty = "~/Views/Job/JobParts/NonWarranty.cshtml";
                public readonly string NonWarrantyFinance = "~/Views/Job/JobParts/NonWarrantyFinance.cshtml";
                public readonly string Repairs = "~/Views/Job/JobParts/Repairs.cshtml";
                public readonly string Resources = "~/Views/Job/JobParts/Resources.cshtml";
                public readonly string Warranty = "~/Views/Job/JobParts/Warranty.cshtml";
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_JobController : Disco.Web.Controllers.JobController
    {
        public T4MVC_JobController() : base(Dummy.Instance) { }

        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        partial void AllOpenOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult AllOpen()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AllOpen);
            AllOpenOverride(callInfo);
            return callInfo;
        }

        partial void DevicesReadyForReturnOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult DevicesReadyForReturn()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DevicesReadyForReturn);
            DevicesReadyForReturnOverride(callInfo);
            return callInfo;
        }

        partial void DevicesAwaitingRepairOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult DevicesAwaitingRepair()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DevicesAwaitingRepair);
            DevicesAwaitingRepairOverride(callInfo);
            return callInfo;
        }

        partial void AwaitingFinanceOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult AwaitingFinance()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AwaitingFinance);
            AwaitingFinanceOverride(callInfo);
            return callInfo;
        }

        partial void AwaitingFinanceChargeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult AwaitingFinanceCharge()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AwaitingFinanceCharge);
            AwaitingFinanceChargeOverride(callInfo);
            return callInfo;
        }

        partial void AwaitingFinancePaymentOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult AwaitingFinancePayment()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AwaitingFinancePayment);
            AwaitingFinancePaymentOverride(callInfo);
            return callInfo;
        }

        partial void AwaitingFinanceInsuranceProcessingOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult AwaitingFinanceInsuranceProcessing()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AwaitingFinanceInsuranceProcessing);
            AwaitingFinanceInsuranceProcessingOverride(callInfo);
            return callInfo;
        }

        partial void AwaitingFinanceAgreementBreachOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult AwaitingFinanceAgreementBreach()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AwaitingFinanceAgreementBreach);
            AwaitingFinanceAgreementBreachOverride(callInfo);
            return callInfo;
        }

        partial void AwaitingUserActionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult AwaitingUserAction()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AwaitingUserAction);
            AwaitingUserActionOverride(callInfo);
            return callInfo;
        }

        partial void RecentlyClosedOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult RecentlyClosed()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RecentlyClosed);
            RecentlyClosedOverride(callInfo);
            return callInfo;
        }

        partial void LocationsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Locations()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Locations);
            LocationsOverride(callInfo);
            return callInfo;
        }

        partial void ShowOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int? id);

        public override System.Web.Mvc.ActionResult Show(int? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Show);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ShowOverride(callInfo, id);
            return callInfo;
        }

        partial void CreateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string DeviceSerialNumber, string UserId);

        public override System.Web.Mvc.ActionResult Create(string DeviceSerialNumber, string UserId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Create);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "DeviceSerialNumber", DeviceSerialNumber);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UserId", UserId);
            CreateOverride(callInfo, DeviceSerialNumber, UserId);
            return callInfo;
        }

        partial void CreateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Disco.Web.Models.Job.CreateModel m);

        public override System.Web.Mvc.ActionResult Create(Disco.Web.Models.Job.CreateModel m)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Create);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "m", m);
            CreateOverride(callInfo, m);
            return callInfo;
        }

        partial void LogWarrantyOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string WarrantyProviderId, int? OrganisationAddressId);

        public override System.Web.Mvc.ActionResult LogWarranty(int id, string WarrantyProviderId, int? OrganisationAddressId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LogWarranty);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "WarrantyProviderId", WarrantyProviderId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "OrganisationAddressId", OrganisationAddressId);
            LogWarrantyOverride(callInfo, id, WarrantyProviderId, OrganisationAddressId);
            return callInfo;
        }

        partial void LogWarrantyOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Disco.Web.Models.Job.LogWarrantyModel m, System.Web.Mvc.FormCollection form);

        public override System.Web.Mvc.ActionResult LogWarranty(Disco.Web.Models.Job.LogWarrantyModel m, System.Web.Mvc.FormCollection form)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LogWarranty);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "m", m);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "form", form);
            LogWarrantyOverride(callInfo, m, form);
            return callInfo;
        }

        partial void WarrantyProviderJobDetailsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        public override System.Web.Mvc.ActionResult WarrantyProviderJobDetails(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.WarrantyProviderJobDetails);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            WarrantyProviderJobDetailsOverride(callInfo, id);
            return callInfo;
        }

    }
}

namespace Disco.Web.Controllers
{
    public partial class PluginWebHandlerController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public PluginWebHandlerController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected PluginWebHandlerController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Index()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Resource()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Resource);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public PluginWebHandlerController Actions { get { return MVC.PluginWebHandler; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "PluginWebHandler";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "PluginWebHandler";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string Resource = "Resource";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string Resource = "Resource";
        }


        static readonly ActionParamsClass_Index s_params_Index = new ActionParamsClass_Index();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Index IndexParams { get { return s_params_Index; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Index
        {
            public readonly string PluginId = "PluginId";
            public readonly string PluginAction = "PluginAction";
        }
        static readonly ActionParamsClass_Resource s_params_Resource = new ActionParamsClass_Resource();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Resource ResourceParams { get { return s_params_Resource; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Resource
        {
            public readonly string PluginId = "PluginId";
            public readonly string res = "res";
            public readonly string Download = "Download";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_PluginWebHandlerController : Disco.Web.Controllers.PluginWebHandlerController
    {
        public T4MVC_PluginWebHandlerController() : base(Dummy.Instance) { }

        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string PluginId, string PluginAction);

        public override System.Web.Mvc.ActionResult Index(string PluginId, string PluginAction)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PluginId", PluginId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PluginAction", PluginAction);
            IndexOverride(callInfo, PluginId, PluginAction);
            return callInfo;
        }

        partial void ResourceOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string PluginId, string res, bool? Download);

        public override System.Web.Mvc.ActionResult Resource(string PluginId, string res, bool? Download)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Resource);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PluginId", PluginId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "res", res);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Download", Download);
            ResourceOverride(callInfo, PluginId, res, Download);
            return callInfo;
        }

    }
}

namespace Disco.Web.Controllers
{
    public partial class SearchController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public SearchController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected SearchController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Query()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Query);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public SearchController Actions { get { return MVC.Search; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Search";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Search";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Query = "Query";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Query = "Query";
        }


        static readonly ActionParamsClass_Query s_params_Query = new ActionParamsClass_Query();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Query QueryParams { get { return s_params_Query; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Query
        {
            public readonly string term = "term";
            public readonly string limit = "limit";
            public readonly string searchDetails = "searchDetails";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string Query = "Query";
            }
            public readonly string Query = "~/Views/Search/Query.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_SearchController : Disco.Web.Controllers.SearchController
    {
        public T4MVC_SearchController() : base(Dummy.Instance) { }

        partial void QueryOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string term, string limit, bool searchDetails);

        public override System.Web.Mvc.ActionResult Query(string term, string limit, bool searchDetails)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Query);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "term", term);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "limit", limit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "searchDetails", searchDetails);
            QueryOverride(callInfo, term, limit, searchDetails);
            return callInfo;
        }

    }
}

namespace Disco.Web.Controllers
{
    public partial class UpdateController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public UpdateController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected UpdateController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }


        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public UpdateController Actions { get { return MVC.Update; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Update";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Update";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
        }


        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string Index = "Index";
            }
            public readonly string Index = "~/Views/Update/Index.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_UpdateController : Disco.Web.Controllers.UpdateController
    {
        public T4MVC_UpdateController() : base(Dummy.Instance) { }

        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

    }
}

namespace Disco.Web.Controllers
{
    public partial class UserController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public UserController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected UserController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Show()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Show);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public UserController Actions { get { return MVC.User; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "User";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "User";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string Show = "Show";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string Show = "Show";
        }


        static readonly ActionParamsClass_Show s_params_Show = new ActionParamsClass_Show();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Show ShowParams { get { return s_params_Show; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Show
        {
            public readonly string id = "id";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _UserTable = "_UserTable";
                public readonly string _ViewStart = "_ViewStart";
                public readonly string Index = "Index";
                public readonly string Show = "Show";
            }
            public readonly string _UserTable = "~/Views/User/_UserTable.cshtml";
            public readonly string _ViewStart = "~/Views/User/_ViewStart.cshtml";
            public readonly string Index = "~/Views/User/Index.cshtml";
            public readonly string Show = "~/Views/User/Show.cshtml";
            static readonly _UserPartsClass s_UserParts = new _UserPartsClass();
            public _UserPartsClass UserParts { get { return s_UserParts; } }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public partial class _UserPartsClass
            {
                static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
                public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
                public class _ViewNamesClass
                {
                    public readonly string _AssignmentHistory = "_AssignmentHistory";
                    public readonly string _Authorization = "_Authorization";
                    public readonly string _Jobs = "_Jobs";
                    public readonly string _Resources = "_Resources";
                    public readonly string _Subject = "_Subject";
                }
                public readonly string _AssignmentHistory = "~/Views/User/UserParts/_AssignmentHistory.cshtml";
                public readonly string _Authorization = "~/Views/User/UserParts/_Authorization.cshtml";
                public readonly string _Jobs = "~/Views/User/UserParts/_Jobs.cshtml";
                public readonly string _Resources = "~/Views/User/UserParts/_Resources.cshtml";
                public readonly string _Subject = "~/Views/User/UserParts/_Subject.cshtml";
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_UserController : Disco.Web.Controllers.UserController
    {
        public T4MVC_UserController() : base(Dummy.Instance) { }

        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        partial void ShowOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id);

        public override System.Web.Mvc.ActionResult Show(string id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Show);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ShowOverride(callInfo, id);
            return callInfo;
        }

    }
}

namespace T4MVC
{
    public class SharedController
    {

        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _DialogLayout = "_DialogLayout";
                public readonly string _EmptyLayout = "_EmptyLayout";
                public readonly string _JobTable = "_JobTable";
                public readonly string _JobTableRender = "_JobTableRender";
                public readonly string _Layout = "_Layout";
                public readonly string _SearchDialog = "_SearchDialog";
                public readonly string Error = "Error";
            }
            public readonly string _DialogLayout = "~/Views/Shared/_DialogLayout.cshtml";
            public readonly string _EmptyLayout = "~/Views/Shared/_EmptyLayout.cshtml";
            public readonly string _JobTable = "~/Views/Shared/_JobTable.cshtml";
            public readonly string _JobTableRender = "~/Views/Shared/_JobTableRender.cshtml";
            public readonly string _Layout = "~/Views/Shared/_Layout.cshtml";
            public readonly string _SearchDialog = "~/Views/Shared/_SearchDialog.cshtml";
            public readonly string Error = "~/Views/Shared/Error.cshtml";
        }
    }

}

namespace Disco.Web.Areas.API.Controllers
{
    public partial class AuthorizationRoleController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public AuthorizationRoleController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected AuthorizationRoleController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Update()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Update);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateName()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateName);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateClaims()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateClaims);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateSubjects()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateSubjects);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Delete()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Delete);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult SearchSubjects()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SearchSubjects);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Subject()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Subject);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public AuthorizationRoleController Actions { get { return MVC.API.AuthorizationRole; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "API";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "AuthorizationRole";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "AuthorizationRole";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Update = "Update";
            public readonly string UpdateName = "UpdateName";
            public readonly string UpdateClaims = "UpdateClaims";
            public readonly string UpdateSubjects = "UpdateSubjects";
            public readonly string Delete = "Delete";
            public readonly string SearchSubjects = "SearchSubjects";
            public readonly string Subject = "Subject";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Update = "Update";
            public const string UpdateName = "UpdateName";
            public const string UpdateClaims = "UpdateClaims";
            public const string UpdateSubjects = "UpdateSubjects";
            public const string Delete = "Delete";
            public const string SearchSubjects = "SearchSubjects";
            public const string Subject = "Subject";
        }


        static readonly ActionParamsClass_Update s_params_Update = new ActionParamsClass_Update();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Update UpdateParams { get { return s_params_Update; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Update
        {
            public readonly string id = "id";
            public readonly string key = "key";
            public readonly string value = "value";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateName s_params_UpdateName = new ActionParamsClass_UpdateName();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateName UpdateNameParams { get { return s_params_UpdateName; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateName
        {
            public readonly string id = "id";
            public readonly string RoleName = "RoleName";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateClaims s_params_UpdateClaims = new ActionParamsClass_UpdateClaims();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateClaims UpdateClaimsParams { get { return s_params_UpdateClaims; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateClaims
        {
            public readonly string id = "id";
            public readonly string ClaimKeys = "ClaimKeys";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateSubjects s_params_UpdateSubjects = new ActionParamsClass_UpdateSubjects();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateSubjects UpdateSubjectsParams { get { return s_params_UpdateSubjects; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateSubjects
        {
            public readonly string id = "id";
            public readonly string Subjects = "Subjects";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_Delete s_params_Delete = new ActionParamsClass_Delete();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Delete DeleteParams { get { return s_params_Delete; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Delete
        {
            public readonly string id = "id";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_SearchSubjects s_params_SearchSubjects = new ActionParamsClass_SearchSubjects();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SearchSubjects SearchSubjectsParams { get { return s_params_SearchSubjects; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SearchSubjects
        {
            public readonly string term = "term";
        }
        static readonly ActionParamsClass_Subject s_params_Subject = new ActionParamsClass_Subject();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Subject SubjectParams { get { return s_params_Subject; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Subject
        {
            public readonly string Id = "Id";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_AuthorizationRoleController : Disco.Web.Areas.API.Controllers.AuthorizationRoleController
    {
        public T4MVC_AuthorizationRoleController() : base(Dummy.Instance) { }

        partial void UpdateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string key, string value, bool redirect);

        public override System.Web.Mvc.ActionResult Update(int id, string key, string value, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Update);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "key", key);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "value", value);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateOverride(callInfo, id, key, value, redirect);
            return callInfo;
        }

        partial void UpdateNameOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string RoleName, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateName(int id, string RoleName, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateName);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "RoleName", RoleName);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateNameOverride(callInfo, id, RoleName, redirect);
            return callInfo;
        }

        partial void UpdateClaimsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string[] ClaimKeys, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateClaims(int id, string[] ClaimKeys, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateClaims);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ClaimKeys", ClaimKeys);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateClaimsOverride(callInfo, id, ClaimKeys, redirect);
            return callInfo;
        }

        partial void UpdateSubjectsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string[] Subjects, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateSubjects(int id, string[] Subjects, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateSubjects);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Subjects", Subjects);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateSubjectsOverride(callInfo, id, Subjects, redirect);
            return callInfo;
        }

        partial void DeleteOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, bool? redirect);

        public override System.Web.Mvc.ActionResult Delete(int id, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Delete);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            DeleteOverride(callInfo, id, redirect);
            return callInfo;
        }

        partial void SearchSubjectsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string term);

        public override System.Web.Mvc.ActionResult SearchSubjects(string term)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SearchSubjects);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "term", term);
            SearchSubjectsOverride(callInfo, term);
            return callInfo;
        }

        partial void SubjectOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string Id);

        public override System.Web.Mvc.ActionResult Subject(string Id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Subject);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Id", Id);
            SubjectOverride(callInfo, Id);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.API.Controllers
{
    public partial class BootstrapperController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public BootstrapperController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected BootstrapperController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult MacSshUsername()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.MacSshUsername);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult MacSshPassword()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.MacSshPassword);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public BootstrapperController Actions { get { return MVC.API.Bootstrapper; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "API";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Bootstrapper";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Bootstrapper";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string MacSshUsername = "MacSshUsername";
            public readonly string MacSshPassword = "MacSshPassword";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string MacSshUsername = "MacSshUsername";
            public const string MacSshPassword = "MacSshPassword";
        }


        static readonly ActionParamsClass_MacSshUsername s_params_MacSshUsername = new ActionParamsClass_MacSshUsername();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_MacSshUsername MacSshUsernameParams { get { return s_params_MacSshUsername; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_MacSshUsername
        {
            public readonly string MacSshUsername = "MacSshUsername";
        }
        static readonly ActionParamsClass_MacSshPassword s_params_MacSshPassword = new ActionParamsClass_MacSshPassword();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_MacSshPassword MacSshPasswordParams { get { return s_params_MacSshPassword; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_MacSshPassword
        {
            public readonly string MacSshPassword = "MacSshPassword";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_BootstrapperController : Disco.Web.Areas.API.Controllers.BootstrapperController
    {
        public T4MVC_BootstrapperController() : base(Dummy.Instance) { }

        partial void MacSshUsernameOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string MacSshUsername);

        public override System.Web.Mvc.ActionResult MacSshUsername(string MacSshUsername)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.MacSshUsername);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "MacSshUsername", MacSshUsername);
            MacSshUsernameOverride(callInfo, MacSshUsername);
            return callInfo;
        }

        partial void MacSshPasswordOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string MacSshPassword);

        public override System.Web.Mvc.ActionResult MacSshPassword(string MacSshPassword)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.MacSshPassword);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "MacSshPassword", MacSshPassword);
            MacSshPasswordOverride(callInfo, MacSshPassword);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.API.Controllers
{
    public partial class DeviceBatchController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DeviceBatchController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected DeviceBatchController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Update()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Update);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateName()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateName);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdatePurchaseDate()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdatePurchaseDate);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateSupplier()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateSupplier);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdatePurchaseDetails()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdatePurchaseDetails);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateUnitCost()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateUnitCost);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateUnitQuantity()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateUnitQuantity);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateDefaultDeviceModelId()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateDefaultDeviceModelId);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateWarrantyValidUntil()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateWarrantyValidUntil);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateWarrantyDetails()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateWarrantyDetails);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateInsuredDate()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuredDate);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateInsuranceSupplier()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceSupplier);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateInsuredUntil()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuredUntil);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateInsuranceDetails()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceDetails);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateComments()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateComments);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Delete()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Delete);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Index()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ExportDevices()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ExportDevices);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DeviceBatchController Actions { get { return MVC.API.DeviceBatch; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "API";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "DeviceBatch";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "DeviceBatch";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Update = "Update";
            public readonly string UpdateName = "UpdateName";
            public readonly string UpdatePurchaseDate = "UpdatePurchaseDate";
            public readonly string UpdateSupplier = "UpdateSupplier";
            public readonly string UpdatePurchaseDetails = "UpdatePurchaseDetails";
            public readonly string UpdateUnitCost = "UpdateUnitCost";
            public readonly string UpdateUnitQuantity = "UpdateUnitQuantity";
            public readonly string UpdateDefaultDeviceModelId = "UpdateDefaultDeviceModelId";
            public readonly string UpdateWarrantyValidUntil = "UpdateWarrantyValidUntil";
            public readonly string UpdateWarrantyDetails = "UpdateWarrantyDetails";
            public readonly string UpdateInsuredDate = "UpdateInsuredDate";
            public readonly string UpdateInsuranceSupplier = "UpdateInsuranceSupplier";
            public readonly string UpdateInsuredUntil = "UpdateInsuredUntil";
            public readonly string UpdateInsuranceDetails = "UpdateInsuranceDetails";
            public readonly string UpdateComments = "UpdateComments";
            public readonly string Delete = "Delete";
            public readonly string Index = "Index";
            public readonly string Timeline = "Timeline";
            public readonly string ExportDevices = "ExportDevices";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Update = "Update";
            public const string UpdateName = "UpdateName";
            public const string UpdatePurchaseDate = "UpdatePurchaseDate";
            public const string UpdateSupplier = "UpdateSupplier";
            public const string UpdatePurchaseDetails = "UpdatePurchaseDetails";
            public const string UpdateUnitCost = "UpdateUnitCost";
            public const string UpdateUnitQuantity = "UpdateUnitQuantity";
            public const string UpdateDefaultDeviceModelId = "UpdateDefaultDeviceModelId";
            public const string UpdateWarrantyValidUntil = "UpdateWarrantyValidUntil";
            public const string UpdateWarrantyDetails = "UpdateWarrantyDetails";
            public const string UpdateInsuredDate = "UpdateInsuredDate";
            public const string UpdateInsuranceSupplier = "UpdateInsuranceSupplier";
            public const string UpdateInsuredUntil = "UpdateInsuredUntil";
            public const string UpdateInsuranceDetails = "UpdateInsuranceDetails";
            public const string UpdateComments = "UpdateComments";
            public const string Delete = "Delete";
            public const string Index = "Index";
            public const string Timeline = "Timeline";
            public const string ExportDevices = "ExportDevices";
        }


        static readonly ActionParamsClass_Update s_params_Update = new ActionParamsClass_Update();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Update UpdateParams { get { return s_params_Update; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Update
        {
            public readonly string id = "id";
            public readonly string key = "key";
            public readonly string value = "value";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateName s_params_UpdateName = new ActionParamsClass_UpdateName();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateName UpdateNameParams { get { return s_params_UpdateName; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateName
        {
            public readonly string id = "id";
            public readonly string BatchName = "BatchName";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdatePurchaseDate s_params_UpdatePurchaseDate = new ActionParamsClass_UpdatePurchaseDate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdatePurchaseDate UpdatePurchaseDateParams { get { return s_params_UpdatePurchaseDate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdatePurchaseDate
        {
            public readonly string id = "id";
            public readonly string PurchaseDate = "PurchaseDate";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateSupplier s_params_UpdateSupplier = new ActionParamsClass_UpdateSupplier();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateSupplier UpdateSupplierParams { get { return s_params_UpdateSupplier; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateSupplier
        {
            public readonly string id = "id";
            public readonly string Supplier = "Supplier";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdatePurchaseDetails s_params_UpdatePurchaseDetails = new ActionParamsClass_UpdatePurchaseDetails();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdatePurchaseDetails UpdatePurchaseDetailsParams { get { return s_params_UpdatePurchaseDetails; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdatePurchaseDetails
        {
            public readonly string id = "id";
            public readonly string PurchaseDetails = "PurchaseDetails";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateUnitCost s_params_UpdateUnitCost = new ActionParamsClass_UpdateUnitCost();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateUnitCost UpdateUnitCostParams { get { return s_params_UpdateUnitCost; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateUnitCost
        {
            public readonly string id = "id";
            public readonly string UnitCost = "UnitCost";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateUnitQuantity s_params_UpdateUnitQuantity = new ActionParamsClass_UpdateUnitQuantity();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateUnitQuantity UpdateUnitQuantityParams { get { return s_params_UpdateUnitQuantity; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateUnitQuantity
        {
            public readonly string id = "id";
            public readonly string UnitQuantity = "UnitQuantity";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateDefaultDeviceModelId s_params_UpdateDefaultDeviceModelId = new ActionParamsClass_UpdateDefaultDeviceModelId();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateDefaultDeviceModelId UpdateDefaultDeviceModelIdParams { get { return s_params_UpdateDefaultDeviceModelId; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateDefaultDeviceModelId
        {
            public readonly string id = "id";
            public readonly string DefaultDeviceModelId = "DefaultDeviceModelId";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateWarrantyValidUntil s_params_UpdateWarrantyValidUntil = new ActionParamsClass_UpdateWarrantyValidUntil();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateWarrantyValidUntil UpdateWarrantyValidUntilParams { get { return s_params_UpdateWarrantyValidUntil; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateWarrantyValidUntil
        {
            public readonly string id = "id";
            public readonly string WarrantyValidUntil = "WarrantyValidUntil";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateWarrantyDetails s_params_UpdateWarrantyDetails = new ActionParamsClass_UpdateWarrantyDetails();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateWarrantyDetails UpdateWarrantyDetailsParams { get { return s_params_UpdateWarrantyDetails; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateWarrantyDetails
        {
            public readonly string id = "id";
            public readonly string WarrantyDetails = "WarrantyDetails";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateInsuredDate s_params_UpdateInsuredDate = new ActionParamsClass_UpdateInsuredDate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateInsuredDate UpdateInsuredDateParams { get { return s_params_UpdateInsuredDate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateInsuredDate
        {
            public readonly string id = "id";
            public readonly string InsuredDate = "InsuredDate";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateInsuranceSupplier s_params_UpdateInsuranceSupplier = new ActionParamsClass_UpdateInsuranceSupplier();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateInsuranceSupplier UpdateInsuranceSupplierParams { get { return s_params_UpdateInsuranceSupplier; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateInsuranceSupplier
        {
            public readonly string id = "id";
            public readonly string InsuranceSupplier = "InsuranceSupplier";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateInsuredUntil s_params_UpdateInsuredUntil = new ActionParamsClass_UpdateInsuredUntil();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateInsuredUntil UpdateInsuredUntilParams { get { return s_params_UpdateInsuredUntil; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateInsuredUntil
        {
            public readonly string id = "id";
            public readonly string InsuredUntil = "InsuredUntil";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateInsuranceDetails s_params_UpdateInsuranceDetails = new ActionParamsClass_UpdateInsuranceDetails();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateInsuranceDetails UpdateInsuranceDetailsParams { get { return s_params_UpdateInsuranceDetails; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateInsuranceDetails
        {
            public readonly string id = "id";
            public readonly string InsuranceDetails = "InsuranceDetails";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateComments s_params_UpdateComments = new ActionParamsClass_UpdateComments();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateComments UpdateCommentsParams { get { return s_params_UpdateComments; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateComments
        {
            public readonly string id = "id";
            public readonly string Comments = "Comments";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_Delete s_params_Delete = new ActionParamsClass_Delete();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Delete DeleteParams { get { return s_params_Delete; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Delete
        {
            public readonly string id = "id";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_Index s_params_Index = new ActionParamsClass_Index();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Index IndexParams { get { return s_params_Index; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Index
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_ExportDevices s_params_ExportDevices = new ActionParamsClass_ExportDevices();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ExportDevices ExportDevicesParams { get { return s_params_ExportDevices; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ExportDevices
        {
            public readonly string id = "id";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_DeviceBatchController : Disco.Web.Areas.API.Controllers.DeviceBatchController
    {
        public T4MVC_DeviceBatchController() : base(Dummy.Instance) { }

        partial void UpdateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string key, string value, bool redirect);

        public override System.Web.Mvc.ActionResult Update(int id, string key, string value, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Update);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "key", key);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "value", value);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateOverride(callInfo, id, key, value, redirect);
            return callInfo;
        }

        partial void UpdateNameOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string BatchName, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateName(int id, string BatchName, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateName);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "BatchName", BatchName);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateNameOverride(callInfo, id, BatchName, redirect);
            return callInfo;
        }

        partial void UpdatePurchaseDateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string PurchaseDate, bool redirect);

        public override System.Web.Mvc.ActionResult UpdatePurchaseDate(int id, string PurchaseDate, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdatePurchaseDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PurchaseDate", PurchaseDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdatePurchaseDateOverride(callInfo, id, PurchaseDate, redirect);
            return callInfo;
        }

        partial void UpdateSupplierOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string Supplier, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateSupplier(int id, string Supplier, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateSupplier);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Supplier", Supplier);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateSupplierOverride(callInfo, id, Supplier, redirect);
            return callInfo;
        }

        partial void UpdatePurchaseDetailsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string PurchaseDetails, bool redirect);

        public override System.Web.Mvc.ActionResult UpdatePurchaseDetails(int id, string PurchaseDetails, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdatePurchaseDetails);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PurchaseDetails", PurchaseDetails);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdatePurchaseDetailsOverride(callInfo, id, PurchaseDetails, redirect);
            return callInfo;
        }

        partial void UpdateUnitCostOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string UnitCost, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateUnitCost(int id, string UnitCost, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateUnitCost);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UnitCost", UnitCost);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateUnitCostOverride(callInfo, id, UnitCost, redirect);
            return callInfo;
        }

        partial void UpdateUnitQuantityOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string UnitQuantity, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateUnitQuantity(int id, string UnitQuantity, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateUnitQuantity);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UnitQuantity", UnitQuantity);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateUnitQuantityOverride(callInfo, id, UnitQuantity, redirect);
            return callInfo;
        }

        partial void UpdateDefaultDeviceModelIdOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string DefaultDeviceModelId, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateDefaultDeviceModelId(int id, string DefaultDeviceModelId, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateDefaultDeviceModelId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "DefaultDeviceModelId", DefaultDeviceModelId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateDefaultDeviceModelIdOverride(callInfo, id, DefaultDeviceModelId, redirect);
            return callInfo;
        }

        partial void UpdateWarrantyValidUntilOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string WarrantyValidUntil, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateWarrantyValidUntil(int id, string WarrantyValidUntil, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateWarrantyValidUntil);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "WarrantyValidUntil", WarrantyValidUntil);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateWarrantyValidUntilOverride(callInfo, id, WarrantyValidUntil, redirect);
            return callInfo;
        }

        partial void UpdateWarrantyDetailsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string WarrantyDetails, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateWarrantyDetails(int id, string WarrantyDetails, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateWarrantyDetails);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "WarrantyDetails", WarrantyDetails);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateWarrantyDetailsOverride(callInfo, id, WarrantyDetails, redirect);
            return callInfo;
        }

        partial void UpdateInsuredDateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string InsuredDate, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateInsuredDate(int id, string InsuredDate, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuredDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "InsuredDate", InsuredDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateInsuredDateOverride(callInfo, id, InsuredDate, redirect);
            return callInfo;
        }

        partial void UpdateInsuranceSupplierOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string InsuranceSupplier, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateInsuranceSupplier(int id, string InsuranceSupplier, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceSupplier);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "InsuranceSupplier", InsuranceSupplier);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateInsuranceSupplierOverride(callInfo, id, InsuranceSupplier, redirect);
            return callInfo;
        }

        partial void UpdateInsuredUntilOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string InsuredUntil, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateInsuredUntil(int id, string InsuredUntil, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuredUntil);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "InsuredUntil", InsuredUntil);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateInsuredUntilOverride(callInfo, id, InsuredUntil, redirect);
            return callInfo;
        }

        partial void UpdateInsuranceDetailsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string InsuranceDetails, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateInsuranceDetails(int id, string InsuranceDetails, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceDetails);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "InsuranceDetails", InsuranceDetails);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateInsuranceDetailsOverride(callInfo, id, InsuranceDetails, redirect);
            return callInfo;
        }

        partial void UpdateCommentsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string Comments, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateComments(int id, string Comments, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateComments);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Comments", Comments);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateCommentsOverride(callInfo, id, Comments, redirect);
            return callInfo;
        }

        partial void DeleteOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, bool? redirect);

        public override System.Web.Mvc.ActionResult Delete(int id, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Delete);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            DeleteOverride(callInfo, id, redirect);
            return callInfo;
        }

        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int? id);

        public override System.Web.Mvc.ActionResult Index(int? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            IndexOverride(callInfo, id);
            return callInfo;
        }

        partial void TimelineOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Timeline()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Timeline);
            TimelineOverride(callInfo);
            return callInfo;
        }

        partial void ExportDevicesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        public override System.Web.Mvc.ActionResult ExportDevices(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ExportDevices);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ExportDevicesOverride(callInfo, id);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.API.Controllers
{
    public partial class DeviceCertificateController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DeviceCertificateController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected DeviceCertificateController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Download()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Download);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DeviceCertificateController Actions { get { return MVC.API.DeviceCertificate; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "API";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "DeviceCertificate";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "DeviceCertificate";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Download = "Download";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Download = "Download";
        }


        static readonly ActionParamsClass_Download s_params_Download = new ActionParamsClass_Download();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Download DownloadParams { get { return s_params_Download; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Download
        {
            public readonly string id = "id";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_DeviceCertificateController : Disco.Web.Areas.API.Controllers.DeviceCertificateController
    {
        public T4MVC_DeviceCertificateController() : base(Dummy.Instance) { }

        partial void DownloadOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        public override System.Web.Mvc.ActionResult Download(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Download);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            DownloadOverride(callInfo, id);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.API.Controllers
{
    public partial class DeviceController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DeviceController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected DeviceController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Update()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Update);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateDeviceProfileId()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateDeviceProfileId);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateDeviceBatchId()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateDeviceBatchId);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateAssetNumber()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateAssetNumber);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateLocation()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateLocation);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateAssignedUserId()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateAssignedUserId);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateAllowUnauthenticatedEnrol()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateAllowUnauthenticatedEnrol);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Decommission()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Decommission);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Recommission()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Recommission);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Delete()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Delete);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult GeneratePdf()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GeneratePdf);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult LastNetworkLogonDate()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LastNetworkLogonDate);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AttachmentDownload()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AttachmentDownload);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AttachmentThumbnail()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AttachmentThumbnail);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AttachmentUpload()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AttachmentUpload);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Attachment()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Attachment);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Attachments()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Attachments);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AttachmentRemove()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AttachmentRemove);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ImportParse()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ImportParse);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ImportProcess()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ImportProcess);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DeviceController Actions { get { return MVC.API.Device; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "API";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Device";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Device";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Update = "Update";
            public readonly string UpdateDeviceProfileId = "UpdateDeviceProfileId";
            public readonly string UpdateDeviceBatchId = "UpdateDeviceBatchId";
            public readonly string UpdateAssetNumber = "UpdateAssetNumber";
            public readonly string UpdateLocation = "UpdateLocation";
            public readonly string UpdateAssignedUserId = "UpdateAssignedUserId";
            public readonly string UpdateAllowUnauthenticatedEnrol = "UpdateAllowUnauthenticatedEnrol";
            public readonly string Decommission = "Decommission";
            public readonly string Recommission = "Recommission";
            public readonly string Delete = "Delete";
            public readonly string GeneratePdf = "GeneratePdf";
            public readonly string LastNetworkLogonDate = "LastNetworkLogonDate";
            public readonly string AttachmentDownload = "AttachmentDownload";
            public readonly string AttachmentThumbnail = "AttachmentThumbnail";
            public readonly string AttachmentUpload = "AttachmentUpload";
            public readonly string Attachment = "Attachment";
            public readonly string Attachments = "Attachments";
            public readonly string AttachmentRemove = "AttachmentRemove";
            public readonly string ImportParse = "ImportParse";
            public readonly string ImportProcess = "ImportProcess";
            public readonly string ExportAllDevices = "ExportAllDevices";
            public readonly string MigrateDeviceMacAddressesFromLog = "MigrateDeviceMacAddressesFromLog";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Update = "Update";
            public const string UpdateDeviceProfileId = "UpdateDeviceProfileId";
            public const string UpdateDeviceBatchId = "UpdateDeviceBatchId";
            public const string UpdateAssetNumber = "UpdateAssetNumber";
            public const string UpdateLocation = "UpdateLocation";
            public const string UpdateAssignedUserId = "UpdateAssignedUserId";
            public const string UpdateAllowUnauthenticatedEnrol = "UpdateAllowUnauthenticatedEnrol";
            public const string Decommission = "Decommission";
            public const string Recommission = "Recommission";
            public const string Delete = "Delete";
            public const string GeneratePdf = "GeneratePdf";
            public const string LastNetworkLogonDate = "LastNetworkLogonDate";
            public const string AttachmentDownload = "AttachmentDownload";
            public const string AttachmentThumbnail = "AttachmentThumbnail";
            public const string AttachmentUpload = "AttachmentUpload";
            public const string Attachment = "Attachment";
            public const string Attachments = "Attachments";
            public const string AttachmentRemove = "AttachmentRemove";
            public const string ImportParse = "ImportParse";
            public const string ImportProcess = "ImportProcess";
            public const string ExportAllDevices = "ExportAllDevices";
            public const string MigrateDeviceMacAddressesFromLog = "MigrateDeviceMacAddressesFromLog";
        }


        static readonly ActionParamsClass_Update s_params_Update = new ActionParamsClass_Update();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Update UpdateParams { get { return s_params_Update; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Update
        {
            public readonly string id = "id";
            public readonly string key = "key";
            public readonly string value = "value";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateDeviceProfileId s_params_UpdateDeviceProfileId = new ActionParamsClass_UpdateDeviceProfileId();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateDeviceProfileId UpdateDeviceProfileIdParams { get { return s_params_UpdateDeviceProfileId; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateDeviceProfileId
        {
            public readonly string id = "id";
            public readonly string DeviceProfileId = "DeviceProfileId";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateDeviceBatchId s_params_UpdateDeviceBatchId = new ActionParamsClass_UpdateDeviceBatchId();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateDeviceBatchId UpdateDeviceBatchIdParams { get { return s_params_UpdateDeviceBatchId; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateDeviceBatchId
        {
            public readonly string id = "id";
            public readonly string DeviceBatchId = "DeviceBatchId";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateAssetNumber s_params_UpdateAssetNumber = new ActionParamsClass_UpdateAssetNumber();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateAssetNumber UpdateAssetNumberParams { get { return s_params_UpdateAssetNumber; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateAssetNumber
        {
            public readonly string id = "id";
            public readonly string AssetNumber = "AssetNumber";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateLocation s_params_UpdateLocation = new ActionParamsClass_UpdateLocation();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateLocation UpdateLocationParams { get { return s_params_UpdateLocation; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateLocation
        {
            public readonly string id = "id";
            public readonly string Location = "Location";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateAssignedUserId s_params_UpdateAssignedUserId = new ActionParamsClass_UpdateAssignedUserId();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateAssignedUserId UpdateAssignedUserIdParams { get { return s_params_UpdateAssignedUserId; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateAssignedUserId
        {
            public readonly string id = "id";
            public readonly string AssignedUserId = "AssignedUserId";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateAllowUnauthenticatedEnrol s_params_UpdateAllowUnauthenticatedEnrol = new ActionParamsClass_UpdateAllowUnauthenticatedEnrol();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateAllowUnauthenticatedEnrol UpdateAllowUnauthenticatedEnrolParams { get { return s_params_UpdateAllowUnauthenticatedEnrol; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateAllowUnauthenticatedEnrol
        {
            public readonly string id = "id";
            public readonly string AllowUnauthenticatedEnrol = "AllowUnauthenticatedEnrol";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_Decommission s_params_Decommission = new ActionParamsClass_Decommission();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Decommission DecommissionParams { get { return s_params_Decommission; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Decommission
        {
            public readonly string id = "id";
            public readonly string Reason = "Reason";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_Recommission s_params_Recommission = new ActionParamsClass_Recommission();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Recommission RecommissionParams { get { return s_params_Recommission; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Recommission
        {
            public readonly string id = "id";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_Delete s_params_Delete = new ActionParamsClass_Delete();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Delete DeleteParams { get { return s_params_Delete; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Delete
        {
            public readonly string id = "id";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_GeneratePdf s_params_GeneratePdf = new ActionParamsClass_GeneratePdf();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GeneratePdf GeneratePdfParams { get { return s_params_GeneratePdf; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GeneratePdf
        {
            public readonly string id = "id";
            public readonly string DocumentTemplateId = "DocumentTemplateId";
        }
        static readonly ActionParamsClass_LastNetworkLogonDate s_params_LastNetworkLogonDate = new ActionParamsClass_LastNetworkLogonDate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_LastNetworkLogonDate LastNetworkLogonDateParams { get { return s_params_LastNetworkLogonDate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_LastNetworkLogonDate
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_AttachmentDownload s_params_AttachmentDownload = new ActionParamsClass_AttachmentDownload();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AttachmentDownload AttachmentDownloadParams { get { return s_params_AttachmentDownload; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AttachmentDownload
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_AttachmentThumbnail s_params_AttachmentThumbnail = new ActionParamsClass_AttachmentThumbnail();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AttachmentThumbnail AttachmentThumbnailParams { get { return s_params_AttachmentThumbnail; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AttachmentThumbnail
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_AttachmentUpload s_params_AttachmentUpload = new ActionParamsClass_AttachmentUpload();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AttachmentUpload AttachmentUploadParams { get { return s_params_AttachmentUpload; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AttachmentUpload
        {
            public readonly string id = "id";
            public readonly string Comments = "Comments";
        }
        static readonly ActionParamsClass_Attachment s_params_Attachment = new ActionParamsClass_Attachment();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Attachment AttachmentParams { get { return s_params_Attachment; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Attachment
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_Attachments s_params_Attachments = new ActionParamsClass_Attachments();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Attachments AttachmentsParams { get { return s_params_Attachments; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Attachments
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_AttachmentRemove s_params_AttachmentRemove = new ActionParamsClass_AttachmentRemove();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AttachmentRemove AttachmentRemoveParams { get { return s_params_AttachmentRemove; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AttachmentRemove
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_ImportParse s_params_ImportParse = new ActionParamsClass_ImportParse();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ImportParse ImportParseParams { get { return s_params_ImportParse; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ImportParse
        {
            public readonly string ImportFile = "ImportFile";
        }
        static readonly ActionParamsClass_ImportProcess s_params_ImportProcess = new ActionParamsClass_ImportProcess();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ImportProcess ImportProcessParams { get { return s_params_ImportProcess; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ImportProcess
        {
            public readonly string ParseTaskSessionKey = "ParseTaskSessionKey";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_DeviceController : Disco.Web.Areas.API.Controllers.DeviceController
    {
        public T4MVC_DeviceController() : base(Dummy.Instance) { }

        partial void UpdateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, string key, string value, bool redirect);

        public override System.Web.Mvc.ActionResult Update(string id, string key, string value, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Update);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "key", key);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "value", value);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateOverride(callInfo, id, key, value, redirect);
            return callInfo;
        }

        partial void UpdateDeviceProfileIdOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, string DeviceProfileId, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateDeviceProfileId(string id, string DeviceProfileId, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateDeviceProfileId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "DeviceProfileId", DeviceProfileId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateDeviceProfileIdOverride(callInfo, id, DeviceProfileId, redirect);
            return callInfo;
        }

        partial void UpdateDeviceBatchIdOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, string DeviceBatchId, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateDeviceBatchId(string id, string DeviceBatchId, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateDeviceBatchId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "DeviceBatchId", DeviceBatchId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateDeviceBatchIdOverride(callInfo, id, DeviceBatchId, redirect);
            return callInfo;
        }

        partial void UpdateAssetNumberOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, string AssetNumber, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateAssetNumber(string id, string AssetNumber, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateAssetNumber);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "AssetNumber", AssetNumber);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateAssetNumberOverride(callInfo, id, AssetNumber, redirect);
            return callInfo;
        }

        partial void UpdateLocationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, string Location, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateLocation(string id, string Location, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateLocation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Location", Location);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateLocationOverride(callInfo, id, Location, redirect);
            return callInfo;
        }

        partial void UpdateAssignedUserIdOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, string AssignedUserId, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateAssignedUserId(string id, string AssignedUserId, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateAssignedUserId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "AssignedUserId", AssignedUserId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateAssignedUserIdOverride(callInfo, id, AssignedUserId, redirect);
            return callInfo;
        }

        partial void UpdateAllowUnauthenticatedEnrolOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, string AllowUnauthenticatedEnrol, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateAllowUnauthenticatedEnrol(string id, string AllowUnauthenticatedEnrol, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateAllowUnauthenticatedEnrol);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "AllowUnauthenticatedEnrol", AllowUnauthenticatedEnrol);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateAllowUnauthenticatedEnrolOverride(callInfo, id, AllowUnauthenticatedEnrol, redirect);
            return callInfo;
        }

        partial void DecommissionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, int Reason, bool redirect);

        public override System.Web.Mvc.ActionResult Decommission(string id, int Reason, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Decommission);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Reason", Reason);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            DecommissionOverride(callInfo, id, Reason, redirect);
            return callInfo;
        }

        partial void RecommissionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, bool redirect);

        public override System.Web.Mvc.ActionResult Recommission(string id, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Recommission);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            RecommissionOverride(callInfo, id, redirect);
            return callInfo;
        }

        partial void DeleteOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, bool redirect);

        public override System.Web.Mvc.ActionResult Delete(string id, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Delete);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            DeleteOverride(callInfo, id, redirect);
            return callInfo;
        }

        partial void GeneratePdfOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, string DocumentTemplateId);

        public override System.Web.Mvc.ActionResult GeneratePdf(string id, string DocumentTemplateId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GeneratePdf);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "DocumentTemplateId", DocumentTemplateId);
            GeneratePdfOverride(callInfo, id, DocumentTemplateId);
            return callInfo;
        }

        partial void LastNetworkLogonDateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id);

        public override System.Web.Mvc.ActionResult LastNetworkLogonDate(string id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LastNetworkLogonDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            LastNetworkLogonDateOverride(callInfo, id);
            return callInfo;
        }

        partial void AttachmentDownloadOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        public override System.Web.Mvc.ActionResult AttachmentDownload(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AttachmentDownload);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            AttachmentDownloadOverride(callInfo, id);
            return callInfo;
        }

        partial void AttachmentThumbnailOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        public override System.Web.Mvc.ActionResult AttachmentThumbnail(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AttachmentThumbnail);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            AttachmentThumbnailOverride(callInfo, id);
            return callInfo;
        }

        partial void AttachmentUploadOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, string Comments);

        public override System.Web.Mvc.ActionResult AttachmentUpload(string id, string Comments)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AttachmentUpload);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Comments", Comments);
            AttachmentUploadOverride(callInfo, id, Comments);
            return callInfo;
        }

        partial void AttachmentOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        public override System.Web.Mvc.ActionResult Attachment(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Attachment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            AttachmentOverride(callInfo, id);
            return callInfo;
        }

        partial void AttachmentsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id);

        public override System.Web.Mvc.ActionResult Attachments(string id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Attachments);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            AttachmentsOverride(callInfo, id);
            return callInfo;
        }

        partial void AttachmentRemoveOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        public override System.Web.Mvc.ActionResult AttachmentRemove(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AttachmentRemove);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            AttachmentRemoveOverride(callInfo, id);
            return callInfo;
        }

        partial void ImportParseOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, System.Web.HttpPostedFileBase ImportFile);

        public override System.Web.Mvc.ActionResult ImportParse(System.Web.HttpPostedFileBase ImportFile)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ImportParse);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ImportFile", ImportFile);
            ImportParseOverride(callInfo, ImportFile);
            return callInfo;
        }

        partial void ImportProcessOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ParseTaskSessionKey);

        public override System.Web.Mvc.ActionResult ImportProcess(string ParseTaskSessionKey)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ImportProcess);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ParseTaskSessionKey", ParseTaskSessionKey);
            ImportProcessOverride(callInfo, ParseTaskSessionKey);
            return callInfo;
        }

        partial void ExportAllDevicesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult ExportAllDevices()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ExportAllDevices);
            ExportAllDevicesOverride(callInfo);
            return callInfo;
        }

        partial void MigrateDeviceMacAddressesFromLogOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult MigrateDeviceMacAddressesFromLog()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.MigrateDeviceMacAddressesFromLog);
            MigrateDeviceMacAddressesFromLogOverride(callInfo);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.API.Controllers
{
    public partial class DeviceModelController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DeviceModelController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected DeviceModelController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Update()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Update);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateDescription()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateDescription);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateDefaultPurchaseDate()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateDefaultPurchaseDate);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateDefaultWarrantyProvider()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateDefaultWarrantyProvider);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Image()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Image);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Delete()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Delete);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Component()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Component);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ComponentAdd()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ComponentAdd);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ComponentUpdateJobSubTypes()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ComponentUpdateJobSubTypes);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ComponentUpdate()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ComponentUpdate);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ComponentRemove()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ComponentRemove);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ExportDevices()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ExportDevices);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DeviceModelController Actions { get { return MVC.API.DeviceModel; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "API";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "DeviceModel";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "DeviceModel";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Update = "Update";
            public readonly string UpdateDescription = "UpdateDescription";
            public readonly string UpdateDefaultPurchaseDate = "UpdateDefaultPurchaseDate";
            public readonly string UpdateDefaultWarrantyProvider = "UpdateDefaultWarrantyProvider";
            public readonly string Image = "Image";
            public readonly string Delete = "Delete";
            public readonly string Component = "Component";
            public readonly string ComponentAdd = "ComponentAdd";
            public readonly string ComponentUpdateJobSubTypes = "ComponentUpdateJobSubTypes";
            public readonly string ComponentUpdate = "ComponentUpdate";
            public readonly string ComponentRemove = "ComponentRemove";
            public readonly string Index = "Index";
            public readonly string ExportDevices = "ExportDevices";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Update = "Update";
            public const string UpdateDescription = "UpdateDescription";
            public const string UpdateDefaultPurchaseDate = "UpdateDefaultPurchaseDate";
            public const string UpdateDefaultWarrantyProvider = "UpdateDefaultWarrantyProvider";
            public const string Image = "Image";
            public const string Delete = "Delete";
            public const string Component = "Component";
            public const string ComponentAdd = "ComponentAdd";
            public const string ComponentUpdateJobSubTypes = "ComponentUpdateJobSubTypes";
            public const string ComponentUpdate = "ComponentUpdate";
            public const string ComponentRemove = "ComponentRemove";
            public const string Index = "Index";
            public const string ExportDevices = "ExportDevices";
        }


        static readonly ActionParamsClass_Update s_params_Update = new ActionParamsClass_Update();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Update UpdateParams { get { return s_params_Update; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Update
        {
            public readonly string id = "id";
            public readonly string key = "key";
            public readonly string value = "value";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateDescription s_params_UpdateDescription = new ActionParamsClass_UpdateDescription();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateDescription UpdateDescriptionParams { get { return s_params_UpdateDescription; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateDescription
        {
            public readonly string id = "id";
            public readonly string Description = "Description";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateDefaultPurchaseDate s_params_UpdateDefaultPurchaseDate = new ActionParamsClass_UpdateDefaultPurchaseDate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateDefaultPurchaseDate UpdateDefaultPurchaseDateParams { get { return s_params_UpdateDefaultPurchaseDate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateDefaultPurchaseDate
        {
            public readonly string id = "id";
            public readonly string DefaultPurchaseDate = "DefaultPurchaseDate";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateDefaultWarrantyProvider s_params_UpdateDefaultWarrantyProvider = new ActionParamsClass_UpdateDefaultWarrantyProvider();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateDefaultWarrantyProvider UpdateDefaultWarrantyProviderParams { get { return s_params_UpdateDefaultWarrantyProvider; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateDefaultWarrantyProvider
        {
            public readonly string id = "id";
            public readonly string DefaultWarrantyProvider = "DefaultWarrantyProvider";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_Image s_params_Image = new ActionParamsClass_Image();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Image ImageParams { get { return s_params_Image; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Image
        {
            public readonly string id = "id";
            public readonly string v = "v";
            public readonly string redirect = "redirect";
            public readonly string Image = "Image";
        }
        static readonly ActionParamsClass_Delete s_params_Delete = new ActionParamsClass_Delete();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Delete DeleteParams { get { return s_params_Delete; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Delete
        {
            public readonly string id = "id";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_Component s_params_Component = new ActionParamsClass_Component();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Component ComponentParams { get { return s_params_Component; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Component
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_ComponentAdd s_params_ComponentAdd = new ActionParamsClass_ComponentAdd();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ComponentAdd ComponentAddParams { get { return s_params_ComponentAdd; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ComponentAdd
        {
            public readonly string id = "id";
            public readonly string Description = "Description";
            public readonly string Cost = "Cost";
        }
        static readonly ActionParamsClass_ComponentUpdateJobSubTypes s_params_ComponentUpdateJobSubTypes = new ActionParamsClass_ComponentUpdateJobSubTypes();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ComponentUpdateJobSubTypes ComponentUpdateJobSubTypesParams { get { return s_params_ComponentUpdateJobSubTypes; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ComponentUpdateJobSubTypes
        {
            public readonly string id = "id";
            public readonly string JobSubTypes = "JobSubTypes";
        }
        static readonly ActionParamsClass_ComponentUpdate s_params_ComponentUpdate = new ActionParamsClass_ComponentUpdate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ComponentUpdate ComponentUpdateParams { get { return s_params_ComponentUpdate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ComponentUpdate
        {
            public readonly string id = "id";
            public readonly string Description = "Description";
            public readonly string Cost = "Cost";
        }
        static readonly ActionParamsClass_ComponentRemove s_params_ComponentRemove = new ActionParamsClass_ComponentRemove();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ComponentRemove ComponentRemoveParams { get { return s_params_ComponentRemove; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ComponentRemove
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_ExportDevices s_params_ExportDevices = new ActionParamsClass_ExportDevices();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ExportDevices ExportDevicesParams { get { return s_params_ExportDevices; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ExportDevices
        {
            public readonly string id = "id";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_DeviceModelController : Disco.Web.Areas.API.Controllers.DeviceModelController
    {
        public T4MVC_DeviceModelController() : base(Dummy.Instance) { }

        partial void UpdateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string key, string value, bool redirect);

        public override System.Web.Mvc.ActionResult Update(int id, string key, string value, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Update);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "key", key);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "value", value);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateOverride(callInfo, id, key, value, redirect);
            return callInfo;
        }

        partial void UpdateDescriptionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string Description, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateDescription(int id, string Description, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateDescription);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Description", Description);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateDescriptionOverride(callInfo, id, Description, redirect);
            return callInfo;
        }

        partial void UpdateDefaultPurchaseDateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string DefaultPurchaseDate, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateDefaultPurchaseDate(int id, string DefaultPurchaseDate, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateDefaultPurchaseDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "DefaultPurchaseDate", DefaultPurchaseDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateDefaultPurchaseDateOverride(callInfo, id, DefaultPurchaseDate, redirect);
            return callInfo;
        }

        partial void UpdateDefaultWarrantyProviderOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string DefaultWarrantyProvider, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateDefaultWarrantyProvider(int id, string DefaultWarrantyProvider, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateDefaultWarrantyProvider);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "DefaultWarrantyProvider", DefaultWarrantyProvider);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateDefaultWarrantyProviderOverride(callInfo, id, DefaultWarrantyProvider, redirect);
            return callInfo;
        }

        partial void ImageOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int? id, string v);

        public override System.Web.Mvc.ActionResult Image(int? id, string v)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Image);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "v", v);
            ImageOverride(callInfo, id, v);
            return callInfo;
        }

        partial void ImageOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, bool redirect, System.Web.HttpPostedFileBase Image);

        public override System.Web.Mvc.ActionResult Image(int id, bool redirect, System.Web.HttpPostedFileBase Image)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Image);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Image", Image);
            ImageOverride(callInfo, id, redirect, Image);
            return callInfo;
        }

        partial void DeleteOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, bool? redirect);

        public override System.Web.Mvc.ActionResult Delete(int id, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Delete);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            DeleteOverride(callInfo, id, redirect);
            return callInfo;
        }

        partial void ComponentOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        public override System.Web.Mvc.ActionResult Component(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Component);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ComponentOverride(callInfo, id);
            return callInfo;
        }

        partial void ComponentAddOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int? id, string Description, string Cost);

        public override System.Web.Mvc.ActionResult ComponentAdd(int? id, string Description, string Cost)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ComponentAdd);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Description", Description);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Cost", Cost);
            ComponentAddOverride(callInfo, id, Description, Cost);
            return callInfo;
        }

        partial void ComponentUpdateJobSubTypesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, System.Collections.Generic.List<string> JobSubTypes);

        public override System.Web.Mvc.ActionResult ComponentUpdateJobSubTypes(int id, System.Collections.Generic.List<string> JobSubTypes)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ComponentUpdateJobSubTypes);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "JobSubTypes", JobSubTypes);
            ComponentUpdateJobSubTypesOverride(callInfo, id, JobSubTypes);
            return callInfo;
        }

        partial void ComponentUpdateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string Description, string Cost);

        public override System.Web.Mvc.ActionResult ComponentUpdate(int id, string Description, string Cost)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ComponentUpdate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Description", Description);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Cost", Cost);
            ComponentUpdateOverride(callInfo, id, Description, Cost);
            return callInfo;
        }

        partial void ComponentRemoveOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        public override System.Web.Mvc.ActionResult ComponentRemove(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ComponentRemove);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ComponentRemoveOverride(callInfo, id);
            return callInfo;
        }

        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        partial void ExportDevicesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        public override System.Web.Mvc.ActionResult ExportDevices(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ExportDevices);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ExportDevicesOverride(callInfo, id);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.API.Controllers
{
    public partial class DeviceProfileController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DeviceProfileController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected DeviceProfileController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Update()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Update);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateDescription()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateDescription);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateName()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateName);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateShortName()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateShortName);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateDistributionType()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateDistributionType);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateCertificateProviderId()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateCertificateProviderId);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateOrganisationalUnit()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateOrganisationalUnit);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateDefaultOrganisationAddress()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateDefaultOrganisationAddress);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateComputerNameTemplate()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateComputerNameTemplate);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateEnforceComputerNameConvention()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateEnforceComputerNameConvention);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateEnforceOrganisationalUnit()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateEnforceOrganisationalUnit);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateProvisionADAccount()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateProvisionADAccount);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Delete()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Delete);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Default()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Default);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult DefaultAddDeviceOffline()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DefaultAddDeviceOffline);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ExportDevices()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ExportDevices);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DeviceProfileController Actions { get { return MVC.API.DeviceProfile; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "API";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "DeviceProfile";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "DeviceProfile";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Update = "Update";
            public readonly string UpdateDescription = "UpdateDescription";
            public readonly string UpdateName = "UpdateName";
            public readonly string UpdateShortName = "UpdateShortName";
            public readonly string UpdateDistributionType = "UpdateDistributionType";
            public readonly string UpdateCertificateProviderId = "UpdateCertificateProviderId";
            public readonly string UpdateOrganisationalUnit = "UpdateOrganisationalUnit";
            public readonly string UpdateDefaultOrganisationAddress = "UpdateDefaultOrganisationAddress";
            public readonly string UpdateComputerNameTemplate = "UpdateComputerNameTemplate";
            public readonly string UpdateEnforceComputerNameConvention = "UpdateEnforceComputerNameConvention";
            public readonly string UpdateEnforceOrganisationalUnit = "UpdateEnforceOrganisationalUnit";
            public readonly string UpdateProvisionADAccount = "UpdateProvisionADAccount";
            public readonly string OrganisationalUnits = "OrganisationalUnits";
            public readonly string Delete = "Delete";
            public readonly string Default = "Default";
            public readonly string DefaultAddDeviceOffline = "DefaultAddDeviceOffline";
            public readonly string ExportDevices = "ExportDevices";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Update = "Update";
            public const string UpdateDescription = "UpdateDescription";
            public const string UpdateName = "UpdateName";
            public const string UpdateShortName = "UpdateShortName";
            public const string UpdateDistributionType = "UpdateDistributionType";
            public const string UpdateCertificateProviderId = "UpdateCertificateProviderId";
            public const string UpdateOrganisationalUnit = "UpdateOrganisationalUnit";
            public const string UpdateDefaultOrganisationAddress = "UpdateDefaultOrganisationAddress";
            public const string UpdateComputerNameTemplate = "UpdateComputerNameTemplate";
            public const string UpdateEnforceComputerNameConvention = "UpdateEnforceComputerNameConvention";
            public const string UpdateEnforceOrganisationalUnit = "UpdateEnforceOrganisationalUnit";
            public const string UpdateProvisionADAccount = "UpdateProvisionADAccount";
            public const string OrganisationalUnits = "OrganisationalUnits";
            public const string Delete = "Delete";
            public const string Default = "Default";
            public const string DefaultAddDeviceOffline = "DefaultAddDeviceOffline";
            public const string ExportDevices = "ExportDevices";
        }


        static readonly ActionParamsClass_Update s_params_Update = new ActionParamsClass_Update();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Update UpdateParams { get { return s_params_Update; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Update
        {
            public readonly string id = "id";
            public readonly string key = "key";
            public readonly string value = "value";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateDescription s_params_UpdateDescription = new ActionParamsClass_UpdateDescription();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateDescription UpdateDescriptionParams { get { return s_params_UpdateDescription; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateDescription
        {
            public readonly string id = "id";
            public readonly string Description = "Description";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateName s_params_UpdateName = new ActionParamsClass_UpdateName();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateName UpdateNameParams { get { return s_params_UpdateName; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateName
        {
            public readonly string id = "id";
            public readonly string ProfileName = "ProfileName";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateShortName s_params_UpdateShortName = new ActionParamsClass_UpdateShortName();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateShortName UpdateShortNameParams { get { return s_params_UpdateShortName; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateShortName
        {
            public readonly string id = "id";
            public readonly string ShortName = "ShortName";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateDistributionType s_params_UpdateDistributionType = new ActionParamsClass_UpdateDistributionType();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateDistributionType UpdateDistributionTypeParams { get { return s_params_UpdateDistributionType; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateDistributionType
        {
            public readonly string id = "id";
            public readonly string DistributionType = "DistributionType";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateCertificateProviderId s_params_UpdateCertificateProviderId = new ActionParamsClass_UpdateCertificateProviderId();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateCertificateProviderId UpdateCertificateProviderIdParams { get { return s_params_UpdateCertificateProviderId; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateCertificateProviderId
        {
            public readonly string id = "id";
            public readonly string CertificateProviderId = "CertificateProviderId";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateOrganisationalUnit s_params_UpdateOrganisationalUnit = new ActionParamsClass_UpdateOrganisationalUnit();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateOrganisationalUnit UpdateOrganisationalUnitParams { get { return s_params_UpdateOrganisationalUnit; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateOrganisationalUnit
        {
            public readonly string id = "id";
            public readonly string OrganisationalUnit = "OrganisationalUnit";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateDefaultOrganisationAddress s_params_UpdateDefaultOrganisationAddress = new ActionParamsClass_UpdateDefaultOrganisationAddress();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateDefaultOrganisationAddress UpdateDefaultOrganisationAddressParams { get { return s_params_UpdateDefaultOrganisationAddress; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateDefaultOrganisationAddress
        {
            public readonly string id = "id";
            public readonly string DefaultOrganisationAddress = "DefaultOrganisationAddress";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateComputerNameTemplate s_params_UpdateComputerNameTemplate = new ActionParamsClass_UpdateComputerNameTemplate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateComputerNameTemplate UpdateComputerNameTemplateParams { get { return s_params_UpdateComputerNameTemplate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateComputerNameTemplate
        {
            public readonly string id = "id";
            public readonly string ComputerNameTemplate = "ComputerNameTemplate";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateEnforceComputerNameConvention s_params_UpdateEnforceComputerNameConvention = new ActionParamsClass_UpdateEnforceComputerNameConvention();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateEnforceComputerNameConvention UpdateEnforceComputerNameConventionParams { get { return s_params_UpdateEnforceComputerNameConvention; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateEnforceComputerNameConvention
        {
            public readonly string id = "id";
            public readonly string EnforceComputerNameConvention = "EnforceComputerNameConvention";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateEnforceOrganisationalUnit s_params_UpdateEnforceOrganisationalUnit = new ActionParamsClass_UpdateEnforceOrganisationalUnit();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateEnforceOrganisationalUnit UpdateEnforceOrganisationalUnitParams { get { return s_params_UpdateEnforceOrganisationalUnit; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateEnforceOrganisationalUnit
        {
            public readonly string id = "id";
            public readonly string EnforceOrganisationalUnit = "EnforceOrganisationalUnit";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateProvisionADAccount s_params_UpdateProvisionADAccount = new ActionParamsClass_UpdateProvisionADAccount();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateProvisionADAccount UpdateProvisionADAccountParams { get { return s_params_UpdateProvisionADAccount; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateProvisionADAccount
        {
            public readonly string id = "id";
            public readonly string ProvisionADAccount = "ProvisionADAccount";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_Delete s_params_Delete = new ActionParamsClass_Delete();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Delete DeleteParams { get { return s_params_Delete; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Delete
        {
            public readonly string id = "id";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_Default s_params_Default = new ActionParamsClass_Default();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Default DefaultParams { get { return s_params_Default; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Default
        {
            public readonly string id = "id";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_DefaultAddDeviceOffline s_params_DefaultAddDeviceOffline = new ActionParamsClass_DefaultAddDeviceOffline();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DefaultAddDeviceOffline DefaultAddDeviceOfflineParams { get { return s_params_DefaultAddDeviceOffline; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DefaultAddDeviceOffline
        {
            public readonly string id = "id";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_ExportDevices s_params_ExportDevices = new ActionParamsClass_ExportDevices();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ExportDevices ExportDevicesParams { get { return s_params_ExportDevices; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ExportDevices
        {
            public readonly string id = "id";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_DeviceProfileController : Disco.Web.Areas.API.Controllers.DeviceProfileController
    {
        public T4MVC_DeviceProfileController() : base(Dummy.Instance) { }

        partial void UpdateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string key, string value, bool? redirect);

        public override System.Web.Mvc.ActionResult Update(int id, string key, string value, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Update);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "key", key);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "value", value);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateOverride(callInfo, id, key, value, redirect);
            return callInfo;
        }

        partial void UpdateDescriptionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string Description, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateDescription(int id, string Description, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateDescription);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Description", Description);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateDescriptionOverride(callInfo, id, Description, redirect);
            return callInfo;
        }

        partial void UpdateNameOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string ProfileName, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateName(int id, string ProfileName, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateName);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ProfileName", ProfileName);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateNameOverride(callInfo, id, ProfileName, redirect);
            return callInfo;
        }

        partial void UpdateShortNameOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string ShortName, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateShortName(int id, string ShortName, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateShortName);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ShortName", ShortName);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateShortNameOverride(callInfo, id, ShortName, redirect);
            return callInfo;
        }

        partial void UpdateDistributionTypeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string DistributionType, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateDistributionType(int id, string DistributionType, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateDistributionType);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "DistributionType", DistributionType);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateDistributionTypeOverride(callInfo, id, DistributionType, redirect);
            return callInfo;
        }

        partial void UpdateCertificateProviderIdOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string CertificateProviderId, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateCertificateProviderId(int id, string CertificateProviderId, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateCertificateProviderId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "CertificateProviderId", CertificateProviderId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateCertificateProviderIdOverride(callInfo, id, CertificateProviderId, redirect);
            return callInfo;
        }

        partial void UpdateOrganisationalUnitOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string OrganisationalUnit, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateOrganisationalUnit(int id, string OrganisationalUnit, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateOrganisationalUnit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "OrganisationalUnit", OrganisationalUnit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateOrganisationalUnitOverride(callInfo, id, OrganisationalUnit, redirect);
            return callInfo;
        }

        partial void UpdateDefaultOrganisationAddressOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string DefaultOrganisationAddress, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateDefaultOrganisationAddress(int id, string DefaultOrganisationAddress, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateDefaultOrganisationAddress);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "DefaultOrganisationAddress", DefaultOrganisationAddress);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateDefaultOrganisationAddressOverride(callInfo, id, DefaultOrganisationAddress, redirect);
            return callInfo;
        }

        partial void UpdateComputerNameTemplateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string ComputerNameTemplate, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateComputerNameTemplate(int id, string ComputerNameTemplate, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateComputerNameTemplate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ComputerNameTemplate", ComputerNameTemplate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateComputerNameTemplateOverride(callInfo, id, ComputerNameTemplate, redirect);
            return callInfo;
        }

        partial void UpdateEnforceComputerNameConventionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string EnforceComputerNameConvention, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateEnforceComputerNameConvention(int id, string EnforceComputerNameConvention, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateEnforceComputerNameConvention);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "EnforceComputerNameConvention", EnforceComputerNameConvention);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateEnforceComputerNameConventionOverride(callInfo, id, EnforceComputerNameConvention, redirect);
            return callInfo;
        }

        partial void UpdateEnforceOrganisationalUnitOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string EnforceOrganisationalUnit, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateEnforceOrganisationalUnit(int id, string EnforceOrganisationalUnit, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateEnforceOrganisationalUnit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "EnforceOrganisationalUnit", EnforceOrganisationalUnit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateEnforceOrganisationalUnitOverride(callInfo, id, EnforceOrganisationalUnit, redirect);
            return callInfo;
        }

        partial void UpdateProvisionADAccountOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string ProvisionADAccount, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateProvisionADAccount(int id, string ProvisionADAccount, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateProvisionADAccount);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ProvisionADAccount", ProvisionADAccount);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateProvisionADAccountOverride(callInfo, id, ProvisionADAccount, redirect);
            return callInfo;
        }

        partial void OrganisationalUnitsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult OrganisationalUnits()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.OrganisationalUnits);
            OrganisationalUnitsOverride(callInfo);
            return callInfo;
        }

        partial void DeleteOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, bool? redirect);

        public override System.Web.Mvc.ActionResult Delete(int id, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Delete);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            DeleteOverride(callInfo, id, redirect);
            return callInfo;
        }

        partial void DefaultOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, bool? redirect);

        public override System.Web.Mvc.ActionResult Default(int id, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Default);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            DefaultOverride(callInfo, id, redirect);
            return callInfo;
        }

        partial void DefaultAddDeviceOfflineOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, bool? redirect);

        public override System.Web.Mvc.ActionResult DefaultAddDeviceOffline(int id, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DefaultAddDeviceOffline);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            DefaultAddDeviceOfflineOverride(callInfo, id, redirect);
            return callInfo;
        }

        partial void ExportDevicesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        public override System.Web.Mvc.ActionResult ExportDevices(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ExportDevices);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ExportDevicesOverride(callInfo, id);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.API.Controllers
{
    public partial class DocumentTemplateController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DocumentTemplateController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected DocumentTemplateController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Update()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Update);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Template()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Template);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateDescription()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateDescription);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateFilterExpression()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateFilterExpression);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateFlattenForm()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateFlattenForm);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateScope()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateScope);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateSubTypes()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateSubTypes);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ImporterThumbnail()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ImporterThumbnail);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ImporterUndetectedDataIdLookup()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ImporterUndetectedDataIdLookup);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ImporterUndetectedFile()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ImporterUndetectedFile);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ImporterUndetectedAssign()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ImporterUndetectedAssign);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ImporterUndetectedDelete()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ImporterUndetectedDelete);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult BulkGenerate()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.BulkGenerate);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Delete()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Delete);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DocumentTemplateController Actions { get { return MVC.API.DocumentTemplate; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "API";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "DocumentTemplate";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "DocumentTemplate";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Update = "Update";
            public readonly string Template = "Template";
            public readonly string UpdateDescription = "UpdateDescription";
            public readonly string UpdateFilterExpression = "UpdateFilterExpression";
            public readonly string UpdateFlattenForm = "UpdateFlattenForm";
            public readonly string UpdateScope = "UpdateScope";
            public readonly string UpdateSubTypes = "UpdateSubTypes";
            public readonly string ImporterThumbnail = "ImporterThumbnail";
            public readonly string ImporterUndetectedFiles = "ImporterUndetectedFiles";
            public readonly string ImporterUndetectedDataIdLookup = "ImporterUndetectedDataIdLookup";
            public readonly string ImporterUndetectedFile = "ImporterUndetectedFile";
            public readonly string ImporterUndetectedAssign = "ImporterUndetectedAssign";
            public readonly string ImporterUndetectedDelete = "ImporterUndetectedDelete";
            public readonly string BulkGenerate = "BulkGenerate";
            public readonly string Delete = "Delete";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Update = "Update";
            public const string Template = "Template";
            public const string UpdateDescription = "UpdateDescription";
            public const string UpdateFilterExpression = "UpdateFilterExpression";
            public const string UpdateFlattenForm = "UpdateFlattenForm";
            public const string UpdateScope = "UpdateScope";
            public const string UpdateSubTypes = "UpdateSubTypes";
            public const string ImporterThumbnail = "ImporterThumbnail";
            public const string ImporterUndetectedFiles = "ImporterUndetectedFiles";
            public const string ImporterUndetectedDataIdLookup = "ImporterUndetectedDataIdLookup";
            public const string ImporterUndetectedFile = "ImporterUndetectedFile";
            public const string ImporterUndetectedAssign = "ImporterUndetectedAssign";
            public const string ImporterUndetectedDelete = "ImporterUndetectedDelete";
            public const string BulkGenerate = "BulkGenerate";
            public const string Delete = "Delete";
        }


        static readonly ActionParamsClass_Update s_params_Update = new ActionParamsClass_Update();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Update UpdateParams { get { return s_params_Update; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Update
        {
            public readonly string id = "id";
            public readonly string key = "key";
            public readonly string value = "value";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_Template s_params_Template = new ActionParamsClass_Template();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Template TemplateParams { get { return s_params_Template; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Template
        {
            public readonly string id = "id";
            public readonly string redirect = "redirect";
            public readonly string Template = "Template";
        }
        static readonly ActionParamsClass_UpdateDescription s_params_UpdateDescription = new ActionParamsClass_UpdateDescription();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateDescription UpdateDescriptionParams { get { return s_params_UpdateDescription; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateDescription
        {
            public readonly string id = "id";
            public readonly string Description = "Description";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateFilterExpression s_params_UpdateFilterExpression = new ActionParamsClass_UpdateFilterExpression();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateFilterExpression UpdateFilterExpressionParams { get { return s_params_UpdateFilterExpression; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateFilterExpression
        {
            public readonly string id = "id";
            public readonly string FilterExpression = "FilterExpression";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateFlattenForm s_params_UpdateFlattenForm = new ActionParamsClass_UpdateFlattenForm();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateFlattenForm UpdateFlattenFormParams { get { return s_params_UpdateFlattenForm; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateFlattenForm
        {
            public readonly string id = "id";
            public readonly string FlattenForm = "FlattenForm";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateScope s_params_UpdateScope = new ActionParamsClass_UpdateScope();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateScope UpdateScopeParams { get { return s_params_UpdateScope; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateScope
        {
            public readonly string id = "id";
            public readonly string Scope = "Scope";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateSubTypes s_params_UpdateSubTypes = new ActionParamsClass_UpdateSubTypes();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateSubTypes UpdateSubTypesParams { get { return s_params_UpdateSubTypes; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateSubTypes
        {
            public readonly string id = "id";
            public readonly string SubTypes = "SubTypes";
        }
        static readonly ActionParamsClass_ImporterThumbnail s_params_ImporterThumbnail = new ActionParamsClass_ImporterThumbnail();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ImporterThumbnail ImporterThumbnailParams { get { return s_params_ImporterThumbnail; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ImporterThumbnail
        {
            public readonly string SessionId = "SessionId";
            public readonly string PageNumber = "PageNumber";
        }
        static readonly ActionParamsClass_ImporterUndetectedDataIdLookup s_params_ImporterUndetectedDataIdLookup = new ActionParamsClass_ImporterUndetectedDataIdLookup();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ImporterUndetectedDataIdLookup ImporterUndetectedDataIdLookupParams { get { return s_params_ImporterUndetectedDataIdLookup; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ImporterUndetectedDataIdLookup
        {
            public readonly string id = "id";
            public readonly string term = "term";
            public readonly string limitCount = "limitCount";
        }
        static readonly ActionParamsClass_ImporterUndetectedFile s_params_ImporterUndetectedFile = new ActionParamsClass_ImporterUndetectedFile();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ImporterUndetectedFile ImporterUndetectedFileParams { get { return s_params_ImporterUndetectedFile; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ImporterUndetectedFile
        {
            public readonly string id = "id";
            public readonly string Source = "Source";
            public readonly string Thumbnail = "Thumbnail";
        }
        static readonly ActionParamsClass_ImporterUndetectedAssign s_params_ImporterUndetectedAssign = new ActionParamsClass_ImporterUndetectedAssign();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ImporterUndetectedAssign ImporterUndetectedAssignParams { get { return s_params_ImporterUndetectedAssign; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ImporterUndetectedAssign
        {
            public readonly string id = "id";
            public readonly string DocumentTemplateId = "DocumentTemplateId";
            public readonly string DataId = "DataId";
        }
        static readonly ActionParamsClass_ImporterUndetectedDelete s_params_ImporterUndetectedDelete = new ActionParamsClass_ImporterUndetectedDelete();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ImporterUndetectedDelete ImporterUndetectedDeleteParams { get { return s_params_ImporterUndetectedDelete; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ImporterUndetectedDelete
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_BulkGenerate s_params_BulkGenerate = new ActionParamsClass_BulkGenerate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_BulkGenerate BulkGenerateParams { get { return s_params_BulkGenerate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_BulkGenerate
        {
            public readonly string id = "id";
            public readonly string DataIds = "DataIds";
        }
        static readonly ActionParamsClass_Delete s_params_Delete = new ActionParamsClass_Delete();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Delete DeleteParams { get { return s_params_Delete; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Delete
        {
            public readonly string id = "id";
            public readonly string redirect = "redirect";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_DocumentTemplateController : Disco.Web.Areas.API.Controllers.DocumentTemplateController
    {
        public T4MVC_DocumentTemplateController() : base(Dummy.Instance) { }

        partial void UpdateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, string key, string value, bool redirect);

        public override System.Web.Mvc.ActionResult Update(string id, string key, string value, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Update);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "key", key);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "value", value);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateOverride(callInfo, id, key, value, redirect);
            return callInfo;
        }

        partial void TemplateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id);

        public override System.Web.Mvc.ActionResult Template(string id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Template);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            TemplateOverride(callInfo, id);
            return callInfo;
        }

        partial void TemplateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, bool redirect, System.Web.HttpPostedFileBase Template);

        public override System.Web.Mvc.ActionResult Template(string id, bool redirect, System.Web.HttpPostedFileBase Template)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Template);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Template", Template);
            TemplateOverride(callInfo, id, redirect, Template);
            return callInfo;
        }

        partial void UpdateDescriptionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, string Description, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateDescription(string id, string Description, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateDescription);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Description", Description);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateDescriptionOverride(callInfo, id, Description, redirect);
            return callInfo;
        }

        partial void UpdateFilterExpressionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, string FilterExpression, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateFilterExpression(string id, string FilterExpression, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateFilterExpression);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "FilterExpression", FilterExpression);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateFilterExpressionOverride(callInfo, id, FilterExpression, redirect);
            return callInfo;
        }

        partial void UpdateFlattenFormOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, string FlattenForm, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateFlattenForm(string id, string FlattenForm, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateFlattenForm);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "FlattenForm", FlattenForm);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateFlattenFormOverride(callInfo, id, FlattenForm, redirect);
            return callInfo;
        }

        partial void UpdateScopeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, string Scope, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateScope(string id, string Scope, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateScope);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Scope", Scope);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateScopeOverride(callInfo, id, Scope, redirect);
            return callInfo;
        }

        partial void UpdateSubTypesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, System.Collections.Generic.List<string> SubTypes);

        public override System.Web.Mvc.ActionResult UpdateSubTypes(string id, System.Collections.Generic.List<string> SubTypes)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateSubTypes);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "SubTypes", SubTypes);
            UpdateSubTypesOverride(callInfo, id, SubTypes);
            return callInfo;
        }

        partial void ImporterThumbnailOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string SessionId, int PageNumber);

        public override System.Web.Mvc.ActionResult ImporterThumbnail(string SessionId, int PageNumber)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ImporterThumbnail);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "SessionId", SessionId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PageNumber", PageNumber);
            ImporterThumbnailOverride(callInfo, SessionId, PageNumber);
            return callInfo;
        }

        partial void ImporterUndetectedFilesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult ImporterUndetectedFiles()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ImporterUndetectedFiles);
            ImporterUndetectedFilesOverride(callInfo);
            return callInfo;
        }

        partial void ImporterUndetectedDataIdLookupOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, string term, int limitCount);

        public override System.Web.Mvc.ActionResult ImporterUndetectedDataIdLookup(string id, string term, int limitCount)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ImporterUndetectedDataIdLookup);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "term", term);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "limitCount", limitCount);
            ImporterUndetectedDataIdLookupOverride(callInfo, id, term, limitCount);
            return callInfo;
        }

        partial void ImporterUndetectedFileOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, bool? Source, bool? Thumbnail);

        public override System.Web.Mvc.ActionResult ImporterUndetectedFile(string id, bool? Source, bool? Thumbnail)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ImporterUndetectedFile);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Source", Source);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Thumbnail", Thumbnail);
            ImporterUndetectedFileOverride(callInfo, id, Source, Thumbnail);
            return callInfo;
        }

        partial void ImporterUndetectedAssignOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, string DocumentTemplateId, string DataId);

        public override System.Web.Mvc.ActionResult ImporterUndetectedAssign(string id, string DocumentTemplateId, string DataId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ImporterUndetectedAssign);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "DocumentTemplateId", DocumentTemplateId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "DataId", DataId);
            ImporterUndetectedAssignOverride(callInfo, id, DocumentTemplateId, DataId);
            return callInfo;
        }

        partial void ImporterUndetectedDeleteOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id);

        public override System.Web.Mvc.ActionResult ImporterUndetectedDelete(string id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ImporterUndetectedDelete);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ImporterUndetectedDeleteOverride(callInfo, id);
            return callInfo;
        }

        partial void BulkGenerateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, string DataIds);

        public override System.Web.Mvc.ActionResult BulkGenerate(string id, string DataIds)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.BulkGenerate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "DataIds", DataIds);
            BulkGenerateOverride(callInfo, id, DataIds);
            return callInfo;
        }

        partial void DeleteOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, bool? redirect);

        public override System.Web.Mvc.ActionResult Delete(string id, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Delete);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            DeleteOverride(callInfo, id, redirect);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.API.Controllers
{
    public partial class ExpressionsController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ExpressionsController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected ExpressionsController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ValidateExpression()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ValidateExpression);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ExpressionsController Actions { get { return MVC.API.Expressions; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "API";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Expressions";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Expressions";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string ValidateExpression = "ValidateExpression";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string ValidateExpression = "ValidateExpression";
        }


        static readonly ActionParamsClass_ValidateExpression s_params_ValidateExpression = new ActionParamsClass_ValidateExpression();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ValidateExpression ValidateExpressionParams { get { return s_params_ValidateExpression; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ValidateExpression
        {
            public readonly string Expression = "Expression";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_ExpressionsController : Disco.Web.Areas.API.Controllers.ExpressionsController
    {
        public T4MVC_ExpressionsController() : base(Dummy.Instance) { }

        partial void ValidateExpressionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string Expression);

        public override System.Web.Mvc.ActionResult ValidateExpression(string Expression)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ValidateExpression);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Expression", Expression);
            ValidateExpressionOverride(callInfo, Expression);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.API.Controllers
{
    public partial class JobController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public JobController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected JobController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Update()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Update);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateExpectedClosedDate()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateExpectedClosedDate);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateDeviceHeldLocation()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateDeviceHeldLocation);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateFlags()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateFlags);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateNonWarrantyAccountingChargeRequired()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateNonWarrantyAccountingChargeRequired);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateNonWarrantyAccountingChargeAdded()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateNonWarrantyAccountingChargeAdded);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateNonWarrantyAccountingChargePaid()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateNonWarrantyAccountingChargePaid);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateNonWarrantyPurchaseOrderRaised()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateNonWarrantyPurchaseOrderRaised);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateNonWarrantyPurchaseOrderReference()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateNonWarrantyPurchaseOrderReference);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateNonWarrantyPurchaseOrderSent()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateNonWarrantyPurchaseOrderSent);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateNonWarrantyInvoiceReceived()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateNonWarrantyInvoiceReceived);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateNonWarrantyRepairerName()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateNonWarrantyRepairerName);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateNonWarrantyRepairerLoggedDate()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateNonWarrantyRepairerLoggedDate);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateNonWarrantyRepairerReference()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateNonWarrantyRepairerReference);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateNonWarrantyRepairerCompletedDate()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateNonWarrantyRepairerCompletedDate);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateNonWarrantyIsInsuranceClaim()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateNonWarrantyIsInsuranceClaim);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateInsuranceLossOrDamageDate()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceLossOrDamageDate);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateInsuranceEventLocation()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceEventLocation);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateInsuranceDescription()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceDescription);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateInsuranceThirdPartyCaused()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceThirdPartyCaused);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateInsuranceThirdPartyCausedName()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceThirdPartyCausedName);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateInsuranceThirdPartyCausedWhy()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceThirdPartyCausedWhy);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateInsuranceWitnessesNamesAddresses()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceWitnessesNamesAddresses);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateInsuranceBurglaryTheftMethodOfEntry()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceBurglaryTheftMethodOfEntry);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateInsurancePropertyLastSeenDate()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsurancePropertyLastSeenDate);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateInsurancePoliceNotified()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsurancePoliceNotified);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateInsurancePoliceNotifiedStation()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsurancePoliceNotifiedStation);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateInsurancePoliceNotifiedDate()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsurancePoliceNotifiedDate);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateInsurancePoliceNotifiedCrimeReportNo()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsurancePoliceNotifiedCrimeReportNo);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateInsuranceRecoverReduceAction()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceRecoverReduceAction);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateInsuranceOtherInterestedParties()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceOtherInterestedParties);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateInsuranceDateOfPurchase()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceDateOfPurchase);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateInsuranceClaimFormSentDate()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceClaimFormSentDate);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateInsuranceClaimFormSentUserId()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceClaimFormSentUserId);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateWarrantyExternalName()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateWarrantyExternalName);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateWarrantyExternalLoggedDate()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateWarrantyExternalLoggedDate);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateWarrantyExternalReference()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateWarrantyExternalReference);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateWarrantyExternalCompletedDate()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateWarrantyExternalCompletedDate);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateSubTypes()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateSubTypes);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateFlag()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateFlag);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult WaitingForUserAction()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.WaitingForUserAction);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult NotWaitingForUserAction()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.NotWaitingForUserAction);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult LogRepair()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LogRepair);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult DeviceReadyForReturn()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeviceReadyForReturn);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult DeviceHeld()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeviceHeld);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult DeviceReturned()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeviceReturned);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ForceClose()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ForceClose);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Close()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Close);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Reopen()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Reopen);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Delete()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Delete);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ConvertHWarToHNWar()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ConvertHWarToHNWar);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Comments()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Comments);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Comment()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Comment);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult CommentPost()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CommentPost);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult CommentRemove()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CommentRemove);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AttachmentDownload()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AttachmentDownload);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AttachmentThumbnail()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AttachmentThumbnail);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AttachmentUpload()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AttachmentUpload);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Attachment()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Attachment);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Attachments()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Attachments);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AttachmentRemove()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AttachmentRemove);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ComponentAdd()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ComponentAdd);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ComponentUpdate()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ComponentUpdate);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ComponentRemove()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ComponentRemove);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult GeneratePdf()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GeneratePdf);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public JobController Actions { get { return MVC.API.Job; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "API";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Job";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Job";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Update = "Update";
            public readonly string UpdateExpectedClosedDate = "UpdateExpectedClosedDate";
            public readonly string UpdateDeviceHeldLocation = "UpdateDeviceHeldLocation";
            public readonly string UpdateFlags = "UpdateFlags";
            public readonly string UpdateNonWarrantyAccountingChargeRequired = "UpdateNonWarrantyAccountingChargeRequired";
            public readonly string UpdateNonWarrantyAccountingChargeAdded = "UpdateNonWarrantyAccountingChargeAdded";
            public readonly string UpdateNonWarrantyAccountingChargePaid = "UpdateNonWarrantyAccountingChargePaid";
            public readonly string UpdateNonWarrantyPurchaseOrderRaised = "UpdateNonWarrantyPurchaseOrderRaised";
            public readonly string UpdateNonWarrantyPurchaseOrderReference = "UpdateNonWarrantyPurchaseOrderReference";
            public readonly string UpdateNonWarrantyPurchaseOrderSent = "UpdateNonWarrantyPurchaseOrderSent";
            public readonly string UpdateNonWarrantyInvoiceReceived = "UpdateNonWarrantyInvoiceReceived";
            public readonly string UpdateNonWarrantyRepairerName = "UpdateNonWarrantyRepairerName";
            public readonly string UpdateNonWarrantyRepairerLoggedDate = "UpdateNonWarrantyRepairerLoggedDate";
            public readonly string UpdateNonWarrantyRepairerReference = "UpdateNonWarrantyRepairerReference";
            public readonly string UpdateNonWarrantyRepairerCompletedDate = "UpdateNonWarrantyRepairerCompletedDate";
            public readonly string UpdateNonWarrantyIsInsuranceClaim = "UpdateNonWarrantyIsInsuranceClaim";
            public readonly string UpdateInsuranceLossOrDamageDate = "UpdateInsuranceLossOrDamageDate";
            public readonly string UpdateInsuranceEventLocation = "UpdateInsuranceEventLocation";
            public readonly string UpdateInsuranceDescription = "UpdateInsuranceDescription";
            public readonly string UpdateInsuranceThirdPartyCaused = "UpdateInsuranceThirdPartyCaused";
            public readonly string UpdateInsuranceThirdPartyCausedName = "UpdateInsuranceThirdPartyCausedName";
            public readonly string UpdateInsuranceThirdPartyCausedWhy = "UpdateInsuranceThirdPartyCausedWhy";
            public readonly string UpdateInsuranceWitnessesNamesAddresses = "UpdateInsuranceWitnessesNamesAddresses";
            public readonly string UpdateInsuranceBurglaryTheftMethodOfEntry = "UpdateInsuranceBurglaryTheftMethodOfEntry";
            public readonly string UpdateInsurancePropertyLastSeenDate = "UpdateInsurancePropertyLastSeenDate";
            public readonly string UpdateInsurancePoliceNotified = "UpdateInsurancePoliceNotified";
            public readonly string UpdateInsurancePoliceNotifiedStation = "UpdateInsurancePoliceNotifiedStation";
            public readonly string UpdateInsurancePoliceNotifiedDate = "UpdateInsurancePoliceNotifiedDate";
            public readonly string UpdateInsurancePoliceNotifiedCrimeReportNo = "UpdateInsurancePoliceNotifiedCrimeReportNo";
            public readonly string UpdateInsuranceRecoverReduceAction = "UpdateInsuranceRecoverReduceAction";
            public readonly string UpdateInsuranceOtherInterestedParties = "UpdateInsuranceOtherInterestedParties";
            public readonly string UpdateInsuranceDateOfPurchase = "UpdateInsuranceDateOfPurchase";
            public readonly string UpdateInsuranceClaimFormSentDate = "UpdateInsuranceClaimFormSentDate";
            public readonly string UpdateInsuranceClaimFormSentUserId = "UpdateInsuranceClaimFormSentUserId";
            public readonly string UpdateWarrantyExternalName = "UpdateWarrantyExternalName";
            public readonly string UpdateWarrantyExternalLoggedDate = "UpdateWarrantyExternalLoggedDate";
            public readonly string UpdateWarrantyExternalReference = "UpdateWarrantyExternalReference";
            public readonly string UpdateWarrantyExternalCompletedDate = "UpdateWarrantyExternalCompletedDate";
            public readonly string UpdateSubTypes = "UpdateSubTypes";
            public readonly string UpdateFlag = "UpdateFlag";
            public readonly string WaitingForUserAction = "WaitingForUserAction";
            public readonly string NotWaitingForUserAction = "NotWaitingForUserAction";
            public readonly string LogRepair = "LogRepair";
            public readonly string DeviceReadyForReturn = "DeviceReadyForReturn";
            public readonly string DeviceHeld = "DeviceHeld";
            public readonly string DeviceReturned = "DeviceReturned";
            public readonly string ForceClose = "ForceClose";
            public readonly string Close = "Close";
            public readonly string Reopen = "Reopen";
            public readonly string Delete = "Delete";
            public readonly string ConvertHWarToHNWar = "ConvertHWarToHNWar";
            public readonly string Comments = "Comments";
            public readonly string Comment = "Comment";
            public readonly string CommentPost = "CommentPost";
            public readonly string CommentRemove = "CommentRemove";
            public readonly string AttachmentDownload = "AttachmentDownload";
            public readonly string AttachmentThumbnail = "AttachmentThumbnail";
            public readonly string AttachmentUpload = "AttachmentUpload";
            public readonly string Attachment = "Attachment";
            public readonly string Attachments = "Attachments";
            public readonly string AttachmentRemove = "AttachmentRemove";
            public readonly string ComponentAdd = "ComponentAdd";
            public readonly string ComponentUpdate = "ComponentUpdate";
            public readonly string ComponentRemove = "ComponentRemove";
            public readonly string StatisticsDailyOpenedClosed = "StatisticsDailyOpenedClosed";
            public readonly string GeneratePdf = "GeneratePdf";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Update = "Update";
            public const string UpdateExpectedClosedDate = "UpdateExpectedClosedDate";
            public const string UpdateDeviceHeldLocation = "UpdateDeviceHeldLocation";
            public const string UpdateFlags = "UpdateFlags";
            public const string UpdateNonWarrantyAccountingChargeRequired = "UpdateNonWarrantyAccountingChargeRequired";
            public const string UpdateNonWarrantyAccountingChargeAdded = "UpdateNonWarrantyAccountingChargeAdded";
            public const string UpdateNonWarrantyAccountingChargePaid = "UpdateNonWarrantyAccountingChargePaid";
            public const string UpdateNonWarrantyPurchaseOrderRaised = "UpdateNonWarrantyPurchaseOrderRaised";
            public const string UpdateNonWarrantyPurchaseOrderReference = "UpdateNonWarrantyPurchaseOrderReference";
            public const string UpdateNonWarrantyPurchaseOrderSent = "UpdateNonWarrantyPurchaseOrderSent";
            public const string UpdateNonWarrantyInvoiceReceived = "UpdateNonWarrantyInvoiceReceived";
            public const string UpdateNonWarrantyRepairerName = "UpdateNonWarrantyRepairerName";
            public const string UpdateNonWarrantyRepairerLoggedDate = "UpdateNonWarrantyRepairerLoggedDate";
            public const string UpdateNonWarrantyRepairerReference = "UpdateNonWarrantyRepairerReference";
            public const string UpdateNonWarrantyRepairerCompletedDate = "UpdateNonWarrantyRepairerCompletedDate";
            public const string UpdateNonWarrantyIsInsuranceClaim = "UpdateNonWarrantyIsInsuranceClaim";
            public const string UpdateInsuranceLossOrDamageDate = "UpdateInsuranceLossOrDamageDate";
            public const string UpdateInsuranceEventLocation = "UpdateInsuranceEventLocation";
            public const string UpdateInsuranceDescription = "UpdateInsuranceDescription";
            public const string UpdateInsuranceThirdPartyCaused = "UpdateInsuranceThirdPartyCaused";
            public const string UpdateInsuranceThirdPartyCausedName = "UpdateInsuranceThirdPartyCausedName";
            public const string UpdateInsuranceThirdPartyCausedWhy = "UpdateInsuranceThirdPartyCausedWhy";
            public const string UpdateInsuranceWitnessesNamesAddresses = "UpdateInsuranceWitnessesNamesAddresses";
            public const string UpdateInsuranceBurglaryTheftMethodOfEntry = "UpdateInsuranceBurglaryTheftMethodOfEntry";
            public const string UpdateInsurancePropertyLastSeenDate = "UpdateInsurancePropertyLastSeenDate";
            public const string UpdateInsurancePoliceNotified = "UpdateInsurancePoliceNotified";
            public const string UpdateInsurancePoliceNotifiedStation = "UpdateInsurancePoliceNotifiedStation";
            public const string UpdateInsurancePoliceNotifiedDate = "UpdateInsurancePoliceNotifiedDate";
            public const string UpdateInsurancePoliceNotifiedCrimeReportNo = "UpdateInsurancePoliceNotifiedCrimeReportNo";
            public const string UpdateInsuranceRecoverReduceAction = "UpdateInsuranceRecoverReduceAction";
            public const string UpdateInsuranceOtherInterestedParties = "UpdateInsuranceOtherInterestedParties";
            public const string UpdateInsuranceDateOfPurchase = "UpdateInsuranceDateOfPurchase";
            public const string UpdateInsuranceClaimFormSentDate = "UpdateInsuranceClaimFormSentDate";
            public const string UpdateInsuranceClaimFormSentUserId = "UpdateInsuranceClaimFormSentUserId";
            public const string UpdateWarrantyExternalName = "UpdateWarrantyExternalName";
            public const string UpdateWarrantyExternalLoggedDate = "UpdateWarrantyExternalLoggedDate";
            public const string UpdateWarrantyExternalReference = "UpdateWarrantyExternalReference";
            public const string UpdateWarrantyExternalCompletedDate = "UpdateWarrantyExternalCompletedDate";
            public const string UpdateSubTypes = "UpdateSubTypes";
            public const string UpdateFlag = "UpdateFlag";
            public const string WaitingForUserAction = "WaitingForUserAction";
            public const string NotWaitingForUserAction = "NotWaitingForUserAction";
            public const string LogRepair = "LogRepair";
            public const string DeviceReadyForReturn = "DeviceReadyForReturn";
            public const string DeviceHeld = "DeviceHeld";
            public const string DeviceReturned = "DeviceReturned";
            public const string ForceClose = "ForceClose";
            public const string Close = "Close";
            public const string Reopen = "Reopen";
            public const string Delete = "Delete";
            public const string ConvertHWarToHNWar = "ConvertHWarToHNWar";
            public const string Comments = "Comments";
            public const string Comment = "Comment";
            public const string CommentPost = "CommentPost";
            public const string CommentRemove = "CommentRemove";
            public const string AttachmentDownload = "AttachmentDownload";
            public const string AttachmentThumbnail = "AttachmentThumbnail";
            public const string AttachmentUpload = "AttachmentUpload";
            public const string Attachment = "Attachment";
            public const string Attachments = "Attachments";
            public const string AttachmentRemove = "AttachmentRemove";
            public const string ComponentAdd = "ComponentAdd";
            public const string ComponentUpdate = "ComponentUpdate";
            public const string ComponentRemove = "ComponentRemove";
            public const string StatisticsDailyOpenedClosed = "StatisticsDailyOpenedClosed";
            public const string GeneratePdf = "GeneratePdf";
        }


        static readonly ActionParamsClass_Update s_params_Update = new ActionParamsClass_Update();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Update UpdateParams { get { return s_params_Update; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Update
        {
            public readonly string id = "id";
            public readonly string key = "key";
            public readonly string value = "value";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateExpectedClosedDate s_params_UpdateExpectedClosedDate = new ActionParamsClass_UpdateExpectedClosedDate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateExpectedClosedDate UpdateExpectedClosedDateParams { get { return s_params_UpdateExpectedClosedDate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateExpectedClosedDate
        {
            public readonly string id = "id";
            public readonly string ExpectedClosedDate = "ExpectedClosedDate";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateDeviceHeldLocation s_params_UpdateDeviceHeldLocation = new ActionParamsClass_UpdateDeviceHeldLocation();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateDeviceHeldLocation UpdateDeviceHeldLocationParams { get { return s_params_UpdateDeviceHeldLocation; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateDeviceHeldLocation
        {
            public readonly string id = "id";
            public readonly string DeviceHeldLocation = "DeviceHeldLocation";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateFlags s_params_UpdateFlags = new ActionParamsClass_UpdateFlags();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateFlags UpdateFlagsParams { get { return s_params_UpdateFlags; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateFlags
        {
            public readonly string id = "id";
            public readonly string Flags = "Flags";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateNonWarrantyAccountingChargeRequired s_params_UpdateNonWarrantyAccountingChargeRequired = new ActionParamsClass_UpdateNonWarrantyAccountingChargeRequired();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateNonWarrantyAccountingChargeRequired UpdateNonWarrantyAccountingChargeRequiredParams { get { return s_params_UpdateNonWarrantyAccountingChargeRequired; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateNonWarrantyAccountingChargeRequired
        {
            public readonly string id = "id";
            public readonly string AccountingChargeRequiredDate = "AccountingChargeRequiredDate";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateNonWarrantyAccountingChargeAdded s_params_UpdateNonWarrantyAccountingChargeAdded = new ActionParamsClass_UpdateNonWarrantyAccountingChargeAdded();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateNonWarrantyAccountingChargeAdded UpdateNonWarrantyAccountingChargeAddedParams { get { return s_params_UpdateNonWarrantyAccountingChargeAdded; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateNonWarrantyAccountingChargeAdded
        {
            public readonly string id = "id";
            public readonly string AccountingChargeAddedDate = "AccountingChargeAddedDate";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateNonWarrantyAccountingChargePaid s_params_UpdateNonWarrantyAccountingChargePaid = new ActionParamsClass_UpdateNonWarrantyAccountingChargePaid();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateNonWarrantyAccountingChargePaid UpdateNonWarrantyAccountingChargePaidParams { get { return s_params_UpdateNonWarrantyAccountingChargePaid; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateNonWarrantyAccountingChargePaid
        {
            public readonly string id = "id";
            public readonly string AccountingChargePaidDate = "AccountingChargePaidDate";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateNonWarrantyPurchaseOrderRaised s_params_UpdateNonWarrantyPurchaseOrderRaised = new ActionParamsClass_UpdateNonWarrantyPurchaseOrderRaised();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateNonWarrantyPurchaseOrderRaised UpdateNonWarrantyPurchaseOrderRaisedParams { get { return s_params_UpdateNonWarrantyPurchaseOrderRaised; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateNonWarrantyPurchaseOrderRaised
        {
            public readonly string id = "id";
            public readonly string PurchaseOrderRaisedDate = "PurchaseOrderRaisedDate";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateNonWarrantyPurchaseOrderReference s_params_UpdateNonWarrantyPurchaseOrderReference = new ActionParamsClass_UpdateNonWarrantyPurchaseOrderReference();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateNonWarrantyPurchaseOrderReference UpdateNonWarrantyPurchaseOrderReferenceParams { get { return s_params_UpdateNonWarrantyPurchaseOrderReference; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateNonWarrantyPurchaseOrderReference
        {
            public readonly string id = "id";
            public readonly string PurchaseOrderReference = "PurchaseOrderReference";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateNonWarrantyPurchaseOrderSent s_params_UpdateNonWarrantyPurchaseOrderSent = new ActionParamsClass_UpdateNonWarrantyPurchaseOrderSent();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateNonWarrantyPurchaseOrderSent UpdateNonWarrantyPurchaseOrderSentParams { get { return s_params_UpdateNonWarrantyPurchaseOrderSent; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateNonWarrantyPurchaseOrderSent
        {
            public readonly string id = "id";
            public readonly string PurchaseOrderSentDate = "PurchaseOrderSentDate";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateNonWarrantyInvoiceReceived s_params_UpdateNonWarrantyInvoiceReceived = new ActionParamsClass_UpdateNonWarrantyInvoiceReceived();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateNonWarrantyInvoiceReceived UpdateNonWarrantyInvoiceReceivedParams { get { return s_params_UpdateNonWarrantyInvoiceReceived; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateNonWarrantyInvoiceReceived
        {
            public readonly string id = "id";
            public readonly string InvoiceReceivedDate = "InvoiceReceivedDate";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateNonWarrantyRepairerName s_params_UpdateNonWarrantyRepairerName = new ActionParamsClass_UpdateNonWarrantyRepairerName();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateNonWarrantyRepairerName UpdateNonWarrantyRepairerNameParams { get { return s_params_UpdateNonWarrantyRepairerName; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateNonWarrantyRepairerName
        {
            public readonly string id = "id";
            public readonly string RepairerName = "RepairerName";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateNonWarrantyRepairerLoggedDate s_params_UpdateNonWarrantyRepairerLoggedDate = new ActionParamsClass_UpdateNonWarrantyRepairerLoggedDate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateNonWarrantyRepairerLoggedDate UpdateNonWarrantyRepairerLoggedDateParams { get { return s_params_UpdateNonWarrantyRepairerLoggedDate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateNonWarrantyRepairerLoggedDate
        {
            public readonly string id = "id";
            public readonly string RepairerLoggedDate = "RepairerLoggedDate";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateNonWarrantyRepairerReference s_params_UpdateNonWarrantyRepairerReference = new ActionParamsClass_UpdateNonWarrantyRepairerReference();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateNonWarrantyRepairerReference UpdateNonWarrantyRepairerReferenceParams { get { return s_params_UpdateNonWarrantyRepairerReference; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateNonWarrantyRepairerReference
        {
            public readonly string id = "id";
            public readonly string RepairerReference = "RepairerReference";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateNonWarrantyRepairerCompletedDate s_params_UpdateNonWarrantyRepairerCompletedDate = new ActionParamsClass_UpdateNonWarrantyRepairerCompletedDate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateNonWarrantyRepairerCompletedDate UpdateNonWarrantyRepairerCompletedDateParams { get { return s_params_UpdateNonWarrantyRepairerCompletedDate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateNonWarrantyRepairerCompletedDate
        {
            public readonly string id = "id";
            public readonly string RepairerCompletedDate = "RepairerCompletedDate";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateNonWarrantyIsInsuranceClaim s_params_UpdateNonWarrantyIsInsuranceClaim = new ActionParamsClass_UpdateNonWarrantyIsInsuranceClaim();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateNonWarrantyIsInsuranceClaim UpdateNonWarrantyIsInsuranceClaimParams { get { return s_params_UpdateNonWarrantyIsInsuranceClaim; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateNonWarrantyIsInsuranceClaim
        {
            public readonly string id = "id";
            public readonly string IsInsuranceClaim = "IsInsuranceClaim";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateInsuranceLossOrDamageDate s_params_UpdateInsuranceLossOrDamageDate = new ActionParamsClass_UpdateInsuranceLossOrDamageDate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateInsuranceLossOrDamageDate UpdateInsuranceLossOrDamageDateParams { get { return s_params_UpdateInsuranceLossOrDamageDate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateInsuranceLossOrDamageDate
        {
            public readonly string id = "id";
            public readonly string LossOrDamageDate = "LossOrDamageDate";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateInsuranceEventLocation s_params_UpdateInsuranceEventLocation = new ActionParamsClass_UpdateInsuranceEventLocation();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateInsuranceEventLocation UpdateInsuranceEventLocationParams { get { return s_params_UpdateInsuranceEventLocation; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateInsuranceEventLocation
        {
            public readonly string id = "id";
            public readonly string EventLocation = "EventLocation";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateInsuranceDescription s_params_UpdateInsuranceDescription = new ActionParamsClass_UpdateInsuranceDescription();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateInsuranceDescription UpdateInsuranceDescriptionParams { get { return s_params_UpdateInsuranceDescription; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateInsuranceDescription
        {
            public readonly string id = "id";
            public readonly string Description = "Description";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateInsuranceThirdPartyCaused s_params_UpdateInsuranceThirdPartyCaused = new ActionParamsClass_UpdateInsuranceThirdPartyCaused();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateInsuranceThirdPartyCaused UpdateInsuranceThirdPartyCausedParams { get { return s_params_UpdateInsuranceThirdPartyCaused; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateInsuranceThirdPartyCaused
        {
            public readonly string id = "id";
            public readonly string ThirdPartyCaused = "ThirdPartyCaused";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateInsuranceThirdPartyCausedName s_params_UpdateInsuranceThirdPartyCausedName = new ActionParamsClass_UpdateInsuranceThirdPartyCausedName();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateInsuranceThirdPartyCausedName UpdateInsuranceThirdPartyCausedNameParams { get { return s_params_UpdateInsuranceThirdPartyCausedName; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateInsuranceThirdPartyCausedName
        {
            public readonly string id = "id";
            public readonly string ThirdPartyCausedName = "ThirdPartyCausedName";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateInsuranceThirdPartyCausedWhy s_params_UpdateInsuranceThirdPartyCausedWhy = new ActionParamsClass_UpdateInsuranceThirdPartyCausedWhy();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateInsuranceThirdPartyCausedWhy UpdateInsuranceThirdPartyCausedWhyParams { get { return s_params_UpdateInsuranceThirdPartyCausedWhy; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateInsuranceThirdPartyCausedWhy
        {
            public readonly string id = "id";
            public readonly string ThirdPartyCausedWhy = "ThirdPartyCausedWhy";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateInsuranceWitnessesNamesAddresses s_params_UpdateInsuranceWitnessesNamesAddresses = new ActionParamsClass_UpdateInsuranceWitnessesNamesAddresses();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateInsuranceWitnessesNamesAddresses UpdateInsuranceWitnessesNamesAddressesParams { get { return s_params_UpdateInsuranceWitnessesNamesAddresses; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateInsuranceWitnessesNamesAddresses
        {
            public readonly string id = "id";
            public readonly string WitnessesNamesAddresses = "WitnessesNamesAddresses";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateInsuranceBurglaryTheftMethodOfEntry s_params_UpdateInsuranceBurglaryTheftMethodOfEntry = new ActionParamsClass_UpdateInsuranceBurglaryTheftMethodOfEntry();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateInsuranceBurglaryTheftMethodOfEntry UpdateInsuranceBurglaryTheftMethodOfEntryParams { get { return s_params_UpdateInsuranceBurglaryTheftMethodOfEntry; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateInsuranceBurglaryTheftMethodOfEntry
        {
            public readonly string id = "id";
            public readonly string BurglaryTheftMethodOfEntry = "BurglaryTheftMethodOfEntry";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateInsurancePropertyLastSeenDate s_params_UpdateInsurancePropertyLastSeenDate = new ActionParamsClass_UpdateInsurancePropertyLastSeenDate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateInsurancePropertyLastSeenDate UpdateInsurancePropertyLastSeenDateParams { get { return s_params_UpdateInsurancePropertyLastSeenDate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateInsurancePropertyLastSeenDate
        {
            public readonly string id = "id";
            public readonly string PropertyLastSeenDate = "PropertyLastSeenDate";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateInsurancePoliceNotified s_params_UpdateInsurancePoliceNotified = new ActionParamsClass_UpdateInsurancePoliceNotified();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateInsurancePoliceNotified UpdateInsurancePoliceNotifiedParams { get { return s_params_UpdateInsurancePoliceNotified; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateInsurancePoliceNotified
        {
            public readonly string id = "id";
            public readonly string PoliceNotified = "PoliceNotified";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateInsurancePoliceNotifiedStation s_params_UpdateInsurancePoliceNotifiedStation = new ActionParamsClass_UpdateInsurancePoliceNotifiedStation();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateInsurancePoliceNotifiedStation UpdateInsurancePoliceNotifiedStationParams { get { return s_params_UpdateInsurancePoliceNotifiedStation; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateInsurancePoliceNotifiedStation
        {
            public readonly string id = "id";
            public readonly string PoliceNotifiedStation = "PoliceNotifiedStation";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateInsurancePoliceNotifiedDate s_params_UpdateInsurancePoliceNotifiedDate = new ActionParamsClass_UpdateInsurancePoliceNotifiedDate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateInsurancePoliceNotifiedDate UpdateInsurancePoliceNotifiedDateParams { get { return s_params_UpdateInsurancePoliceNotifiedDate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateInsurancePoliceNotifiedDate
        {
            public readonly string id = "id";
            public readonly string PoliceNotifiedDate = "PoliceNotifiedDate";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateInsurancePoliceNotifiedCrimeReportNo s_params_UpdateInsurancePoliceNotifiedCrimeReportNo = new ActionParamsClass_UpdateInsurancePoliceNotifiedCrimeReportNo();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateInsurancePoliceNotifiedCrimeReportNo UpdateInsurancePoliceNotifiedCrimeReportNoParams { get { return s_params_UpdateInsurancePoliceNotifiedCrimeReportNo; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateInsurancePoliceNotifiedCrimeReportNo
        {
            public readonly string id = "id";
            public readonly string PoliceNotifiedCrimeReportNo = "PoliceNotifiedCrimeReportNo";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateInsuranceRecoverReduceAction s_params_UpdateInsuranceRecoverReduceAction = new ActionParamsClass_UpdateInsuranceRecoverReduceAction();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateInsuranceRecoverReduceAction UpdateInsuranceRecoverReduceActionParams { get { return s_params_UpdateInsuranceRecoverReduceAction; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateInsuranceRecoverReduceAction
        {
            public readonly string id = "id";
            public readonly string RecoverReduceAction = "RecoverReduceAction";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateInsuranceOtherInterestedParties s_params_UpdateInsuranceOtherInterestedParties = new ActionParamsClass_UpdateInsuranceOtherInterestedParties();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateInsuranceOtherInterestedParties UpdateInsuranceOtherInterestedPartiesParams { get { return s_params_UpdateInsuranceOtherInterestedParties; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateInsuranceOtherInterestedParties
        {
            public readonly string id = "id";
            public readonly string OtherInterestedParties = "OtherInterestedParties";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateInsuranceDateOfPurchase s_params_UpdateInsuranceDateOfPurchase = new ActionParamsClass_UpdateInsuranceDateOfPurchase();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateInsuranceDateOfPurchase UpdateInsuranceDateOfPurchaseParams { get { return s_params_UpdateInsuranceDateOfPurchase; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateInsuranceDateOfPurchase
        {
            public readonly string id = "id";
            public readonly string DateOfPurchase = "DateOfPurchase";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateInsuranceClaimFormSentDate s_params_UpdateInsuranceClaimFormSentDate = new ActionParamsClass_UpdateInsuranceClaimFormSentDate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateInsuranceClaimFormSentDate UpdateInsuranceClaimFormSentDateParams { get { return s_params_UpdateInsuranceClaimFormSentDate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateInsuranceClaimFormSentDate
        {
            public readonly string id = "id";
            public readonly string ClaimFormSentDate = "ClaimFormSentDate";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateInsuranceClaimFormSentUserId s_params_UpdateInsuranceClaimFormSentUserId = new ActionParamsClass_UpdateInsuranceClaimFormSentUserId();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateInsuranceClaimFormSentUserId UpdateInsuranceClaimFormSentUserIdParams { get { return s_params_UpdateInsuranceClaimFormSentUserId; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateInsuranceClaimFormSentUserId
        {
            public readonly string id = "id";
            public readonly string ClaimFormSentUserId = "ClaimFormSentUserId";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateWarrantyExternalName s_params_UpdateWarrantyExternalName = new ActionParamsClass_UpdateWarrantyExternalName();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateWarrantyExternalName UpdateWarrantyExternalNameParams { get { return s_params_UpdateWarrantyExternalName; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateWarrantyExternalName
        {
            public readonly string id = "id";
            public readonly string ExternalName = "ExternalName";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateWarrantyExternalLoggedDate s_params_UpdateWarrantyExternalLoggedDate = new ActionParamsClass_UpdateWarrantyExternalLoggedDate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateWarrantyExternalLoggedDate UpdateWarrantyExternalLoggedDateParams { get { return s_params_UpdateWarrantyExternalLoggedDate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateWarrantyExternalLoggedDate
        {
            public readonly string id = "id";
            public readonly string ExternalLoggedDate = "ExternalLoggedDate";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateWarrantyExternalReference s_params_UpdateWarrantyExternalReference = new ActionParamsClass_UpdateWarrantyExternalReference();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateWarrantyExternalReference UpdateWarrantyExternalReferenceParams { get { return s_params_UpdateWarrantyExternalReference; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateWarrantyExternalReference
        {
            public readonly string id = "id";
            public readonly string ExternalReference = "ExternalReference";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateWarrantyExternalCompletedDate s_params_UpdateWarrantyExternalCompletedDate = new ActionParamsClass_UpdateWarrantyExternalCompletedDate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateWarrantyExternalCompletedDate UpdateWarrantyExternalCompletedDateParams { get { return s_params_UpdateWarrantyExternalCompletedDate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateWarrantyExternalCompletedDate
        {
            public readonly string id = "id";
            public readonly string ExternalCompletedDate = "ExternalCompletedDate";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateSubTypes s_params_UpdateSubTypes = new ActionParamsClass_UpdateSubTypes();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateSubTypes UpdateSubTypesParams { get { return s_params_UpdateSubTypes; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateSubTypes
        {
            public readonly string id = "id";
            public readonly string SubTypes = "SubTypes";
            public readonly string AddComponents = "AddComponents";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateFlag s_params_UpdateFlag = new ActionParamsClass_UpdateFlag();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateFlag UpdateFlagParams { get { return s_params_UpdateFlag; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateFlag
        {
            public readonly string id = "id";
            public readonly string Flag = "Flag";
            public readonly string Reason = "Reason";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_WaitingForUserAction s_params_WaitingForUserAction = new ActionParamsClass_WaitingForUserAction();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_WaitingForUserAction WaitingForUserActionParams { get { return s_params_WaitingForUserAction; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_WaitingForUserAction
        {
            public readonly string id = "id";
            public readonly string Reason = "Reason";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_NotWaitingForUserAction s_params_NotWaitingForUserAction = new ActionParamsClass_NotWaitingForUserAction();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_NotWaitingForUserAction NotWaitingForUserActionParams { get { return s_params_NotWaitingForUserAction; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_NotWaitingForUserAction
        {
            public readonly string id = "id";
            public readonly string Resolution = "Resolution";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_LogRepair s_params_LogRepair = new ActionParamsClass_LogRepair();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_LogRepair LogRepairParams { get { return s_params_LogRepair; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_LogRepair
        {
            public readonly string id = "id";
            public readonly string RepairerName = "RepairerName";
            public readonly string RepairerReference = "RepairerReference";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_DeviceReadyForReturn s_params_DeviceReadyForReturn = new ActionParamsClass_DeviceReadyForReturn();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeviceReadyForReturn DeviceReadyForReturnParams { get { return s_params_DeviceReadyForReturn; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeviceReadyForReturn
        {
            public readonly string id = "id";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_DeviceHeld s_params_DeviceHeld = new ActionParamsClass_DeviceHeld();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeviceHeld DeviceHeldParams { get { return s_params_DeviceHeld; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeviceHeld
        {
            public readonly string id = "id";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_DeviceReturned s_params_DeviceReturned = new ActionParamsClass_DeviceReturned();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeviceReturned DeviceReturnedParams { get { return s_params_DeviceReturned; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeviceReturned
        {
            public readonly string id = "id";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_ForceClose s_params_ForceClose = new ActionParamsClass_ForceClose();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ForceClose ForceCloseParams { get { return s_params_ForceClose; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ForceClose
        {
            public readonly string id = "id";
            public readonly string Reason = "Reason";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_Close s_params_Close = new ActionParamsClass_Close();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Close CloseParams { get { return s_params_Close; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Close
        {
            public readonly string id = "id";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_Reopen s_params_Reopen = new ActionParamsClass_Reopen();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Reopen ReopenParams { get { return s_params_Reopen; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Reopen
        {
            public readonly string id = "id";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_Delete s_params_Delete = new ActionParamsClass_Delete();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Delete DeleteParams { get { return s_params_Delete; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Delete
        {
            public readonly string id = "id";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_ConvertHWarToHNWar s_params_ConvertHWarToHNWar = new ActionParamsClass_ConvertHWarToHNWar();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ConvertHWarToHNWar ConvertHWarToHNWarParams { get { return s_params_ConvertHWarToHNWar; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ConvertHWarToHNWar
        {
            public readonly string id = "id";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_Comments s_params_Comments = new ActionParamsClass_Comments();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Comments CommentsParams { get { return s_params_Comments; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Comments
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_Comment s_params_Comment = new ActionParamsClass_Comment();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Comment CommentParams { get { return s_params_Comment; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Comment
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_CommentPost s_params_CommentPost = new ActionParamsClass_CommentPost();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CommentPost CommentPostParams { get { return s_params_CommentPost; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CommentPost
        {
            public readonly string id = "id";
            public readonly string comment = "comment";
        }
        static readonly ActionParamsClass_CommentRemove s_params_CommentRemove = new ActionParamsClass_CommentRemove();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CommentRemove CommentRemoveParams { get { return s_params_CommentRemove; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CommentRemove
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_AttachmentDownload s_params_AttachmentDownload = new ActionParamsClass_AttachmentDownload();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AttachmentDownload AttachmentDownloadParams { get { return s_params_AttachmentDownload; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AttachmentDownload
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_AttachmentThumbnail s_params_AttachmentThumbnail = new ActionParamsClass_AttachmentThumbnail();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AttachmentThumbnail AttachmentThumbnailParams { get { return s_params_AttachmentThumbnail; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AttachmentThumbnail
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_AttachmentUpload s_params_AttachmentUpload = new ActionParamsClass_AttachmentUpload();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AttachmentUpload AttachmentUploadParams { get { return s_params_AttachmentUpload; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AttachmentUpload
        {
            public readonly string id = "id";
            public readonly string Comments = "Comments";
        }
        static readonly ActionParamsClass_Attachment s_params_Attachment = new ActionParamsClass_Attachment();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Attachment AttachmentParams { get { return s_params_Attachment; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Attachment
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_Attachments s_params_Attachments = new ActionParamsClass_Attachments();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Attachments AttachmentsParams { get { return s_params_Attachments; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Attachments
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_AttachmentRemove s_params_AttachmentRemove = new ActionParamsClass_AttachmentRemove();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AttachmentRemove AttachmentRemoveParams { get { return s_params_AttachmentRemove; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AttachmentRemove
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_ComponentAdd s_params_ComponentAdd = new ActionParamsClass_ComponentAdd();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ComponentAdd ComponentAddParams { get { return s_params_ComponentAdd; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ComponentAdd
        {
            public readonly string id = "id";
            public readonly string Description = "Description";
            public readonly string Cost = "Cost";
        }
        static readonly ActionParamsClass_ComponentUpdate s_params_ComponentUpdate = new ActionParamsClass_ComponentUpdate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ComponentUpdate ComponentUpdateParams { get { return s_params_ComponentUpdate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ComponentUpdate
        {
            public readonly string id = "id";
            public readonly string Description = "Description";
            public readonly string Cost = "Cost";
        }
        static readonly ActionParamsClass_ComponentRemove s_params_ComponentRemove = new ActionParamsClass_ComponentRemove();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ComponentRemove ComponentRemoveParams { get { return s_params_ComponentRemove; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ComponentRemove
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_GeneratePdf s_params_GeneratePdf = new ActionParamsClass_GeneratePdf();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GeneratePdf GeneratePdfParams { get { return s_params_GeneratePdf; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GeneratePdf
        {
            public readonly string id = "id";
            public readonly string DocumentTemplateId = "DocumentTemplateId";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_JobController : Disco.Web.Areas.API.Controllers.JobController
    {
        public T4MVC_JobController() : base(Dummy.Instance) { }

        partial void UpdateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string key, string value, bool? redirect);

        public override System.Web.Mvc.ActionResult Update(int id, string key, string value, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Update);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "key", key);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "value", value);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateOverride(callInfo, id, key, value, redirect);
            return callInfo;
        }

        partial void UpdateExpectedClosedDateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string ExpectedClosedDate, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateExpectedClosedDate(int id, string ExpectedClosedDate, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateExpectedClosedDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ExpectedClosedDate", ExpectedClosedDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateExpectedClosedDateOverride(callInfo, id, ExpectedClosedDate, redirect);
            return callInfo;
        }

        partial void UpdateDeviceHeldLocationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string DeviceHeldLocation, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateDeviceHeldLocation(int id, string DeviceHeldLocation, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateDeviceHeldLocation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "DeviceHeldLocation", DeviceHeldLocation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateDeviceHeldLocationOverride(callInfo, id, DeviceHeldLocation, redirect);
            return callInfo;
        }

        partial void UpdateFlagsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string Flags, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateFlags(int id, string Flags, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateFlags);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Flags", Flags);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateFlagsOverride(callInfo, id, Flags, redirect);
            return callInfo;
        }

        partial void UpdateNonWarrantyAccountingChargeRequiredOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string AccountingChargeRequiredDate, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateNonWarrantyAccountingChargeRequired(int id, string AccountingChargeRequiredDate, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateNonWarrantyAccountingChargeRequired);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "AccountingChargeRequiredDate", AccountingChargeRequiredDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateNonWarrantyAccountingChargeRequiredOverride(callInfo, id, AccountingChargeRequiredDate, redirect);
            return callInfo;
        }

        partial void UpdateNonWarrantyAccountingChargeAddedOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string AccountingChargeAddedDate, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateNonWarrantyAccountingChargeAdded(int id, string AccountingChargeAddedDate, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateNonWarrantyAccountingChargeAdded);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "AccountingChargeAddedDate", AccountingChargeAddedDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateNonWarrantyAccountingChargeAddedOverride(callInfo, id, AccountingChargeAddedDate, redirect);
            return callInfo;
        }

        partial void UpdateNonWarrantyAccountingChargePaidOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string AccountingChargePaidDate, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateNonWarrantyAccountingChargePaid(int id, string AccountingChargePaidDate, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateNonWarrantyAccountingChargePaid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "AccountingChargePaidDate", AccountingChargePaidDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateNonWarrantyAccountingChargePaidOverride(callInfo, id, AccountingChargePaidDate, redirect);
            return callInfo;
        }

        partial void UpdateNonWarrantyPurchaseOrderRaisedOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string PurchaseOrderRaisedDate, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateNonWarrantyPurchaseOrderRaised(int id, string PurchaseOrderRaisedDate, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateNonWarrantyPurchaseOrderRaised);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PurchaseOrderRaisedDate", PurchaseOrderRaisedDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateNonWarrantyPurchaseOrderRaisedOverride(callInfo, id, PurchaseOrderRaisedDate, redirect);
            return callInfo;
        }

        partial void UpdateNonWarrantyPurchaseOrderReferenceOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string PurchaseOrderReference, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateNonWarrantyPurchaseOrderReference(int id, string PurchaseOrderReference, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateNonWarrantyPurchaseOrderReference);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PurchaseOrderReference", PurchaseOrderReference);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateNonWarrantyPurchaseOrderReferenceOverride(callInfo, id, PurchaseOrderReference, redirect);
            return callInfo;
        }

        partial void UpdateNonWarrantyPurchaseOrderSentOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string PurchaseOrderSentDate, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateNonWarrantyPurchaseOrderSent(int id, string PurchaseOrderSentDate, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateNonWarrantyPurchaseOrderSent);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PurchaseOrderSentDate", PurchaseOrderSentDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateNonWarrantyPurchaseOrderSentOverride(callInfo, id, PurchaseOrderSentDate, redirect);
            return callInfo;
        }

        partial void UpdateNonWarrantyInvoiceReceivedOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string InvoiceReceivedDate, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateNonWarrantyInvoiceReceived(int id, string InvoiceReceivedDate, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateNonWarrantyInvoiceReceived);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "InvoiceReceivedDate", InvoiceReceivedDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateNonWarrantyInvoiceReceivedOverride(callInfo, id, InvoiceReceivedDate, redirect);
            return callInfo;
        }

        partial void UpdateNonWarrantyRepairerNameOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string RepairerName, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateNonWarrantyRepairerName(int id, string RepairerName, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateNonWarrantyRepairerName);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "RepairerName", RepairerName);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateNonWarrantyRepairerNameOverride(callInfo, id, RepairerName, redirect);
            return callInfo;
        }

        partial void UpdateNonWarrantyRepairerLoggedDateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string RepairerLoggedDate, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateNonWarrantyRepairerLoggedDate(int id, string RepairerLoggedDate, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateNonWarrantyRepairerLoggedDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "RepairerLoggedDate", RepairerLoggedDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateNonWarrantyRepairerLoggedDateOverride(callInfo, id, RepairerLoggedDate, redirect);
            return callInfo;
        }

        partial void UpdateNonWarrantyRepairerReferenceOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string RepairerReference, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateNonWarrantyRepairerReference(int id, string RepairerReference, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateNonWarrantyRepairerReference);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "RepairerReference", RepairerReference);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateNonWarrantyRepairerReferenceOverride(callInfo, id, RepairerReference, redirect);
            return callInfo;
        }

        partial void UpdateNonWarrantyRepairerCompletedDateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string RepairerCompletedDate, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateNonWarrantyRepairerCompletedDate(int id, string RepairerCompletedDate, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateNonWarrantyRepairerCompletedDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "RepairerCompletedDate", RepairerCompletedDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateNonWarrantyRepairerCompletedDateOverride(callInfo, id, RepairerCompletedDate, redirect);
            return callInfo;
        }

        partial void UpdateNonWarrantyIsInsuranceClaimOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, bool IsInsuranceClaim, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateNonWarrantyIsInsuranceClaim(int id, bool IsInsuranceClaim, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateNonWarrantyIsInsuranceClaim);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "IsInsuranceClaim", IsInsuranceClaim);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateNonWarrantyIsInsuranceClaimOverride(callInfo, id, IsInsuranceClaim, redirect);
            return callInfo;
        }

        partial void UpdateInsuranceLossOrDamageDateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string LossOrDamageDate, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateInsuranceLossOrDamageDate(int id, string LossOrDamageDate, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceLossOrDamageDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "LossOrDamageDate", LossOrDamageDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateInsuranceLossOrDamageDateOverride(callInfo, id, LossOrDamageDate, redirect);
            return callInfo;
        }

        partial void UpdateInsuranceEventLocationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string EventLocation, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateInsuranceEventLocation(int id, string EventLocation, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceEventLocation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "EventLocation", EventLocation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateInsuranceEventLocationOverride(callInfo, id, EventLocation, redirect);
            return callInfo;
        }

        partial void UpdateInsuranceDescriptionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string Description, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateInsuranceDescription(int id, string Description, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceDescription);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Description", Description);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateInsuranceDescriptionOverride(callInfo, id, Description, redirect);
            return callInfo;
        }

        partial void UpdateInsuranceThirdPartyCausedOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string ThirdPartyCaused, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateInsuranceThirdPartyCaused(int id, string ThirdPartyCaused, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceThirdPartyCaused);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ThirdPartyCaused", ThirdPartyCaused);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateInsuranceThirdPartyCausedOverride(callInfo, id, ThirdPartyCaused, redirect);
            return callInfo;
        }

        partial void UpdateInsuranceThirdPartyCausedNameOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string ThirdPartyCausedName, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateInsuranceThirdPartyCausedName(int id, string ThirdPartyCausedName, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceThirdPartyCausedName);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ThirdPartyCausedName", ThirdPartyCausedName);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateInsuranceThirdPartyCausedNameOverride(callInfo, id, ThirdPartyCausedName, redirect);
            return callInfo;
        }

        partial void UpdateInsuranceThirdPartyCausedWhyOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string ThirdPartyCausedWhy, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateInsuranceThirdPartyCausedWhy(int id, string ThirdPartyCausedWhy, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceThirdPartyCausedWhy);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ThirdPartyCausedWhy", ThirdPartyCausedWhy);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateInsuranceThirdPartyCausedWhyOverride(callInfo, id, ThirdPartyCausedWhy, redirect);
            return callInfo;
        }

        partial void UpdateInsuranceWitnessesNamesAddressesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string WitnessesNamesAddresses, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateInsuranceWitnessesNamesAddresses(int id, string WitnessesNamesAddresses, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceWitnessesNamesAddresses);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "WitnessesNamesAddresses", WitnessesNamesAddresses);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateInsuranceWitnessesNamesAddressesOverride(callInfo, id, WitnessesNamesAddresses, redirect);
            return callInfo;
        }

        partial void UpdateInsuranceBurglaryTheftMethodOfEntryOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string BurglaryTheftMethodOfEntry, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateInsuranceBurglaryTheftMethodOfEntry(int id, string BurglaryTheftMethodOfEntry, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceBurglaryTheftMethodOfEntry);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "BurglaryTheftMethodOfEntry", BurglaryTheftMethodOfEntry);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateInsuranceBurglaryTheftMethodOfEntryOverride(callInfo, id, BurglaryTheftMethodOfEntry, redirect);
            return callInfo;
        }

        partial void UpdateInsurancePropertyLastSeenDateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string PropertyLastSeenDate, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateInsurancePropertyLastSeenDate(int id, string PropertyLastSeenDate, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsurancePropertyLastSeenDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PropertyLastSeenDate", PropertyLastSeenDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateInsurancePropertyLastSeenDateOverride(callInfo, id, PropertyLastSeenDate, redirect);
            return callInfo;
        }

        partial void UpdateInsurancePoliceNotifiedOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string PoliceNotified, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateInsurancePoliceNotified(int id, string PoliceNotified, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsurancePoliceNotified);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PoliceNotified", PoliceNotified);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateInsurancePoliceNotifiedOverride(callInfo, id, PoliceNotified, redirect);
            return callInfo;
        }

        partial void UpdateInsurancePoliceNotifiedStationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string PoliceNotifiedStation, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateInsurancePoliceNotifiedStation(int id, string PoliceNotifiedStation, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsurancePoliceNotifiedStation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PoliceNotifiedStation", PoliceNotifiedStation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateInsurancePoliceNotifiedStationOverride(callInfo, id, PoliceNotifiedStation, redirect);
            return callInfo;
        }

        partial void UpdateInsurancePoliceNotifiedDateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string PoliceNotifiedDate, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateInsurancePoliceNotifiedDate(int id, string PoliceNotifiedDate, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsurancePoliceNotifiedDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PoliceNotifiedDate", PoliceNotifiedDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateInsurancePoliceNotifiedDateOverride(callInfo, id, PoliceNotifiedDate, redirect);
            return callInfo;
        }

        partial void UpdateInsurancePoliceNotifiedCrimeReportNoOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string PoliceNotifiedCrimeReportNo, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateInsurancePoliceNotifiedCrimeReportNo(int id, string PoliceNotifiedCrimeReportNo, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsurancePoliceNotifiedCrimeReportNo);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PoliceNotifiedCrimeReportNo", PoliceNotifiedCrimeReportNo);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateInsurancePoliceNotifiedCrimeReportNoOverride(callInfo, id, PoliceNotifiedCrimeReportNo, redirect);
            return callInfo;
        }

        partial void UpdateInsuranceRecoverReduceActionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string RecoverReduceAction, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateInsuranceRecoverReduceAction(int id, string RecoverReduceAction, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceRecoverReduceAction);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "RecoverReduceAction", RecoverReduceAction);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateInsuranceRecoverReduceActionOverride(callInfo, id, RecoverReduceAction, redirect);
            return callInfo;
        }

        partial void UpdateInsuranceOtherInterestedPartiesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string OtherInterestedParties, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateInsuranceOtherInterestedParties(int id, string OtherInterestedParties, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceOtherInterestedParties);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "OtherInterestedParties", OtherInterestedParties);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateInsuranceOtherInterestedPartiesOverride(callInfo, id, OtherInterestedParties, redirect);
            return callInfo;
        }

        partial void UpdateInsuranceDateOfPurchaseOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string DateOfPurchase, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateInsuranceDateOfPurchase(int id, string DateOfPurchase, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceDateOfPurchase);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "DateOfPurchase", DateOfPurchase);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateInsuranceDateOfPurchaseOverride(callInfo, id, DateOfPurchase, redirect);
            return callInfo;
        }

        partial void UpdateInsuranceClaimFormSentDateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string ClaimFormSentDate, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateInsuranceClaimFormSentDate(int id, string ClaimFormSentDate, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceClaimFormSentDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ClaimFormSentDate", ClaimFormSentDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateInsuranceClaimFormSentDateOverride(callInfo, id, ClaimFormSentDate, redirect);
            return callInfo;
        }

        partial void UpdateInsuranceClaimFormSentUserIdOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string ClaimFormSentUserId, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateInsuranceClaimFormSentUserId(int id, string ClaimFormSentUserId, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateInsuranceClaimFormSentUserId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ClaimFormSentUserId", ClaimFormSentUserId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateInsuranceClaimFormSentUserIdOverride(callInfo, id, ClaimFormSentUserId, redirect);
            return callInfo;
        }

        partial void UpdateWarrantyExternalNameOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string ExternalName, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateWarrantyExternalName(int id, string ExternalName, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateWarrantyExternalName);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ExternalName", ExternalName);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateWarrantyExternalNameOverride(callInfo, id, ExternalName, redirect);
            return callInfo;
        }

        partial void UpdateWarrantyExternalLoggedDateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string ExternalLoggedDate, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateWarrantyExternalLoggedDate(int id, string ExternalLoggedDate, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateWarrantyExternalLoggedDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ExternalLoggedDate", ExternalLoggedDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateWarrantyExternalLoggedDateOverride(callInfo, id, ExternalLoggedDate, redirect);
            return callInfo;
        }

        partial void UpdateWarrantyExternalReferenceOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string ExternalReference, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateWarrantyExternalReference(int id, string ExternalReference, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateWarrantyExternalReference);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ExternalReference", ExternalReference);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateWarrantyExternalReferenceOverride(callInfo, id, ExternalReference, redirect);
            return callInfo;
        }

        partial void UpdateWarrantyExternalCompletedDateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string ExternalCompletedDate, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateWarrantyExternalCompletedDate(int id, string ExternalCompletedDate, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateWarrantyExternalCompletedDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ExternalCompletedDate", ExternalCompletedDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateWarrantyExternalCompletedDateOverride(callInfo, id, ExternalCompletedDate, redirect);
            return callInfo;
        }

        partial void UpdateSubTypesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, System.Collections.Generic.List<string> SubTypes, bool? AddComponents, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateSubTypes(int id, System.Collections.Generic.List<string> SubTypes, bool? AddComponents, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateSubTypes);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "SubTypes", SubTypes);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "AddComponents", AddComponents);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateSubTypesOverride(callInfo, id, SubTypes, AddComponents, redirect);
            return callInfo;
        }

        partial void UpdateFlagOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, long? Flag, string Reason, bool? redirect);

        public override System.Web.Mvc.ActionResult UpdateFlag(int id, long? Flag, string Reason, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateFlag);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Flag", Flag);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Reason", Reason);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateFlagOverride(callInfo, id, Flag, Reason, redirect);
            return callInfo;
        }

        partial void WaitingForUserActionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string Reason, bool? redirect);

        public override System.Web.Mvc.ActionResult WaitingForUserAction(int id, string Reason, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.WaitingForUserAction);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Reason", Reason);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            WaitingForUserActionOverride(callInfo, id, Reason, redirect);
            return callInfo;
        }

        partial void NotWaitingForUserActionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string Resolution, bool? redirect);

        public override System.Web.Mvc.ActionResult NotWaitingForUserAction(int id, string Resolution, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.NotWaitingForUserAction);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Resolution", Resolution);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            NotWaitingForUserActionOverride(callInfo, id, Resolution, redirect);
            return callInfo;
        }

        partial void LogRepairOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string RepairerName, string RepairerReference, bool? redirect);

        public override System.Web.Mvc.ActionResult LogRepair(int id, string RepairerName, string RepairerReference, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LogRepair);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "RepairerName", RepairerName);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "RepairerReference", RepairerReference);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            LogRepairOverride(callInfo, id, RepairerName, RepairerReference, redirect);
            return callInfo;
        }

        partial void DeviceReadyForReturnOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, bool redirect);

        public override System.Web.Mvc.ActionResult DeviceReadyForReturn(int id, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeviceReadyForReturn);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            DeviceReadyForReturnOverride(callInfo, id, redirect);
            return callInfo;
        }

        partial void DeviceHeldOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, bool redirect);

        public override System.Web.Mvc.ActionResult DeviceHeld(int id, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeviceHeld);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            DeviceHeldOverride(callInfo, id, redirect);
            return callInfo;
        }

        partial void DeviceReturnedOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, bool redirect);

        public override System.Web.Mvc.ActionResult DeviceReturned(int id, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeviceReturned);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            DeviceReturnedOverride(callInfo, id, redirect);
            return callInfo;
        }

        partial void ForceCloseOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string Reason, bool? redirect);

        public override System.Web.Mvc.ActionResult ForceClose(int id, string Reason, bool? redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ForceClose);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Reason", Reason);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            ForceCloseOverride(callInfo, id, Reason, redirect);
            return callInfo;
        }

        partial void CloseOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, bool redirect);

        public override System.Web.Mvc.ActionResult Close(int id, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Close);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            CloseOverride(callInfo, id, redirect);
            return callInfo;
        }

        partial void ReopenOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, bool redirect);

        public override System.Web.Mvc.ActionResult Reopen(int id, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Reopen);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            ReopenOverride(callInfo, id, redirect);
            return callInfo;
        }

        partial void DeleteOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, bool redirect);

        public override System.Web.Mvc.ActionResult Delete(int id, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Delete);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            DeleteOverride(callInfo, id, redirect);
            return callInfo;
        }

        partial void ConvertHWarToHNWarOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, bool redirect);

        public override System.Web.Mvc.ActionResult ConvertHWarToHNWar(int id, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ConvertHWarToHNWar);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            ConvertHWarToHNWarOverride(callInfo, id, redirect);
            return callInfo;
        }

        partial void CommentsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        public override System.Web.Mvc.ActionResult Comments(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Comments);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            CommentsOverride(callInfo, id);
            return callInfo;
        }

        partial void CommentOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        public override System.Web.Mvc.ActionResult Comment(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Comment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            CommentOverride(callInfo, id);
            return callInfo;
        }

        partial void CommentPostOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string comment);

        public override System.Web.Mvc.ActionResult CommentPost(int id, string comment)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CommentPost);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "comment", comment);
            CommentPostOverride(callInfo, id, comment);
            return callInfo;
        }

        partial void CommentRemoveOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        public override System.Web.Mvc.ActionResult CommentRemove(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CommentRemove);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            CommentRemoveOverride(callInfo, id);
            return callInfo;
        }

        partial void AttachmentDownloadOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        public override System.Web.Mvc.ActionResult AttachmentDownload(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AttachmentDownload);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            AttachmentDownloadOverride(callInfo, id);
            return callInfo;
        }

        partial void AttachmentThumbnailOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        public override System.Web.Mvc.ActionResult AttachmentThumbnail(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AttachmentThumbnail);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            AttachmentThumbnailOverride(callInfo, id);
            return callInfo;
        }

        partial void AttachmentUploadOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string Comments);

        public override System.Web.Mvc.ActionResult AttachmentUpload(int id, string Comments)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AttachmentUpload);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Comments", Comments);
            AttachmentUploadOverride(callInfo, id, Comments);
            return callInfo;
        }

        partial void AttachmentOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        public override System.Web.Mvc.ActionResult Attachment(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Attachment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            AttachmentOverride(callInfo, id);
            return callInfo;
        }

        partial void AttachmentsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        public override System.Web.Mvc.ActionResult Attachments(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Attachments);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            AttachmentsOverride(callInfo, id);
            return callInfo;
        }

        partial void AttachmentRemoveOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        public override System.Web.Mvc.ActionResult AttachmentRemove(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AttachmentRemove);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            AttachmentRemoveOverride(callInfo, id);
            return callInfo;
        }

        partial void ComponentAddOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string Description, string Cost);

        public override System.Web.Mvc.ActionResult ComponentAdd(int id, string Description, string Cost)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ComponentAdd);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Description", Description);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Cost", Cost);
            ComponentAddOverride(callInfo, id, Description, Cost);
            return callInfo;
        }

        partial void ComponentUpdateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string Description, string Cost);

        public override System.Web.Mvc.ActionResult ComponentUpdate(int id, string Description, string Cost)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ComponentUpdate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Description", Description);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Cost", Cost);
            ComponentUpdateOverride(callInfo, id, Description, Cost);
            return callInfo;
        }

        partial void ComponentRemoveOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        public override System.Web.Mvc.ActionResult ComponentRemove(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ComponentRemove);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ComponentRemoveOverride(callInfo, id);
            return callInfo;
        }

        partial void StatisticsDailyOpenedClosedOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult StatisticsDailyOpenedClosed()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.StatisticsDailyOpenedClosed);
            StatisticsDailyOpenedClosedOverride(callInfo);
            return callInfo;
        }

        partial void GeneratePdfOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, string DocumentTemplateId);

        public override System.Web.Mvc.ActionResult GeneratePdf(string id, string DocumentTemplateId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GeneratePdf);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "DocumentTemplateId", DocumentTemplateId);
            GeneratePdfOverride(callInfo, id, DocumentTemplateId);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.API.Controllers
{
    public partial class JobPreferencesController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public JobPreferencesController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected JobPreferencesController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateLongRunningJobDaysThreshold()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateLongRunningJobDaysThreshold);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public JobPreferencesController Actions { get { return MVC.API.JobPreferences; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "API";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "JobPreferences";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "JobPreferences";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string UpdateLongRunningJobDaysThreshold = "UpdateLongRunningJobDaysThreshold";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string UpdateLongRunningJobDaysThreshold = "UpdateLongRunningJobDaysThreshold";
        }


        static readonly ActionParamsClass_UpdateLongRunningJobDaysThreshold s_params_UpdateLongRunningJobDaysThreshold = new ActionParamsClass_UpdateLongRunningJobDaysThreshold();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateLongRunningJobDaysThreshold UpdateLongRunningJobDaysThresholdParams { get { return s_params_UpdateLongRunningJobDaysThreshold; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateLongRunningJobDaysThreshold
        {
            public readonly string LongRunningJobDaysThreshold = "LongRunningJobDaysThreshold";
            public readonly string redirect = "redirect";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_JobPreferencesController : Disco.Web.Areas.API.Controllers.JobPreferencesController
    {
        public T4MVC_JobPreferencesController() : base(Dummy.Instance) { }

        partial void UpdateLongRunningJobDaysThresholdOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int LongRunningJobDaysThreshold, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateLongRunningJobDaysThreshold(int LongRunningJobDaysThreshold, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateLongRunningJobDaysThreshold);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "LongRunningJobDaysThreshold", LongRunningJobDaysThreshold);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateLongRunningJobDaysThresholdOverride(callInfo, LongRunningJobDaysThreshold, redirect);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.API.Controllers
{
    public partial class LoggingController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public LoggingController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected LoggingController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult RetrieveEvents()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RetrieveEvents);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ScheduledTaskStatus()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ScheduledTaskStatus);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public LoggingController Actions { get { return MVC.API.Logging; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "API";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Logging";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Logging";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Modules = "Modules";
            public readonly string RetrieveEvents = "RetrieveEvents";
            public readonly string ScheduledTaskStatus = "ScheduledTaskStatus";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Modules = "Modules";
            public const string RetrieveEvents = "RetrieveEvents";
            public const string ScheduledTaskStatus = "ScheduledTaskStatus";
        }


        static readonly ActionParamsClass_RetrieveEvents s_params_RetrieveEvents = new ActionParamsClass_RetrieveEvents();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_RetrieveEvents RetrieveEventsParams { get { return s_params_RetrieveEvents; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_RetrieveEvents
        {
            public readonly string Format = "Format";
            public readonly string Start = "Start";
            public readonly string End = "End";
            public readonly string ModuleId = "ModuleId";
            public readonly string EventTypeIds = "EventTypeIds";
            public readonly string Take = "Take";
        }
        static readonly ActionParamsClass_ScheduledTaskStatus s_params_ScheduledTaskStatus = new ActionParamsClass_ScheduledTaskStatus();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ScheduledTaskStatus ScheduledTaskStatusParams { get { return s_params_ScheduledTaskStatus; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ScheduledTaskStatus
        {
            public readonly string id = "id";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_LoggingController : Disco.Web.Areas.API.Controllers.LoggingController
    {
        public T4MVC_LoggingController() : base(Dummy.Instance) { }

        partial void ModulesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Modules()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Modules);
            ModulesOverride(callInfo);
            return callInfo;
        }

        partial void RetrieveEventsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string Format, System.DateTime? Start, System.DateTime? End, int? ModuleId, System.Collections.Generic.List<int> EventTypeIds, int? Take);

        public override System.Web.Mvc.ActionResult RetrieveEvents(string Format, System.DateTime? Start, System.DateTime? End, int? ModuleId, System.Collections.Generic.List<int> EventTypeIds, int? Take)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RetrieveEvents);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Format", Format);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Start", Start);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "End", End);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ModuleId", ModuleId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "EventTypeIds", EventTypeIds);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Take", Take);
            RetrieveEventsOverride(callInfo, Format, Start, End, ModuleId, EventTypeIds, Take);
            return callInfo;
        }

        partial void ScheduledTaskStatusOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id);

        public override System.Web.Mvc.ActionResult ScheduledTaskStatus(string id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ScheduledTaskStatus);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ScheduledTaskStatusOverride(callInfo, id);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.API.Controllers
{
    public partial class PluginController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public PluginController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected PluginController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Update()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Update);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateLocal()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateLocal);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Uninstall()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Uninstall);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Install()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Install);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult InstallLocal()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.InstallLocal);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public PluginController Actions { get { return MVC.API.Plugin; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "API";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Plugin";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Plugin";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string UpdateLibraryCatalogue = "UpdateLibraryCatalogue";
            public readonly string UpdateAll = "UpdateAll";
            public readonly string Update = "Update";
            public readonly string UpdateLocal = "UpdateLocal";
            public readonly string Uninstall = "Uninstall";
            public readonly string Install = "Install";
            public readonly string InstallLocal = "InstallLocal";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string UpdateLibraryCatalogue = "UpdateLibraryCatalogue";
            public const string UpdateAll = "UpdateAll";
            public const string Update = "Update";
            public const string UpdateLocal = "UpdateLocal";
            public const string Uninstall = "Uninstall";
            public const string Install = "Install";
            public const string InstallLocal = "InstallLocal";
        }


        static readonly ActionParamsClass_Update s_params_Update = new ActionParamsClass_Update();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Update UpdateParams { get { return s_params_Update; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Update
        {
            public readonly string PluginId = "PluginId";
        }
        static readonly ActionParamsClass_UpdateLocal s_params_UpdateLocal = new ActionParamsClass_UpdateLocal();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateLocal UpdateLocalParams { get { return s_params_UpdateLocal; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateLocal
        {
            public readonly string PluginId = "PluginId";
            public readonly string Plugin = "Plugin";
        }
        static readonly ActionParamsClass_Uninstall s_params_Uninstall = new ActionParamsClass_Uninstall();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Uninstall UninstallParams { get { return s_params_Uninstall; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Uninstall
        {
            public readonly string id = "id";
            public readonly string UninstallData = "UninstallData";
        }
        static readonly ActionParamsClass_Install s_params_Install = new ActionParamsClass_Install();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Install InstallParams { get { return s_params_Install; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Install
        {
            public readonly string PluginId = "PluginId";
        }
        static readonly ActionParamsClass_InstallLocal s_params_InstallLocal = new ActionParamsClass_InstallLocal();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_InstallLocal InstallLocalParams { get { return s_params_InstallLocal; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_InstallLocal
        {
            public readonly string Plugin = "Plugin";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_PluginController : Disco.Web.Areas.API.Controllers.PluginController
    {
        public T4MVC_PluginController() : base(Dummy.Instance) { }

        partial void UpdateLibraryCatalogueOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult UpdateLibraryCatalogue()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateLibraryCatalogue);
            UpdateLibraryCatalogueOverride(callInfo);
            return callInfo;
        }

        partial void UpdateAllOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult UpdateAll()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateAll);
            UpdateAllOverride(callInfo);
            return callInfo;
        }

        partial void UpdateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string PluginId);

        public override System.Web.Mvc.ActionResult Update(string PluginId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Update);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PluginId", PluginId);
            UpdateOverride(callInfo, PluginId);
            return callInfo;
        }

        partial void UpdateLocalOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string PluginId, System.Web.HttpPostedFileBase Plugin);

        public override System.Web.Mvc.ActionResult UpdateLocal(string PluginId, System.Web.HttpPostedFileBase Plugin)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateLocal);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PluginId", PluginId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Plugin", Plugin);
            UpdateLocalOverride(callInfo, PluginId, Plugin);
            return callInfo;
        }

        partial void UninstallOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, bool UninstallData);

        public override System.Web.Mvc.ActionResult Uninstall(string id, bool UninstallData)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Uninstall);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UninstallData", UninstallData);
            UninstallOverride(callInfo, id, UninstallData);
            return callInfo;
        }

        partial void InstallOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string PluginId);

        public override System.Web.Mvc.ActionResult Install(string PluginId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Install);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PluginId", PluginId);
            InstallOverride(callInfo, PluginId);
            return callInfo;
        }

        partial void InstallLocalOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, System.Web.HttpPostedFileBase Plugin);

        public override System.Web.Mvc.ActionResult InstallLocal(System.Web.HttpPostedFileBase Plugin)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.InstallLocal);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Plugin", Plugin);
            InstallLocalOverride(callInfo, Plugin);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.API.Controllers
{
    public partial class SystemController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public SystemController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected SystemController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateOrganisationName()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateOrganisationName);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateOrganisationAddress()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateOrganisationAddress);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult DeleteOrganisationAddress()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteOrganisationAddress);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateMultiSiteMode()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateMultiSiteMode);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public SystemController Actions { get { return MVC.API.System; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "API";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "System";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "System";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string UpdateLastNetworkLogonDates = "UpdateLastNetworkLogonDates";
            public readonly string UpdateAttachmentThumbnails = "UpdateAttachmentThumbnails";
            public readonly string UpdateCheck = "UpdateCheck";
            public readonly string UpdateOrganisationName = "UpdateOrganisationName";
            public readonly string OrganisationLogo = "OrganisationLogo";
            public readonly string UpdateOrganisationAddress = "UpdateOrganisationAddress";
            public readonly string DeleteOrganisationAddress = "DeleteOrganisationAddress";
            public readonly string UpdateMultiSiteMode = "UpdateMultiSiteMode";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string UpdateLastNetworkLogonDates = "UpdateLastNetworkLogonDates";
            public const string UpdateAttachmentThumbnails = "UpdateAttachmentThumbnails";
            public const string UpdateCheck = "UpdateCheck";
            public const string UpdateOrganisationName = "UpdateOrganisationName";
            public const string OrganisationLogo = "OrganisationLogo";
            public const string UpdateOrganisationAddress = "UpdateOrganisationAddress";
            public const string DeleteOrganisationAddress = "DeleteOrganisationAddress";
            public const string UpdateMultiSiteMode = "UpdateMultiSiteMode";
        }


        static readonly ActionParamsClass_UpdateOrganisationName s_params_UpdateOrganisationName = new ActionParamsClass_UpdateOrganisationName();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateOrganisationName UpdateOrganisationNameParams { get { return s_params_UpdateOrganisationName; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateOrganisationName
        {
            public readonly string OrganisationName = "OrganisationName";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_OrganisationLogo s_params_OrganisationLogo = new ActionParamsClass_OrganisationLogo();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_OrganisationLogo OrganisationLogoParams { get { return s_params_OrganisationLogo; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_OrganisationLogo
        {
            public readonly string Width = "Width";
            public readonly string Height = "Height";
            public readonly string v = "v";
            public readonly string redirect = "redirect";
            public readonly string Image = "Image";
            public readonly string ResetLogo = "ResetLogo";
        }
        static readonly ActionParamsClass_UpdateOrganisationAddress s_params_UpdateOrganisationAddress = new ActionParamsClass_UpdateOrganisationAddress();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateOrganisationAddress UpdateOrganisationAddressParams { get { return s_params_UpdateOrganisationAddress; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateOrganisationAddress
        {
            public readonly string organisationAddress = "organisationAddress";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_DeleteOrganisationAddress s_params_DeleteOrganisationAddress = new ActionParamsClass_DeleteOrganisationAddress();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteOrganisationAddress DeleteOrganisationAddressParams { get { return s_params_DeleteOrganisationAddress; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteOrganisationAddress
        {
            public readonly string Id = "Id";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateMultiSiteMode s_params_UpdateMultiSiteMode = new ActionParamsClass_UpdateMultiSiteMode();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateMultiSiteMode UpdateMultiSiteModeParams { get { return s_params_UpdateMultiSiteMode; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateMultiSiteMode
        {
            public readonly string MultiSiteMode = "MultiSiteMode";
            public readonly string redirect = "redirect";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_SystemController : Disco.Web.Areas.API.Controllers.SystemController
    {
        public T4MVC_SystemController() : base(Dummy.Instance) { }

        partial void UpdateLastNetworkLogonDatesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult UpdateLastNetworkLogonDates()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateLastNetworkLogonDates);
            UpdateLastNetworkLogonDatesOverride(callInfo);
            return callInfo;
        }

        partial void UpdateAttachmentThumbnailsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult UpdateAttachmentThumbnails()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateAttachmentThumbnails);
            UpdateAttachmentThumbnailsOverride(callInfo);
            return callInfo;
        }

        partial void UpdateCheckOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult UpdateCheck()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateCheck);
            UpdateCheckOverride(callInfo);
            return callInfo;
        }

        partial void UpdateOrganisationNameOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string OrganisationName, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateOrganisationName(string OrganisationName, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateOrganisationName);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "OrganisationName", OrganisationName);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateOrganisationNameOverride(callInfo, OrganisationName, redirect);
            return callInfo;
        }

        partial void OrganisationLogoOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int Width, int Height, string v);

        public override System.Web.Mvc.ActionResult OrganisationLogo(int Width, int Height, string v)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.OrganisationLogo);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Width", Width);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Height", Height);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "v", v);
            OrganisationLogoOverride(callInfo, Width, Height, v);
            return callInfo;
        }

        partial void OrganisationLogoOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, bool redirect, System.Web.HttpPostedFileBase Image, bool? ResetLogo);

        public override System.Web.Mvc.ActionResult OrganisationLogo(bool redirect, System.Web.HttpPostedFileBase Image, bool? ResetLogo)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.OrganisationLogo);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Image", Image);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ResetLogo", ResetLogo);
            OrganisationLogoOverride(callInfo, redirect, Image, ResetLogo);
            return callInfo;
        }

        partial void UpdateOrganisationAddressOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Disco.Models.BI.Config.OrganisationAddress organisationAddress, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateOrganisationAddress(Disco.Models.BI.Config.OrganisationAddress organisationAddress, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateOrganisationAddress);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "organisationAddress", organisationAddress);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateOrganisationAddressOverride(callInfo, organisationAddress, redirect);
            return callInfo;
        }

        partial void DeleteOrganisationAddressOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int Id, bool redirect);

        public override System.Web.Mvc.ActionResult DeleteOrganisationAddress(int Id, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteOrganisationAddress);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Id", Id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            DeleteOrganisationAddressOverride(callInfo, Id, redirect);
            return callInfo;
        }

        partial void UpdateMultiSiteModeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, bool MultiSiteMode, bool redirect);

        public override System.Web.Mvc.ActionResult UpdateMultiSiteMode(bool MultiSiteMode, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateMultiSiteMode);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "MultiSiteMode", MultiSiteMode);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateMultiSiteModeOverride(callInfo, MultiSiteMode, redirect);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.API.Controllers
{
    public partial class UserController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public UserController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected UserController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpstreamUsers()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpstreamUsers);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AttachmentDownload()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AttachmentDownload);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AttachmentThumbnail()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AttachmentThumbnail);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AttachmentUpload()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AttachmentUpload);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Attachment()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Attachment);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Attachments()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Attachments);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AttachmentRemove()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AttachmentRemove);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult GeneratePdf()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GeneratePdf);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public UserController Actions { get { return MVC.API.User; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "API";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "User";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "User";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string UpstreamUsers = "UpstreamUsers";
            public readonly string AttachmentDownload = "AttachmentDownload";
            public readonly string AttachmentThumbnail = "AttachmentThumbnail";
            public readonly string AttachmentUpload = "AttachmentUpload";
            public readonly string Attachment = "Attachment";
            public readonly string Attachments = "Attachments";
            public readonly string AttachmentRemove = "AttachmentRemove";
            public readonly string GeneratePdf = "GeneratePdf";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string UpstreamUsers = "UpstreamUsers";
            public const string AttachmentDownload = "AttachmentDownload";
            public const string AttachmentThumbnail = "AttachmentThumbnail";
            public const string AttachmentUpload = "AttachmentUpload";
            public const string Attachment = "Attachment";
            public const string Attachments = "Attachments";
            public const string AttachmentRemove = "AttachmentRemove";
            public const string GeneratePdf = "GeneratePdf";
        }


        static readonly ActionParamsClass_UpstreamUsers s_params_UpstreamUsers = new ActionParamsClass_UpstreamUsers();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpstreamUsers UpstreamUsersParams { get { return s_params_UpstreamUsers; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpstreamUsers
        {
            public readonly string term = "term";
        }
        static readonly ActionParamsClass_AttachmentDownload s_params_AttachmentDownload = new ActionParamsClass_AttachmentDownload();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AttachmentDownload AttachmentDownloadParams { get { return s_params_AttachmentDownload; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AttachmentDownload
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_AttachmentThumbnail s_params_AttachmentThumbnail = new ActionParamsClass_AttachmentThumbnail();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AttachmentThumbnail AttachmentThumbnailParams { get { return s_params_AttachmentThumbnail; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AttachmentThumbnail
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_AttachmentUpload s_params_AttachmentUpload = new ActionParamsClass_AttachmentUpload();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AttachmentUpload AttachmentUploadParams { get { return s_params_AttachmentUpload; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AttachmentUpload
        {
            public readonly string id = "id";
            public readonly string Comments = "Comments";
        }
        static readonly ActionParamsClass_Attachment s_params_Attachment = new ActionParamsClass_Attachment();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Attachment AttachmentParams { get { return s_params_Attachment; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Attachment
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_Attachments s_params_Attachments = new ActionParamsClass_Attachments();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Attachments AttachmentsParams { get { return s_params_Attachments; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Attachments
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_AttachmentRemove s_params_AttachmentRemove = new ActionParamsClass_AttachmentRemove();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AttachmentRemove AttachmentRemoveParams { get { return s_params_AttachmentRemove; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AttachmentRemove
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_GeneratePdf s_params_GeneratePdf = new ActionParamsClass_GeneratePdf();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GeneratePdf GeneratePdfParams { get { return s_params_GeneratePdf; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GeneratePdf
        {
            public readonly string id = "id";
            public readonly string DocumentTemplateId = "DocumentTemplateId";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_UserController : Disco.Web.Areas.API.Controllers.UserController
    {
        public T4MVC_UserController() : base(Dummy.Instance) { }

        partial void UpstreamUsersOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string term);

        public override System.Web.Mvc.ActionResult UpstreamUsers(string term)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpstreamUsers);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "term", term);
            UpstreamUsersOverride(callInfo, term);
            return callInfo;
        }

        partial void AttachmentDownloadOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        public override System.Web.Mvc.ActionResult AttachmentDownload(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AttachmentDownload);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            AttachmentDownloadOverride(callInfo, id);
            return callInfo;
        }

        partial void AttachmentThumbnailOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        public override System.Web.Mvc.ActionResult AttachmentThumbnail(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AttachmentThumbnail);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            AttachmentThumbnailOverride(callInfo, id);
            return callInfo;
        }

        partial void AttachmentUploadOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, string Comments);

        public override System.Web.Mvc.ActionResult AttachmentUpload(string id, string Comments)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AttachmentUpload);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Comments", Comments);
            AttachmentUploadOverride(callInfo, id, Comments);
            return callInfo;
        }

        partial void AttachmentOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        public override System.Web.Mvc.ActionResult Attachment(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Attachment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            AttachmentOverride(callInfo, id);
            return callInfo;
        }

        partial void AttachmentsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id);

        public override System.Web.Mvc.ActionResult Attachments(string id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Attachments);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            AttachmentsOverride(callInfo, id);
            return callInfo;
        }

        partial void AttachmentRemoveOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        public override System.Web.Mvc.ActionResult AttachmentRemove(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AttachmentRemove);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            AttachmentRemoveOverride(callInfo, id);
            return callInfo;
        }

        partial void GeneratePdfOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, string DocumentTemplateId);

        public override System.Web.Mvc.ActionResult GeneratePdf(string id, string DocumentTemplateId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GeneratePdf);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "DocumentTemplateId", DocumentTemplateId);
            GeneratePdfOverride(callInfo, id, DocumentTemplateId);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.Config.Controllers
{
    public partial class AuthorizationRoleController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public AuthorizationRoleController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected AuthorizationRoleController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Index()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public AuthorizationRoleController Actions { get { return MVC.Config.AuthorizationRole; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Config";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "AuthorizationRole";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "AuthorizationRole";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string Create = "Create";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string Create = "Create";
        }


        static readonly ActionParamsClass_Index s_params_Index = new ActionParamsClass_Index();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Index IndexParams { get { return s_params_Index; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Index
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_Create s_params_Create = new ActionParamsClass_Create();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Create CreateParams { get { return s_params_Create; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Create
        {
            public readonly string model = "model";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string Create = "Create";
                public readonly string Index = "Index";
                public readonly string Show = "Show";
            }
            public readonly string Create = "~/Areas/Config/Views/AuthorizationRole/Create.cshtml";
            public readonly string Index = "~/Areas/Config/Views/AuthorizationRole/Index.cshtml";
            public readonly string Show = "~/Areas/Config/Views/AuthorizationRole/Show.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_AuthorizationRoleController : Disco.Web.Areas.Config.Controllers.AuthorizationRoleController
    {
        public T4MVC_AuthorizationRoleController() : base(Dummy.Instance) { }

        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int? id);

        public override System.Web.Mvc.ActionResult Index(int? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            IndexOverride(callInfo, id);
            return callInfo;
        }

        partial void CreateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Create()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Create);
            CreateOverride(callInfo);
            return callInfo;
        }

        partial void CreateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Disco.Web.Areas.Config.Models.AuthorizationRole.CreateModel model);

        public override System.Web.Mvc.ActionResult Create(Disco.Web.Areas.Config.Models.AuthorizationRole.CreateModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Create);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            CreateOverride(callInfo, model);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.Config.Controllers
{
    public partial class ConfigController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ConfigController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected ConfigController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }


        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ConfigController Actions { get { return MVC.Config.Config; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Config";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Config";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Config";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
        }


        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string Index = "Index";
            }
            public readonly string Index = "~/Areas/Config/Views/Config/Index.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_ConfigController : Disco.Web.Areas.Config.Controllers.ConfigController
    {
        public T4MVC_ConfigController() : base(Dummy.Instance) { }

        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.Config.Controllers
{
    public partial class DeviceBatchController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DeviceBatchController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected DeviceBatchController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Index()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DeviceBatchController Actions { get { return MVC.Config.DeviceBatch; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Config";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "DeviceBatch";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "DeviceBatch";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string Create = "Create";
            public readonly string Timeline = "Timeline";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string Create = "Create";
            public const string Timeline = "Timeline";
        }


        static readonly ActionParamsClass_Index s_params_Index = new ActionParamsClass_Index();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Index IndexParams { get { return s_params_Index; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Index
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_Create s_params_Create = new ActionParamsClass_Create();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Create CreateParams { get { return s_params_Create; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Create
        {
            public readonly string model = "model";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string Create = "Create";
                public readonly string Index = "Index";
                public readonly string Show = "Show";
                public readonly string Timeline = "Timeline";
            }
            public readonly string Create = "~/Areas/Config/Views/DeviceBatch/Create.cshtml";
            public readonly string Index = "~/Areas/Config/Views/DeviceBatch/Index.cshtml";
            public readonly string Show = "~/Areas/Config/Views/DeviceBatch/Show.cshtml";
            public readonly string Timeline = "~/Areas/Config/Views/DeviceBatch/Timeline.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_DeviceBatchController : Disco.Web.Areas.Config.Controllers.DeviceBatchController
    {
        public T4MVC_DeviceBatchController() : base(Dummy.Instance) { }

        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int? id);

        public override System.Web.Mvc.ActionResult Index(int? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            IndexOverride(callInfo, id);
            return callInfo;
        }

        partial void CreateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Create()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Create);
            CreateOverride(callInfo);
            return callInfo;
        }

        partial void CreateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Disco.Web.Areas.Config.Models.DeviceBatch.CreateModel model);

        public override System.Web.Mvc.ActionResult Create(Disco.Web.Areas.Config.Models.DeviceBatch.CreateModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Create);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            CreateOverride(callInfo, model);
            return callInfo;
        }

        partial void TimelineOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Timeline()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Timeline);
            TimelineOverride(callInfo);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.Config.Controllers
{
    public partial class DeviceModelController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DeviceModelController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected DeviceModelController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Index()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DeviceModelController Actions { get { return MVC.Config.DeviceModel; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Config";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "DeviceModel";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "DeviceModel";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string GenericComponents = "GenericComponents";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string GenericComponents = "GenericComponents";
        }


        static readonly ActionParamsClass_Index s_params_Index = new ActionParamsClass_Index();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Index IndexParams { get { return s_params_Index; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Index
        {
            public readonly string id = "id";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _DeviceComponentsTable = "_DeviceComponentsTable";
                public readonly string GenericComponents = "GenericComponents";
                public readonly string Index = "Index";
                public readonly string Show = "Show";
            }
            public readonly string _DeviceComponentsTable = "~/Areas/Config/Views/DeviceModel/_DeviceComponentsTable.cshtml";
            public readonly string GenericComponents = "~/Areas/Config/Views/DeviceModel/GenericComponents.cshtml";
            public readonly string Index = "~/Areas/Config/Views/DeviceModel/Index.cshtml";
            public readonly string Show = "~/Areas/Config/Views/DeviceModel/Show.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_DeviceModelController : Disco.Web.Areas.Config.Controllers.DeviceModelController
    {
        public T4MVC_DeviceModelController() : base(Dummy.Instance) { }

        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int? id);

        public override System.Web.Mvc.ActionResult Index(int? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            IndexOverride(callInfo, id);
            return callInfo;
        }

        partial void GenericComponentsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult GenericComponents()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GenericComponents);
            GenericComponentsOverride(callInfo);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.Config.Controllers
{
    public partial class DeviceProfileController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DeviceProfileController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected DeviceProfileController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Index()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DeviceProfileController Actions { get { return MVC.Config.DeviceProfile; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Config";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "DeviceProfile";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "DeviceProfile";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string Create = "Create";
            public readonly string Defaults = "Defaults";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string Create = "Create";
            public const string Defaults = "Defaults";
        }


        static readonly ActionParamsClass_Index s_params_Index = new ActionParamsClass_Index();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Index IndexParams { get { return s_params_Index; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Index
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_Create s_params_Create = new ActionParamsClass_Create();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Create CreateParams { get { return s_params_Create; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Create
        {
            public readonly string model = "model";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _Table = "_Table";
                public readonly string _TableRender = "_TableRender";
                public readonly string Create = "Create";
                public readonly string Defaults = "Defaults";
                public readonly string Index = "Index";
                public readonly string Show = "Show";
            }
            public readonly string _Table = "~/Areas/Config/Views/DeviceProfile/_Table.cshtml";
            public readonly string _TableRender = "~/Areas/Config/Views/DeviceProfile/_TableRender.cshtml";
            public readonly string Create = "~/Areas/Config/Views/DeviceProfile/Create.cshtml";
            public readonly string Defaults = "~/Areas/Config/Views/DeviceProfile/Defaults.cshtml";
            public readonly string Index = "~/Areas/Config/Views/DeviceProfile/Index.cshtml";
            public readonly string Show = "~/Areas/Config/Views/DeviceProfile/Show.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_DeviceProfileController : Disco.Web.Areas.Config.Controllers.DeviceProfileController
    {
        public T4MVC_DeviceProfileController() : base(Dummy.Instance) { }

        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int? id);

        public override System.Web.Mvc.ActionResult Index(int? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            IndexOverride(callInfo, id);
            return callInfo;
        }

        partial void CreateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Create()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Create);
            CreateOverride(callInfo);
            return callInfo;
        }

        partial void CreateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Disco.Web.Areas.Config.Models.DeviceProfile.CreateModel model);

        public override System.Web.Mvc.ActionResult Create(Disco.Web.Areas.Config.Models.DeviceProfile.CreateModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Create);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            CreateOverride(callInfo, model);
            return callInfo;
        }

        partial void DefaultsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Defaults()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Defaults);
            DefaultsOverride(callInfo);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.Config.Controllers
{
    public partial class DocumentTemplateController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DocumentTemplateController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected DocumentTemplateController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Index()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ExpressionBrowser()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ExpressionBrowser);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DocumentTemplateController Actions { get { return MVC.Config.DocumentTemplate; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Config";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "DocumentTemplate";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "DocumentTemplate";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string ImportStatus = "ImportStatus";
            public readonly string UndetectedPages = "UndetectedPages";
            public readonly string Create = "Create";
            public readonly string ExpressionBrowser = "ExpressionBrowser";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string ImportStatus = "ImportStatus";
            public const string UndetectedPages = "UndetectedPages";
            public const string Create = "Create";
            public const string ExpressionBrowser = "ExpressionBrowser";
        }


        static readonly ActionParamsClass_Index s_params_Index = new ActionParamsClass_Index();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Index IndexParams { get { return s_params_Index; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Index
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_Create s_params_Create = new ActionParamsClass_Create();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Create CreateParams { get { return s_params_Create; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Create
        {
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_ExpressionBrowser s_params_ExpressionBrowser = new ActionParamsClass_ExpressionBrowser();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ExpressionBrowser ExpressionBrowserParams { get { return s_params_ExpressionBrowser; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ExpressionBrowser
        {
            public readonly string type = "type";
            public readonly string StaticDeclaredMembersOnly = "StaticDeclaredMembersOnly";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _ExpressionsTable = "_ExpressionsTable";
                public readonly string Create = "Create";
                public readonly string ExpressionBrowser = "ExpressionBrowser";
                public readonly string ImportStatus = "ImportStatus";
                public readonly string Index = "Index";
                public readonly string Show = "Show";
                public readonly string UndetectedPages = "UndetectedPages";
            }
            public readonly string _ExpressionsTable = "~/Areas/Config/Views/DocumentTemplate/_ExpressionsTable.cshtml";
            public readonly string Create = "~/Areas/Config/Views/DocumentTemplate/Create.cshtml";
            public readonly string ExpressionBrowser = "~/Areas/Config/Views/DocumentTemplate/ExpressionBrowser.cshtml";
            public readonly string ImportStatus = "~/Areas/Config/Views/DocumentTemplate/ImportStatus.cshtml";
            public readonly string Index = "~/Areas/Config/Views/DocumentTemplate/Index.cshtml";
            public readonly string Show = "~/Areas/Config/Views/DocumentTemplate/Show.cshtml";
            public readonly string UndetectedPages = "~/Areas/Config/Views/DocumentTemplate/UndetectedPages.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_DocumentTemplateController : Disco.Web.Areas.Config.Controllers.DocumentTemplateController
    {
        public T4MVC_DocumentTemplateController() : base(Dummy.Instance) { }

        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id);

        public override System.Web.Mvc.ActionResult Index(string id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            IndexOverride(callInfo, id);
            return callInfo;
        }

        partial void ImportStatusOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult ImportStatus()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ImportStatus);
            ImportStatusOverride(callInfo);
            return callInfo;
        }

        partial void UndetectedPagesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult UndetectedPages()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UndetectedPages);
            UndetectedPagesOverride(callInfo);
            return callInfo;
        }

        partial void CreateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Create()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Create);
            CreateOverride(callInfo);
            return callInfo;
        }

        partial void CreateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Disco.Web.Areas.Config.Models.DocumentTemplate.CreateModel model);

        public override System.Web.Mvc.ActionResult Create(Disco.Web.Areas.Config.Models.DocumentTemplate.CreateModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Create);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            CreateOverride(callInfo, model);
            return callInfo;
        }

        partial void ExpressionBrowserOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string type, bool StaticDeclaredMembersOnly);

        public override System.Web.Mvc.ActionResult ExpressionBrowser(string type, bool StaticDeclaredMembersOnly)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ExpressionBrowser);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "type", type);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "StaticDeclaredMembersOnly", StaticDeclaredMembersOnly);
            ExpressionBrowserOverride(callInfo, type, StaticDeclaredMembersOnly);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.Config.Controllers
{
    public partial class EnrolmentController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public EnrolmentController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected EnrolmentController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }


        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public EnrolmentController Actions { get { return MVC.Config.Enrolment; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Config";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Enrolment";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Enrolment";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string Status = "Status";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string Status = "Status";
        }


        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string Index = "Index";
                public readonly string Status = "Status";
            }
            public readonly string Index = "~/Areas/Config/Views/Enrolment/Index.cshtml";
            public readonly string Status = "~/Areas/Config/Views/Enrolment/Status.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_EnrolmentController : Disco.Web.Areas.Config.Controllers.EnrolmentController
    {
        public T4MVC_EnrolmentController() : base(Dummy.Instance) { }

        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        partial void StatusOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Status()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Status);
            StatusOverride(callInfo);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.Config.Controllers
{
    public partial class ExpressionsController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ExpressionsController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected ExpressionsController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }


        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ExpressionsController Actions { get { return MVC.Config.Expressions; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Config";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Expressions";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Expressions";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
        }


        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string Editor = "Editor";
            }
            public readonly string Editor = "~/Areas/Config/Views/Expressions/Editor.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_ExpressionsController : Disco.Web.Areas.Config.Controllers.ExpressionsController
    {
        public T4MVC_ExpressionsController() : base(Dummy.Instance) { }

        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.Config.Controllers
{
    public partial class JobPreferencesController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public JobPreferencesController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected JobPreferencesController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }


        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public JobPreferencesController Actions { get { return MVC.Config.JobPreferences; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Config";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "JobPreferences";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "JobPreferences";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
        }


        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string Index = "Index";
            }
            public readonly string Index = "~/Areas/Config/Views/JobPreferences/Index.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_JobPreferencesController : Disco.Web.Areas.Config.Controllers.JobPreferencesController
    {
        public T4MVC_JobPreferencesController() : base(Dummy.Instance) { }

        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.Config.Controllers
{
    public partial class LoggingController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public LoggingController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected LoggingController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult TaskStatus()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.TaskStatus);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public LoggingController Actions { get { return MVC.Config.Logging; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Config";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Logging";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Logging";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string TaskStatus = "TaskStatus";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string TaskStatus = "TaskStatus";
        }


        static readonly ActionParamsClass_TaskStatus s_params_TaskStatus = new ActionParamsClass_TaskStatus();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_TaskStatus TaskStatusParams { get { return s_params_TaskStatus; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_TaskStatus
        {
            public readonly string id = "id";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string Index = "Index";
                public readonly string TaskStatus = "TaskStatus";
            }
            public readonly string Index = "~/Areas/Config/Views/Logging/Index.cshtml";
            public readonly string TaskStatus = "~/Areas/Config/Views/Logging/TaskStatus.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_LoggingController : Disco.Web.Areas.Config.Controllers.LoggingController
    {
        public T4MVC_LoggingController() : base(Dummy.Instance) { }

        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        partial void TaskStatusOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id);

        public override System.Web.Mvc.ActionResult TaskStatus(string id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.TaskStatus);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            TaskStatusOverride(callInfo, id);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.Config.Controllers
{
    public partial class OrganisationController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public OrganisationController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected OrganisationController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }


        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public OrganisationController Actions { get { return MVC.Config.Organisation; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Config";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Organisation";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Organisation";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
        }


        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string Index = "Index";
            }
            public readonly string Index = "~/Areas/Config/Views/Organisation/Index.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_OrganisationController : Disco.Web.Areas.Config.Controllers.OrganisationController
    {
        public T4MVC_OrganisationController() : base(Dummy.Instance) { }

        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.Config.Controllers
{
    public partial class PluginsController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public PluginsController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected PluginsController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Configure()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Configure);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public PluginsController Actions { get { return MVC.Config.Plugins; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Config";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Plugins";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Plugins";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string Configure = "Configure";
            public readonly string Install = "Install";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string Configure = "Configure";
            public const string Install = "Install";
        }


        static readonly ActionParamsClass_Configure s_params_Configure = new ActionParamsClass_Configure();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Configure ConfigureParams { get { return s_params_Configure; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Configure
        {
            public readonly string PluginId = "PluginId";
            public readonly string form = "form";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string Configure = "Configure";
                public readonly string Index = "Index";
                public readonly string Install = "Install";
            }
            public readonly string Configure = "~/Areas/Config/Views/Plugins/Configure.cshtml";
            public readonly string Index = "~/Areas/Config/Views/Plugins/Index.cshtml";
            public readonly string Install = "~/Areas/Config/Views/Plugins/Install.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_PluginsController : Disco.Web.Areas.Config.Controllers.PluginsController
    {
        public T4MVC_PluginsController() : base(Dummy.Instance) { }

        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        partial void ConfigureOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string PluginId, System.Web.Mvc.FormCollection form);

        public override System.Web.Mvc.ActionResult Configure(string PluginId, System.Web.Mvc.FormCollection form)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Configure);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PluginId", PluginId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "form", form);
            ConfigureOverride(callInfo, PluginId, form);
            return callInfo;
        }

        partial void ConfigureOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string PluginId);

        public override System.Web.Mvc.ActionResult Configure(string PluginId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Configure);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PluginId", PluginId);
            ConfigureOverride(callInfo, PluginId);
            return callInfo;
        }

        partial void InstallOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Install()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Install);
            InstallOverride(callInfo);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.Config.Controllers
{
    public partial class SystemConfigController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public SystemConfigController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected SystemConfigController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }


        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public SystemConfigController Actions { get { return MVC.Config.SystemConfig; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Config";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "SystemConfig";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "SystemConfig";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
        }


        static readonly ActionParamsClass_Index s_params_Index = new ActionParamsClass_Index();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Index IndexParams { get { return s_params_Index; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Index
        {
            public readonly string config = "config";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string Index = "Index";
            }
            public readonly string Index = "~/Areas/Config/Views/SystemConfig/Index.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_SystemConfigController : Disco.Web.Areas.Config.Controllers.SystemConfigController
    {
        public T4MVC_SystemConfigController() : base(Dummy.Instance) { }

        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Disco.Web.Areas.Config.Models.SystemConfig.IndexModel config);

        public override System.Web.Mvc.ActionResult Index(Disco.Web.Areas.Config.Models.SystemConfig.IndexModel config)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "config", config);
            IndexOverride(callInfo, config);
            return callInfo;
        }

    }
}

namespace T4MVC.Config
{
    public class SharedController
    {

        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string LogEvents = "LogEvents";
            }
            public readonly string LogEvents = "~/Areas/Config/Views/Shared/LogEvents.cshtml";
        }
    }

}

namespace Disco.Web.Areas.Public.Controllers
{
    public partial class HeldDevicesController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public HeldDevicesController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected HeldDevicesController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult HeldDevice()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.HeldDevice);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public HeldDevicesController Actions { get { return MVC.Public.HeldDevices; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Public";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "HeldDevices";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "HeldDevices";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string ReadyForReturnXml = "ReadyForReturnXml";
            public readonly string WaitingForUserActionXml = "WaitingForUserActionXml";
            public readonly string HeldDevicesXml = "HeldDevicesXml";
            public readonly string Noticeboard = "Noticeboard";
            public readonly string HeldDevice = "HeldDevice";
            public readonly string HeldDevices = "HeldDevices";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string ReadyForReturnXml = "ReadyForReturnXml";
            public const string WaitingForUserActionXml = "WaitingForUserActionXml";
            public const string HeldDevicesXml = "HeldDevicesXml";
            public const string Noticeboard = "Noticeboard";
            public const string HeldDevice = "HeldDevice";
            public const string HeldDevices = "HeldDevices";
        }


        static readonly ActionParamsClass_HeldDevice s_params_HeldDevice = new ActionParamsClass_HeldDevice();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_HeldDevice HeldDeviceParams { get { return s_params_HeldDevice; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_HeldDevice
        {
            public readonly string id = "id";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string Index = "Index";
                public readonly string Noticeboard = "Noticeboard";
            }
            public readonly string Index = "~/Areas/Public/Views/HeldDevices/Index.cshtml";
            public readonly string Noticeboard = "~/Areas/Public/Views/HeldDevices/Noticeboard.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_HeldDevicesController : Disco.Web.Areas.Public.Controllers.HeldDevicesController
    {
        public T4MVC_HeldDevicesController() : base(Dummy.Instance) { }

        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        partial void ReadyForReturnXmlOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult ReadyForReturnXml()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ReadyForReturnXml);
            ReadyForReturnXmlOverride(callInfo);
            return callInfo;
        }

        partial void WaitingForUserActionXmlOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult WaitingForUserActionXml()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.WaitingForUserActionXml);
            WaitingForUserActionXmlOverride(callInfo);
            return callInfo;
        }

        partial void HeldDevicesXmlOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult HeldDevicesXml()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.HeldDevicesXml);
            HeldDevicesXmlOverride(callInfo);
            return callInfo;
        }

        partial void NoticeboardOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Noticeboard()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Noticeboard);
            NoticeboardOverride(callInfo);
            return callInfo;
        }

        partial void HeldDeviceOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id);

        public override System.Web.Mvc.ActionResult HeldDevice(string id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.HeldDevice);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            HeldDeviceOverride(callInfo, id);
            return callInfo;
        }

        partial void HeldDevicesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult HeldDevices()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.HeldDevices);
            HeldDevicesOverride(callInfo);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.Public.Controllers
{
    public partial class PublicController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public PublicController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected PublicController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }


        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public PublicController Actions { get { return MVC.Public.Public; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Public";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Public";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Public";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string Credits = "Credits";
            public readonly string Licence = "Licence";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string Credits = "Credits";
            public const string Licence = "Licence";
        }


        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string Credits = "Credits";
                public readonly string Index = "Index";
                public readonly string Licence = "Licence";
            }
            public readonly string Credits = "~/Areas/Public/Views/Public/Credits.cshtml";
            public readonly string Index = "~/Areas/Public/Views/Public/Index.cshtml";
            public readonly string Licence = "~/Areas/Public/Views/Public/Licence.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_PublicController : Disco.Web.Areas.Public.Controllers.PublicController
    {
        public T4MVC_PublicController() : base(Dummy.Instance) { }

        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        partial void CreditsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Credits()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Credits);
            CreditsOverride(callInfo);
            return callInfo;
        }

        partial void LicenceOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Licence()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Licence);
            LicenceOverride(callInfo);
            return callInfo;
        }

    }
}

namespace Disco.Web.Areas.Public.Controllers
{
    public partial class UserHeldDevicesController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public UserHeldDevicesController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected UserHeldDevicesController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UserHeldDevice()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UserHeldDevice);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public UserHeldDevicesController Actions { get { return MVC.Public.UserHeldDevices; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Public";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "UserHeldDevices";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "UserHeldDevices";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string ReadyForReturnXml = "ReadyForReturnXml";
            public readonly string WaitingForUserActionXml = "WaitingForUserActionXml";
            public readonly string UserHeldDevicesXml = "UserHeldDevicesXml";
            public readonly string Noticeboard = "Noticeboard";
            public readonly string UserHeldDevice = "UserHeldDevice";
            public readonly string UserHeldDevices = "UserHeldDevices";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string ReadyForReturnXml = "ReadyForReturnXml";
            public const string WaitingForUserActionXml = "WaitingForUserActionXml";
            public const string UserHeldDevicesXml = "UserHeldDevicesXml";
            public const string Noticeboard = "Noticeboard";
            public const string UserHeldDevice = "UserHeldDevice";
            public const string UserHeldDevices = "UserHeldDevices";
        }


        static readonly ActionParamsClass_UserHeldDevice s_params_UserHeldDevice = new ActionParamsClass_UserHeldDevice();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UserHeldDevice UserHeldDeviceParams { get { return s_params_UserHeldDevice; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UserHeldDevice
        {
            public readonly string id = "id";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string Index = "Index";
                public readonly string Noticeboard = "Noticeboard";
            }
            public readonly string Index = "~/Areas/Public/Views/UserHeldDevices/Index.cshtml";
            public readonly string Noticeboard = "~/Areas/Public/Views/UserHeldDevices/Noticeboard.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_UserHeldDevicesController : Disco.Web.Areas.Public.Controllers.UserHeldDevicesController
    {
        public T4MVC_UserHeldDevicesController() : base(Dummy.Instance) { }

        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        partial void ReadyForReturnXmlOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult ReadyForReturnXml()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ReadyForReturnXml);
            ReadyForReturnXmlOverride(callInfo);
            return callInfo;
        }

        partial void WaitingForUserActionXmlOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult WaitingForUserActionXml()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.WaitingForUserActionXml);
            WaitingForUserActionXmlOverride(callInfo);
            return callInfo;
        }

        partial void UserHeldDevicesXmlOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult UserHeldDevicesXml()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UserHeldDevicesXml);
            UserHeldDevicesXmlOverride(callInfo);
            return callInfo;
        }

        partial void NoticeboardOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Noticeboard()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Noticeboard);
            NoticeboardOverride(callInfo);
            return callInfo;
        }

        partial void UserHeldDeviceOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id);

        public override System.Web.Mvc.ActionResult UserHeldDevice(string id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UserHeldDevice);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            UserHeldDeviceOverride(callInfo, id);
            return callInfo;
        }

        partial void UserHeldDevicesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult UserHeldDevices()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UserHeldDevices);
            UserHeldDevicesOverride(callInfo);
            return callInfo;
        }

    }
}

namespace T4MVC.Public
{
    public class SharedController
    {

        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _Layout = "_Layout";
            }
            public readonly string _Layout = "~/Areas/Public/Views/Shared/_Layout.cshtml";
        }
    }

}

namespace Disco.Web.Areas.Services.Controllers
{
    public partial class ClientController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ClientController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected ClientController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Unauthenticated()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Unauthenticated);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Authenticated()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Authenticated);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ClientError()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ClientError);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ClientController Actions { get { return MVC.Services.Client; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Services";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Client";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Client";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Bootstrapper = "Bootstrapper";
            public readonly string PreparationClient = "PreparationClient";
            public readonly string Unauthenticated = "Unauthenticated";
            public readonly string Authenticated = "Authenticated";
            public readonly string ClientError = "ClientError";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Bootstrapper = "Bootstrapper";
            public const string PreparationClient = "PreparationClient";
            public const string Unauthenticated = "Unauthenticated";
            public const string Authenticated = "Authenticated";
            public const string ClientError = "ClientError";
        }


        static readonly ActionParamsClass_Unauthenticated s_params_Unauthenticated = new ActionParamsClass_Unauthenticated();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Unauthenticated UnauthenticatedParams { get { return s_params_Unauthenticated; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Unauthenticated
        {
            public readonly string feature = "feature";
        }
        static readonly ActionParamsClass_Authenticated s_params_Authenticated = new ActionParamsClass_Authenticated();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Authenticated AuthenticatedParams { get { return s_params_Authenticated; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Authenticated
        {
            public readonly string feature = "feature";
        }
        static readonly ActionParamsClass_ClientError s_params_ClientError = new ActionParamsClass_ClientError();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ClientError ClientErrorParams { get { return s_params_ClientError; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ClientError
        {
            public readonly string SessionId = "SessionId";
            public readonly string DeviceIdentifier = "DeviceIdentifier";
            public readonly string JsonException = "JsonException";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_ClientController : Disco.Web.Areas.Services.Controllers.ClientController
    {
        public T4MVC_ClientController() : base(Dummy.Instance) { }

        partial void BootstrapperOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult Bootstrapper()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Bootstrapper);
            BootstrapperOverride(callInfo);
            return callInfo;
        }

        partial void PreparationClientOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        public override System.Web.Mvc.ActionResult PreparationClient()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.PreparationClient);
            PreparationClientOverride(callInfo);
            return callInfo;
        }

        partial void UnauthenticatedOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string feature);

        public override System.Web.Mvc.ActionResult Unauthenticated(string feature)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Unauthenticated);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "feature", feature);
            UnauthenticatedOverride(callInfo, feature);
            return callInfo;
        }

        partial void AuthenticatedOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string feature);

        public override System.Web.Mvc.ActionResult Authenticated(string feature)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Authenticated);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "feature", feature);
            AuthenticatedOverride(callInfo, feature);
            return callInfo;
        }

        partial void ClientErrorOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string SessionId, string DeviceIdentifier, string JsonException);

        public override System.Web.Mvc.ActionResult ClientError(string SessionId, string DeviceIdentifier, string JsonException)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ClientError);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "SessionId", SessionId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "DeviceIdentifier", DeviceIdentifier);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "JsonException", JsonException);
            ClientErrorOverride(callInfo, SessionId, DeviceIdentifier, JsonException);
            return callInfo;
        }

    }
}




#endregion T4MVC
#pragma warning restore 1591


